package math;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.stream.IntStream;

import org.json.JSONException;
import org.json.JSONObject;

/**
 * A MG_MathMainFile class. Contains all the LLF and BLL files for all the maths concepts.
 */
public class MG_MathMainFile {


	private static Object obj;

	/**
	 @name mg_bll_addition_add_by_counting_pictures()
	 @description Define the problem set for the addition of 2 numbers with pictures
	 @param type - Integer - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, String image, String image_title, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_add_by_counting_pictures (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_of_two_numbers_with_images(2, false);
		} else {
			result = mg_get_addition_of_two_numbers_with_images(1, false);
		}

		result.put("question", "Add by counting pictures");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, String image, String image_title, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_add_two_numbers()
	 @description Define the problem set for the addition of 2 numbers
	 @param type - Integer - Chooses a type. Values are 1, 2, 3, 4 or 5, default is 1.
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_addition_add_two_numbers(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_of_two_numbers_upto_20(2, false);
		} else if(type == 3) {
			result = mg_get_addition_of_two_numbers_upto_20(3, false);
		} else if(type == 4) {
			result = mg_get_addition_of_two_numbers_upto_20(4, false);
		} else if(type == 5) {
			result = mg_get_addition_of_two_numbers_upto_20(5, false);
		} else {
			result = mg_get_addition_of_two_numbers_upto_20(1, false);
		}

		result.put("question", "Add 2 numbers");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_add_two_numbers_related_addition()
	 @description Define the problem set for the addition of 2 numbers related addition 2 + 3 = 5 | 3 + 2 = 5
	 @param level - Integer - Chooses a level. Values are 1 or 2 or 3 or 4 default is 1.
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_add_two_numbers_related_addition(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(level == 2) {
			result = mg_get_addition_show_related_addition_of_two_numbers(2);
		} else if(level == 3) {
			result = mg_get_addition_show_related_addition_of_two_numbers(3);
		} else if(level == 4) {
			result = mg_get_addition_show_related_addition_of_two_numbers(4);
		} else if(level == 5) {
			result = mg_get_addition_show_related_addition_of_two_numbers(5);
		} else {
			result = mg_get_addition_show_related_addition_of_two_numbers(1);
		}

		result.put("question", "Add 2 numbers ( Related addition )");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_fill_in_the_missing_number_with_images
	 @description Define the problem set for the Fill in the missing number with images 
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, String image, String image_title, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_fill_in_the_missing_number_with_images(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_addition_filling_the_missing_number_with_image(false);

		result.put("question", "Fill in the missing number");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, String image, String image_title, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
 	 @name mg_bll_addition_fill_in_the_missing_number
	 @description Define the problem set for the Fill in the missing number
	 @param level - Integer - Chooses a level. Values are 1 or 2 or 3 or 4 or 5 default is 1.
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_fill_in_the_missing_number(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_addition_filling_the_missing_number_without_image(level, false);

		result.put("question", "Fill in the missing number\n\n" + result.get("number1") +  " + " + result.get("number2") +  " = " + result.get("number3"));

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_by_counting_forward_with_images
	 @description Define the problem set for the Fill in the missing number
	 @param level - Integer - Chooses a level. Values are 1 or 2 or 3 default is 1.
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, String image, String image_title, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_by_counting_forward_with_images(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_addition_addition_by_counting_forward_with_number_and_image_counting(level, false);

		result.put("question", "Addition by counting forward");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, String image, String image_title, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_by_counting_forward_with_number_line
	 @description Define the problem set for the Fill in the missing number
	 @param level - Integer - Chooses a level. Values are 1 or 2 or 3 default is 1.
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, String image, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_by_counting_forward_with_number_line(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_addition_add_2_numbers_using_number_lines(level, false);

		result.put("question", "Addition by counting forward using number line");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, String image, String image_title, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_adding_zero
	 @description Define the problem set for adding zero
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_adding_zero(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_of_a_number_with_adding_zero(2, false);
		} else {
			result = mg_get_addition_of_a_number_with_adding_zero(1, false);
		}

		result.put("question", "Adding zero");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_adding_tens
	 @description Define the problem set for adding tens
	 @return HashMap ( String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_bll_addition_adding_tens(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_addition_of_two_numbers_with_adding_tens(false);

		result.put("question", "Adding tens");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_understanding_place_values_for_addition
	 @description Define the problem set for understanding place values for addition
	 @param type - Integer - Chooses a type. Values are 1 or 2 or 3 default is 1.
	 @return HashMap ( String question, Integer number1, Integer number2, Integer answer, Integer tens, Integer units, Integer units, )
	 */                  
	public static Map<String, Object> mg_bll_addition_understanding_place_values_for_addition(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_of_two_numbers_with_converting_tens_into_units();
			result.put("question", "Convert into units\n\n"+result.get("number1").toString()+" tens + "+result.get("number2").toString()+" units = ::blank:: units");
		} else if(type == 3) {
			result = mg_get_addition_of_two_numbers_with_converting_units_and_tens();
			result.put("question", "Convert into units and tens\n\n"+result.get("number1").toString()+" tens + "+result.get("number2").toString()+" units = "+result.get("tens").toString()+" tens + "+result.get("units").toString()+" units");
		} else if(type == 4) {
			result = mg_get_addition_of_two_numbers_with_converting_tens_into_hundreds();
			result.put("question", "Convert tens into hundreds\n\n"+result.get("number1").toString()+" tens + "+result.get("number2").toString()+" tens = "+result.get("number3").toString()+" tens = "+result.get("number4").toString()+" hundreds + "+result.get("number5").toString()+" tens");
		} else if(type == 5) {
			result = mg_get_addition_of_two_numbers_with_converting_hundreds_into_tens();
			result.put("question", "Convert hundreds into tens\n\n"+result.get("number1").toString()+" hundreds + "+result.get("number2").toString()+" tens = ::blank:: tens");
		} else if(type == 6) {
			result = mg_get_addition_of_two_numbers_with_converting_tens_and_hundreds();
			result.put("question", "Convert hundreds into tens\n\n"+result.get("number1").toString()+" hundreds + "+result.get("number2").toString()+" tens = "+result.get("hundreds").toString()+" hundreds + "+result.get("tens").toString()+" tens");
		} else {
			result = mg_get_addition_of_two_numbers_with_converting_units_into_tens();
			result.put("question", "Convert into tens:\n\n"+result.get("number1").toString()+" units + "+result.get("number2").toString()+" units = ::blank:: units = ::blank:: tens + ::blank:: units");
		}

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_using_place_values
	 @description Define the problem set for addition using place values
	 @param type - Integer - Chooses a type. Values are 1 or 2 or 3 default is 1.
	 @return HashMap ( String question, Integer number1, Integer number2, Integer answer, Integer tens, Integer units, Integer units, )
	 */                  
	public static Map<String, Object> mg_bll_addition_using_place_values(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_of_two_numbers_with_adding_two_digits_to_two_digits(false);
			result.put("question", "Add");
		} else if(type == 3) {
			result = mg_get_addition_of_two_numbers_with_adding_one_digit_to_three_digits(false);
			result.put("question", "Add");
		} else if(type == 4) {
			result = mg_get_addition_of_two_numbers_with_adding_two_digits_to_three_digits(false);
			result.put("question", "Add");
		} else if(type == 5) {
			result = mg_get_addition_of_two_numbers_with_adding_three_digits_to_three_digits(false);
			result.put("question", "Add");
		} else if(type == 6) {
			result = mg_get_addition_of_two_numbers_with_adding_four_digits_to_four_digits(false);
			result.put("question", "Add");
		} else if(type == 7) {
			result = mg_get_addition_of_two_numbers_with_one_digit_and_two_digits_with_carrying_over(false);
			result.put("question", "Add");
		} else if(type == 8) {
			result = mg_get_addition_of_two_numbers_with_two_digits_with_carrying_over(false);
			result.put("question", "Add");
		} else if(type == 9) {
			result = mg_get_addition_of_two_numbers_with_one_digit_and_three_digits_with_carrying_over(false);
			result.put("question", "Add");
		} else if(type == 10) {
			result = mg_get_addition_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over(1,false);
			result.put("question", "Add");
		} else if(type == 11) {
			result = mg_get_addition_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over(2,false);
			result.put("question", "Add");
		} else if(type == 12) {
			result = mg_get_addition_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over(3,false);
			result.put("question", "Add");
		} else if(type == 13) {
			result = mg_get_addition_of_two_numbers_with_three_digits_with_carrying_over(1,false);
			result.put("question", "Add");
		} else if(type == 14) {
			result = mg_get_addition_of_two_numbers_with_three_digits_with_carrying_over(2,false);
			result.put("question", "Add");
		} else if(type == 15) {
			result = mg_get_addition_of_two_numbers_with_three_digits_with_carrying_over(3,false);
			result.put("question", "Add");
		} else if(type == 16) {
			result = mg_get_addition_of_two_numbers_with_adding_four_digits_to_four_digits_with_carrying_over(false);
			result.put("question", "Add");
		} else {
			result = mg_get_addition_of_two_numbers_with_adding_one_digit_to_two_digits(false);
			result.put("question", "Add");
		}

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_adding_three_numbers
	 @description Define the problem set for addition of 3 numbers
	 @param type - Integer - Chooses a type. Values are 1 or 2 or 3 default is 1.
	 @return HashMap ( String question, Integer number1, Integer number2, Integer answer, Integer tens, Integer units, Integer units, )
	 */                  
	public static Map<String, Object> mg_bll_addition_adding_three_numbers(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_of_three_numbers_with_three_digits_without_carrying_over(false);
			result.put("question", "Add");
		} else if(type == 3) {
			result = mg_get_addition_of_three_numbers_with_four_digits_without_carrying_over(false);
			result.put("question", "Add");
		} else {
			result = mg_get_addition_of_three_numbers_with_two_digits_without_carrying_over(false);
			result.put("question", "Add");
		}

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_horizontal_addition
	 @description Define the problem set for horizontal_addition
	 @param type - Integer - Chooses a level. Values are 1 or 2 or 3 or 4 or 5, default is 1.
	 @return HashMap ( String question, Integer number1, Integer number2, Integer answer, Integer tens, Integer units, Integer units, )
	 */                  
	public static Map<String, Object> mg_bll_addition_horizontal_addition(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_horizontal_addition_of_two_numbers(2,false);
			result.put("question", "Add two numbers");
		} else if(type == 3) {
			result = mg_get_addition_horizontal_addition_of_two_numbers(3,false);
			result.put("question", "Add two numbers");
		} else if(type == 4) {
			result = mg_get_addition_horizontal_addition_of_three_numbers(1,false);
			result.put("question", "Add three numbers");
		} else if(type == 5) {
			result = mg_get_addition_horizontal_addition_of_three_numbers(2,false);
			result.put("question", "Add three numbers");
		} else if(type == 6) {
			result = mg_get_addition_horizontal_addition_of_three_numbers(3,false);
			result.put("question", "Add three numbers");
		} else {
			result = mg_get_addition_horizontal_addition_of_two_numbers(1,false);
			result.put("question", "Add two numbers");
		}

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_convert_horizontal_to_vertical_and_add()
	 @description Define the problem set to Convert horizontal to vertical and add
	 @param type - Integer - Chooses a type. Values are 1, 2, 3, 4, 5 or 6, default is 1.
	 @return HashMap ( String question, Integer number1, Integer number2, Integer answer, Integer tens, Integer units, Integer units, )
	 */                  
	public static Map<String, Object> mg_bll_addition_convert_horizontal_to_vertical_and_add(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_of_four_digit_numbers_upto_four_digits(1, false);
			result.put("question", "Add");
		} else if(type == 3) {
			result = mg_get_addition_of_four_digit_numbers_upto_four_digits(2, false);
			result.put("question", "Add");
		} else if(type == 4) {
			result = mg_get_addition_of_four_digit_numbers_upto_four_digits(3, false);;
			result.put("question", "Add");
		} else if(type == 5) {
			result = mg_get_addition_of_five_digit_numbers_upto_five_digits(1, false);
			result.put("question", "Add");
		} else if(type == 6) {
			result = mg_get_addition_of_five_digit_numbers_upto_five_digits(2, false);
			result.put("question", "Add");
		} else if(type == 7) {
			result = mg_get_addition_of_five_digit_numbers_upto_five_digits(3, false);
			result.put("question", "Add");
		} else if(type == 8) {
			result = mg_get_addition_of_five_digit_numbers_upto_five_digits(4, false);
			result.put("question", "Add");
		} else {
			result = mg_get_addition_vertical_addition_upto_three_digits();
			result.put("question", "Add");
		}

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer answer, ArrayList mcq_options )
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_revision()
	 @description Define the problem set to add three numbers.
	 @return HashMap (String question, Integer number1, Integer number2, Integer number3, Integer answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_addition_revision(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_addition_of_numbers_addition_revision(false);

		result.put("question", "Add three numbers");

		/**
		 * Return the HashMap (String question, Integer number1, Integer number2, Integer number3, Integer answer, ArrayList of mcq options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_for_addition_word_problems()
	 @description Define the problem set for the addition of 2 numbers.
	 @param type - int - Chooses a type. Values are 1 to 7.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_addition_for_addition_word_problems(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_addition_for_daily_life_examples(2, false);
		} else if(type == 3) {
			result = mg_get_addition_for_daily_life_examples(3, false);
		} else if(type == 4) {
			result = mg_get_addition_for_three_number_addition(1, false);
		} else if(type == 5) {
			result = mg_get_addition_for_three_number_addition(2, false);
		} else if(type == 6) {
			result = mg_get_addition_for_three_number_addition(3, false);
		} else if(type == 7) {
			result = mg_get_addition_for_sum_of_smallest_and_largest_number1_digit_number(false);
		} else {
			result = mg_get_addition_for_daily_life_examples(1, false);
		}

		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_angles_identifying_lines()
	 @description Gets the problem set data identifying the angle type from a shown image.
	 @return HashMap (String question, String image of lines, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_angles_identifying_lines(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_angles_for_identifying_parallel_or_perpendicular_lines(true);
		result.put("question", "The lines in the figure are ::blank::");

		/**
		 * Return the HashMap with String question, String image of lines, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_angles_identifying_angle_type()
	 @description Gets the problem set data identifying the angle type.
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image of lines, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_angles_identifying_angle_type(int type) {

		Map<String, Object> result = new HashMap<>();
		
		Random random = new Random();

		if(type == 2) {
			result = mg_get_angles_for_identifying_the_angle_type_from_a_shown_number(true);
			result.put("question", "Degree " + result.get("number") +  " is ::blank::");
		} else {
			result = mg_get_angles_for_identifying_the_angle_type_from_the_images(true, true);
			
			if(mg_giveRandomInteger(0, 1, random) == 0) {
				result.put("question", "Identify the angle shown ::blank::");
			} else {
				result.put("question", "In the figure, " + result.get("name_of_angle") + " is ::blank::");
			}
			//result.put("question", "Identify the angle shown above ::blank::");
			
		}

		/**
		 * Return the HashMap with String question, String image of lines, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_angles_angle_terms()
	 @description Gets the problem set data identifying the name of the angle and point / vertex with the angle.
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image with angle marked, String parameter value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_angles_angle_terms(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_angles_for_identifying_the_name_of_angle(true);
			result.put("question", "What is the name of the angle shown?");
		} else {
			result = mg_get_angles_for_identifying_the_vertex_of_angle(true);
			result.put("question", "At what ".concat(result.get("parameter_value").toString()).concat(" is the angle located?"));
		}

		/**
		 * Return the HashMap with String question, String image with angle marked, String parameter value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_angles_measuring_angles()
	 @description Gets the problem set data containing the angle shown by the protractor.
	 @return HashMap (String question, String image of protractor showing some angle, int answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_angles_measuring_angles(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_angles_for_measuring_angles_using_a_protractor(false);
		result.put("question", "What is the measurement of this angle?");

		/**
		 * Return the HashMap with String question, String image of protractor showing some angle, int answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_circles_parts_of_a_circle()
	 @description Gets the problem set data identifying the highlighted part of the circle.
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image, String part name / point name, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_circles_parts_of_a_circle(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_circles_for_points_inside_or_outside_the_circle(true);
			result.put("question", "The point " + result.get("point_name") + " is ::blank::");
		} else {
			result = mg_get_circles_for_parts_of_a_circle(true);
			result.put("question", "In the figure, what is " + result.get("part_name") + "?");
		}

		/**
		 * Return the HashMap with String question, String image, String part name / point name, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_circles_radius_and_diameter()
	 @description Gets the problem set data related to the radius or diameter.
	 @param type - int - Chooses a type. Values are 1, 2, 3 or 4.
	 @return HashMap (String question, String image, String parameter value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_circles_radius_and_diameter(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_circles_for_multiple_radii_and_diameter(false);
			result.put("question", "If " + result.get("value_1") + " is " + result.get("number1") + " cm, what is the length of " + result.get("value_2") + " ?");
		} else if(type == 3) {
			result = mg_get_circles_for_length_of_radius_or_diameter_using_compass_image(false);
			result.put("question", "If the compass is used to draw a circle, what would be its " + result.get("parameter_value") + " ?");
		} else if(type == 4) {
			result = mg_get_circles_for_length_of_radius_or_diameter_with_just_numbers(false);
			result.put("question", "The " + result.get("parameter_value_1") + " of the circle is " + result.get("number1") + " cm. Its " + result.get("parameter_value_2") + " is");
		} else {
			result = mg_get_circles_for_obtaining_the_size_of_radius_or_diameter_from_circle_image(false);
			result.put("question", "The " + result.get("parameter_value") + " of the circle is");
		}

		/**
		 * Return the HashMap with String question, String image, String parameter value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_circles_Arcs()
	 @description Gets the problem set data identifying major or minor arc in the shown image of the circle.
	 @return HashMap (String question, String image with arcs marked, String arc value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_circles_Arcs(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_circles_for_identifying_major_or_minor_arc(true);

		result.put("question", "In the circle, which of the following is the " + result.get("arc_value") + " arc?");

		/**
		 * Return the HashMap with String question, String image with arcs marked, String arc value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_comparison_comparing_quantities
	 @description Define the problem set for comparing quantities
	 @param type - Integer - Chooses a type. Values are 1 or 2.
	 @return HashMap
	 */                  
	public static Map<String, Object> mg_bll_comparison_comparing_quantities(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_comparison_fewer_or_more_of_same_object(2,true,true);
			result.put("question", result.get("name1").toString() + " has ::images_set_1::\n\n" + result.get("name2").toString() + " has ::images_set_2::\n\nWho has " + result.get("comparison_value").toString() + " " + result.get("object_name").toString() + "?" );
		} else if(type == 3) {
			result = mg_get_comparison_fewer_or_more_of_different_objects(1,false,true);
			result.put("question", "Are there " + result.get("comparison_value").toString() + " " + result.get("object1_name").toString() + " or " + result.get("object2_name").toString() + "?" );
		} else if(type == 4) {
			result = mg_get_comparison_fewer_or_more_of_different_objects(2,false,true);
			result.put("question", "Are there " + result.get("comparison_value").toString() + " " + result.get("object1_name").toString() + " or " + result.get("object2_name").toString() + "?" );
		} else if(type == 5) {
			result = mg_get_comparison_fewer_or_more_of_different_objects(1,true,true);
			result.put("question", "Are there " + result.get("comparison_value").toString() + " " + result.get("object1_name").toString() + " or " + result.get("object2_name").toString() + "?" );
		} else if(type == 6) {
			result = mg_get_comparison_fewer_or_more_of_different_objects(2,true,true);
			result.put("question", "Are there " + result.get("comparison_value").toString() + " " + result.get("object1_name").toString() + " or " + result.get("object2_name").toString() + "?" );
		} else {
			result = mg_get_comparison_fewer_or_more_of_same_object(1,false,true);
			result.put("question", "Which group has " + result.get("comparison_value").toString() + " " + result.get("object_name").toString() + "?" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	 @name mg_bll_comparison_same_or_different
	 @description Define the problem set for same or different
	 @param type - Integer - Chooses a type. Values are 1 or 2.
	 @return HashMap
	 */                  
	public static Map<String, Object> mg_bll_comparison_same_or_different(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_comparison_for_identifying_different_image(true);
			result.put("question", "Which object is different?" );
		} else {
			result = mg_get_comparison_for_identifying_same_image(true);
			result.put("question", "Which object is the same as the shown figure?" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_comparison_comparing_numbers
	@description Define the problem set for comparing numbers
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_comparison_comparing_numbers(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_comparison_larger_or_smaller_number(2,false,true);
			result.put("question", "Which number is " + result.get("comparison_value").toString() + "?" );
		} else if(type == 3) {
			result = mg_get_comparison_larger_or_smaller_number(3,false,true);
			result.put("question", "Which number is " + result.get("comparison_value").toString() + "?" );
		} else if(type == 4) {
			result = mg_get_comparison_larger_or_smaller_number(4,false,true);
			result.put("question", "Which number is " + result.get("comparison_value").toString() + "?" );
		} else if(type == 5) {
			result = mg_get_comparison_larger_or_smaller_number(5,false,true);
			result.put("question", "Which number is " + result.get("comparison_value").toString() + "?" );
		} else if(type == 6) {
			result = mg_get_comparison_largest_or_smallest_number(1,true);
			result.put("question", "number is the " + result.get("comparison_value").toString() + "?" );
		} else if(type == 7) {
			result = mg_get_comparison_largest_or_smallest_number(2,true);
			result.put("question", "number is the " + result.get("comparison_value").toString() + "?" );
		} else if(type == 8) {
			result = mg_get_comparison_largest_or_smallest_number(3,true);
			result.put("question", "number is the " + result.get("comparison_value").toString() + "?" );
		} else if(type == 9) {
			result = mg_get_comparison_largest_or_smallest_number(4,true);
			result.put("question", "number is the " + result.get("comparison_value").toString() + "?" );
		} else if(type == 10) {
			result = mg_get_comparison_largest_or_smallest_number(5,true);
			result.put("question", "number is the " + result.get("comparison_value").toString() + "?" );
		} else {
			result = mg_get_comparison_larger_or_smaller_number(1,false,true);
			result.put("question", "Which number is " + result.get("comparison_value").toString() + "?" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_counting_with_objects
	@description Define the problem set for counting with objects
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_counting_with_objects(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_linear_form(2,false);
			result.put("question", "How many " + result.get("object").toString() + " are there?" );
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_linear_form(3,false);
			result.put("question", "How many " + result.get("object").toString() + " are there?" );
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_Brownian_form(1,false);
			result.put("question", "Count the " + result.get("object").toString() );
		} else if(type == 5) {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_Brownian_form(2,false);
			result.put("question", "Count the " + result.get("object").toString() );
		} else if(type == 6) {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_Brownian_form(3,false);
			result.put("question", "Count the " + result.get("object").toString() );
		} else if(type == 7) {
			result = mg_get_counting_and_numbers_for_counting_on_fingers(false);
			result.put("question", "What number is shown below?");
		} else if(type == 8) {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_linear_form(1,false);
			result.put("question", "Put " + result.get("answer").toString() + " " + result.get("object").toString() + " in the box.");
		} else if(type == 9) {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_linear_form(2,false);
			result.put("question", "Put " + result.get("answer").toString() + " " + result.get("object").toString() + " in the box.");
		} else {
			result = mg_get_counting_and_numbers_for_counting_objects_shown_in_linear_form(1,false);
			result.put("question", "How many " + result.get("object").toString() + " are there?" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_counting_by_tens_and_ones
	@description Define the problem set for counting by tens and ones
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_counting_by_tens_and_ones(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_counting_and_numbers_for_counting_tens_and_ones_with_images(false);
		result.put("question", "Count the " + result.get("object").toString() + ".\n\n::blank::" );
 
		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_counting_in_order
	@description Define the problem set for count in order
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	@SuppressWarnings("unchecked")
	public static Map<String, Object> mg_bll_countingandnumbers_counting_in_order(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_for_counting_in_order_with_images(2,2);
			result.put("question", "Count the " + result.get("object").toString() + ". Fill in the missing numbers" );
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_for_counting_in_order_with_images(3,2);
			result.put("question", "Count the " + result.get("object").toString() + ". Fill in the missing numbers" );
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_for_counting_using_number_lines(1,1);
			result.put("question", "Fill in the missing number:");
		} else if(type == 5) {
			result = mg_get_counting_and_numbers_for_counting_using_number_lines(2,2);
			result.put("question", "Fill in the missing number:");
		} else if(type == 6) {
			result = mg_get_counting_and_numbers_for_counting_using_number_lines(3,2);
			result.put("question", "Fill in the missing number:");
		} else if(type == 7) {
			result = mg_get_counting_and_numbers_for_counting_using_number_lines(1,1);
			result.remove("image");
			String quest = "Fill in the missing number:\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			
			result.put("question", quest);
		} else if(type == 8) {
			result = mg_get_counting_and_numbers_for_counting_using_number_lines(2,2);
			result.remove("image");
			String quest = "Fill in the missing number:\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else if(type == 9) {
			result = mg_get_counting_and_numbers_for_counting_using_number_lines(3,2);
			result.remove("image");
			String quest = "Fill in the missing number:\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else {
			result = mg_get_counting_and_numbers_for_counting_in_order_with_images(1,1);
			result.put("question", "Count the " + result.get("object").toString() + ". Fill in the missing numbers" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_counting_with_ten_frames
	@description Define the problem set for counting with ten frames
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_counting_with_ten_frames(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_for_putting_objects_on_the_frame(2);
			result.put("question", "Put " + result.get("number").toString() + " " + result.get("object").toString() + " on the frame." );
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_for_counting_objects_from_frame(1);
			result.put("question", "Count the " + result.get("object").toString() + "." );
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_for_counting_objects_from_frame(2);
			result.put("question", "How many " + result.get("object").toString() + " are there?" );
		} else {
			result = mg_get_counting_and_numbers_for_putting_objects_on_the_frame(1);
			result.put("question", "Put " + result.get("number").toString() + " " + result.get("object").toString() + " on the frame." );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_counting_up_and_down
	@description Define the problem set for counting up and down
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_counting_up_and_down(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_counting_and_numbers_for_counting_up_and_down_from_image(level,true);
		if(result.get("comparison_value").toString().equals("less")) {
			result.put("question", "You have " + result.get("number").toString() + " " + result.get("object").toString() + ".\n\nYou gave 1 " + result.get("object").toString() + " away.\n\nHow many " + result.get("object").toString() + " do you have now?" );
		} else {
			result.put("question", "You have " + result.get("number").toString() + " " + result.get("object").toString() + ".\n\nYou get 1 " + result.get("comparison_value").toString() + " " + result.get("object").toString() + ".\n\nHow many " + result.get("object").toString() + " do you have now?" );
		}
		

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_counting_forward_and_backward
	@description Define the problem set for counting forward and backward
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_counting_forward_and_backward(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_counting_forward_from_a_random_number(2);
			String quest = "Count forward from " + result.get("number").toString() + ". \n\n" ;
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_counting_backward_from_a_random_number(1);
			String quest = "Count backward from " + result.get("number").toString() + ". \n\n" ;
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_counting_backward_from_a_random_number(2);
			String quest = "Count backward from " + result.get("number").toString() + ". \n\n"  ;
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else {
			result = mg_get_counting_and_numbers_counting_forward_from_a_random_number(1);
			String quest = "Count forward from " + result.get("number").toString() + ". \n\n" ;
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_number_before_after_and_in_the_middle
	@description Define the problem set for Number before, after and in the middle
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_number_before_after_and_in_the_middle(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_for_number_before_or_after_a_random_number_with_number_lines(2,false);
			result.put("question", "What number comes " + result.get("comparison_value").toString() + " " + result.get("number").toString() + "?" );
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_for_number_before_or_after_a_random_number_with_number_lines(1,false);
			result.put("question", "What number comes " + result.get("comparison_value").toString() + " " + result.get("number").toString() + "?" );
			result.remove("image");
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_for_number_before_or_after_a_random_number_with_number_lines(2,false);
			result.put("question", "What number comes " + result.get("comparison_value").toString() + " " + result.get("number").toString() + "?" );
			result.remove("image");
		} else if(type == 5) {
			result = mg_get_counting_and_numbers_for_number_in_between_two_numbers_with_number_lines(1,false);
			result.put("question", "What number comes in between " + result.get("number1").toString() + " and " + result.get("number2").toString() + "?" );
		} else if(type == 6) {
			result = mg_get_counting_and_numbers_for_number_in_between_two_numbers_with_number_lines(2,false);
			result.put("question", "What number comes in between " + result.get("number1").toString() + " and " + result.get("number2").toString() + "?" );
		} else if(type == 7) {
			result = mg_get_counting_and_numbers_for_number_in_between_two_numbers_with_number_lines(1,false);
			result.put("question", "What number comes in between " + result.get("number1").toString() + " and " + result.get("number2").toString() + "?" );
			result.remove("image");
		} else if(type == 8) {
			result = mg_get_counting_and_numbers_for_number_in_between_two_numbers_with_number_lines(2,false);
			result.put("question", "What number comes in between " + result.get("number1").toString() + " and " + result.get("number2").toString() + "?" );
			result.remove("image");
		} else if(type == 9) {
			result = mg_get_counting_and_numbers_for_filling_values_in_the_table(1, 3, 3, 1);
			result.put("question", "Fill in the table:" );
		} else if(type == 10) {
			result = mg_get_counting_and_numbers_for_filling_values_in_the_table(2, 3, 3, 1);
			result.put("question", "Fill in the table:" );
		} else {
			result = mg_get_counting_and_numbers_for_number_before_or_after_a_random_number_with_number_lines(1,false);
			result.put("question", "What number comes " + result.get("comparison_value").toString() + " " + result.get("number").toString() + "?" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_names_of_numbers
	@description Define the problem set for names of numbers
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_names_of_numbers(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(2,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(3,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(4,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 5) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(5,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 6) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(6,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 7) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(7,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 8) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(8,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 9) {
			result = mg_get_counting_and_numbers_digit_to_word_of_a_number(1,true);
			result.put("question", result.get("number").toString() + "\n\nWhat number is shown?" );
		} else if(type == 10) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(2,true);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else if(type == 11) {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(3,true);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		} else {
			result = mg_get_counting_and_numbers_word_to_digit_of_a_number(1,false);
			result.put("question", "Write " + result.get("number_word").toString() + " using digits." );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_skip_counting
	@description Define the problem set for Skip Counting
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_skip_counting(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_counting_by_steps(6, 1);
			String quest = "Count by " + result.get("steps")+ ".\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest );
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_counting_by_steps_in_words(1);
			result.put("question", "When counting by " + result.get("steps").toString() + ", what comes after " + result.get("number").toString() + "?" );
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_counting_by_steps_in_words(2);
			result.put("question", "When counting by " + result.get("steps").toString() + ", what comes after " + result.get("number").toString() + "?" );
		} else {
			result = mg_get_counting_and_numbers_skip_counting_without_images();
			String quest = "Fill in the missing number:\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest );
			
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_even_and_odd_numbers
	@description Define the problem set for even and odd numbers
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_even_and_odd_numbers(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_for_checking_whether_a_random_number_is_even_or_odd(1,true);
			result.put("question", "Is " + result.get("number").toString() + " even or odd?" );
		} else if(type == 3) {
			result = mg_get_counting_and_numbers_for_checking_whether_a_random_number_is_even_or_odd(2,true);
			result.put("question", "Is " + result.get("number").toString() + " even or odd?" );
		} else if(type == 4) {
			result = mg_get_counting_and_numbers_for_checking_whether_a_random_number_is_even_or_odd(3,true);
			result.put("question", "Is " + result.get("number").toString() + " even or odd?" );
		} else if(type == 5) {
			result = mg_get_counting_and_numbers_for_even_or_odd_number_before_or_after_a_random_number(1,false);
			result.put("question", "Which " + result.get("parity_value").toString() + " number comes " + result.get("comparison_value").toString() + " " + result.get("number").toString() + "?" );
		} else if(type == 6) {
			result = mg_get_counting_and_numbers_for_even_or_odd_number_before_or_after_a_random_number(2,false);
			result.put("question", "Which " + result.get("parity_value").toString() + " number comes " + result.get("comparison_value").toString() + " " + result.get("number").toString() + "?" );
		} else if(type == 7) {
			result = mg_get_counting_and_numbers_for_even_or_odd_number_before_or_after_a_random_number(3,false);
			result.put("question", "Which " + result.get("parity_value").toString() + " number comes " + result.get("comparison_value").toString() + " " + result.get("number").toString() + "?" );
		} else if(type == 8) {
			result = mg_get_counting_and_numbers_for_checking_whether_addition_of_two_numbers_is_odd_or_even(1,true);
			result.put("question", "Is " + result.get("number1").toString() + " + " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 9) {
			result = mg_get_counting_and_numbers_for_checking_whether_addition_of_two_numbers_is_odd_or_even(2,true);
			result.put("question", "Is " + result.get("number1").toString() + " + " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 10) {
			result = mg_get_counting_and_numbers_for_checking_whether_addition_of_two_numbers_is_odd_or_even(3,true);
			result.put("question", "Is " + result.get("number1").toString() + " + " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 11) {
			result = mg_get_counting_and_numbers_for_checking_whether_subtraction_of_two_numbers_is_odd_or_even(1,true);
			result.put("question", "Is " + result.get("number1").toString() + " - " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 12) {
			result = mg_get_counting_and_numbers_for_checking_whether_subtraction_of_two_numbers_is_odd_or_even(2,true);
			result.put("question", "Is " + result.get("number1").toString() + " - " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 13) {
			result = mg_get_counting_and_numbers_for_checking_whether_subtraction_of_two_numbers_is_odd_or_even(3,true);
			result.put("question", "Is " + result.get("number1").toString() + " - " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 14) {
			result = mg_get_counting_and_numbers_for_checking_whether_multiplication_of_two_numbers_is_odd_or_even(1,true);
			result.put("question", "Is " + result.get("number1").toString() + " x " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 15) {
			result = mg_get_counting_and_numbers_for_checking_whether_multiplication_of_two_numbers_is_odd_or_even(2,true);
			result.put("question", "Is " + result.get("number1").toString() + " x " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 16) {
			result = mg_get_counting_and_numbers_for_checking_whether_multiplication_of_two_numbers_is_odd_or_even(3,true);
			result.put("question", "Is " + result.get("number1").toString() + " x " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 17) {
			result = mg_get_counting_and_numbers_for_checking_whether_division_of_two_numbers_is_odd_or_even(1,true);
			result.put("question", "Is " + result.get("number1").toString() + " / " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 18) {
			result = mg_get_counting_and_numbers_for_checking_whether_division_of_two_numbers_is_odd_or_even(2,true);
			result.put("question", "Is " + result.get("number1").toString() + " / " + result.get("number2").toString() + " odd or even?" );
		} else if(type == 19) {
			result = mg_get_counting_and_numbers_for_checking_whether_division_of_two_numbers_is_odd_or_even(3,true);
			result.put("question", "Is " + result.get("number1").toString() + " / " + result.get("number2").toString() + " odd or even?" );
		} else {
			result = mg_get_counting_and_numbers_for_even_or_odd_number_of_objects_with_images(true);
			result.put("question", "Is the number of " + result.get("object").toString() + " even or odd?" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_ordinal_and_cardinal_numbers
	@description Define the problem set for ordinal and cardinal numbers
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_ordinal_and_cardinal_numbers(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_counting_and_numbers_for_identifying_whether_number_is_a_cardinal_or_ordinal_number(true);
			result.put("question", "Which of the following is " + result.get("number_type").toString() + " number?" );
		} else {
			result = mg_get_counting_and_numbers_for_identifying_an_object(true);
			result.put("question", "What is the " + result.get("number_ordinal").toString() + " object from the " + result.get("direction_value").toString() + "?" );
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_make_numbers
	@description Define the problem set for make numbers
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_make_numbers(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_counting_and_numbers_for_making_the_smallest_and_largest_number_from_given_digits(level);
		String quest = "What is the " + result.get("comparison_value").toString() + " number you can make using the digits below?\n\n" + result.get("number1").toString() + "     "  + result.get("number2").toString();
		
		if(result.get("number3") != null) {
			quest += "     "  + result.get("number3").toString();
		}
		
		if(result.get("number4") != null) {
			quest += "     "  + result.get("number4").toString();
		}
		
		if(result.get("number5") != null) {
			quest += "     "  + result.get("number5").toString();
		}
		
		result.put("question", quest );

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_ascending_descending_numbers
	@description Define the problem set for ascending descending numbers
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_ascending_descending_numbers(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_counting_and_numbers_for_arranging_in_order(level);
		String quest = "";
		if(result.get("comparison_value").toString().equals("ascending") || result.get("comparison_value").toString().equals("descending")) {
			quest = "Arrange these numbers in " + result.get("comparison_value").toString() + " order.";
		} else {
			quest = "Arrange these numbers in order from " + result.get("comparison_value").toString() ;
		}
		
		result.put("question", quest);

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_countingandnumbers_roman_numerals
	@description Define the problem set for Roman Numerals
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_countingandnumbers_roman_numerals(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_counting_and_numbers_for_arranging_in_order(level,false);
		result.put("question", "Convert the following Roman numeral number into digits \n\n" + result.get("roman").toString());

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_decimals_convert_fractions_into_decimal_numbers
	@description Define the problem set to convert fractions into decimal numbers
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_decimals_convert_fractions_into_decimal_numbers (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_decimal_convert_proper_fractions_into_decimal_numbers(2);
		} else if(type == 3) {
			result = mg_get_decimal_convert_proper_fractions_into_decimal_numbers(3);
		} else if(type == 4) {
			result = mg_get_decimal_convert_mixed_fractions_into_decimal_numbers(1);
		} else if(type == 5) {
			result = mg_get_decimal_convert_mixed_fractions_into_decimal_numbers(2);
		} else if(type == 6) {
			result = mg_get_decimal_convert_mixed_fractions_into_decimal_numbers(3);
		} else if(type == 7) {
			result = mg_get_decimal_convert_improper_fractions_into_decimal_numbers(1);
		} else if(type == 8) {
			result = mg_get_decimal_convert_improper_fractions_into_decimal_numbers(2);
		} else if(type == 9) {
			result = mg_get_decimal_convert_improper_fractions_into_decimal_numbers(3);
		} else if(type == 10) {
			result = mg_get_decimal_convert_improper_fractions_into_decimal_numbers(4);
		} else if(type == 11) {
			result = mg_get_decimal_convert_fractions_in_words_to_decimal_numbers();
		} else{
			result = mg_get_decimal_convert_proper_fractions_into_decimal_numbers(1);
		}

		result.put("question", "Convert "+result.get("fraction")+" into decimal form");
		
		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_decimals_convert_decimal_numbers_to_fractions
	@description Define the problem set to convert decimal numbers to fractions
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_decimals_convert_decimal_numbers_to_fractions (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result  = new HashMap<>();

		if(type == 2) {
			result = mg_get_decimal_convert_decimal_number_into_fraction(2);
		} else if(type == 3) {
			result = mg_get_decimal_convert_decimal_number_into_fraction(3);
		} else if(type == 4) {
			result = mg_get_decimal_convert_decimal_number_into_fraction(4);
		} else if(type == 5) {
			result = mg_get_decimal_convert_decimal_number_into_fraction(5);
		} else if(type == 6) {
			result = mg_get_decimal_convert_fractions_in_simplest_form(1);
		} else if(type == 7) {
			result = mg_get_decimal_convert_fractions_in_simplest_form(2);
		} else if(type == 8) {
			result = mg_get_decimal_convert_fractions_in_simplest_form(3);
		} else if(type == 9) {
			result = mg_get_decimal_convert_fractions_in_simplest_form(4);
		} else{
			result = mg_get_decimal_convert_decimal_number_into_fraction(1);
		}

		result.put("question", "Write " + result.get("decimal").toString() + " as a fraction.");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_decimals_understanding_decimals_expressed_in_words
	@description Define the problem set to understanding decimals expressed in words
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_decimals_understanding_decimals_expressed_in_words (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result  = new HashMap<>();

		if(type == 2) {
			result = mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_less_than_1(2);
		} else if(type == 3) {
			result = mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_more_than_1(1);
		} else if(type == 4) {
			result = mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_more_than_1(2);
		} else{
			result = mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_less_than_1(1);
		}

		result.put("question", "Write " + result.get("fraction").toString() + " in decimal form.");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_decimals_place_values_in_decimal_numbers
	@description Define the problem set to place values in decimal numbers
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_decimals_place_values_in_decimal_numbers (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result  = new HashMap<>();

		if(type == 2) {
			result = mg_get_decimal_place_values_in_decimal_numbers_type2(true);
			result.put("question", "In " + result.get("decimal").toString() + ", which digit is in the " + result.get("place").toString() + " place?");
		} else if(type == 3) {
			result = mg_get_decimal_place_values_in_decimal_numbers_type3(true);
			result.put("question", "In " + result.get("decimal").toString() + ", what is the place value of the underlined digit?");
		} else{
			result = mg_get_decimal_place_values_in_decimal_numbers_type1();
			result.put("question", "In " + result.get("decimal").toString() + ", in which place is the underlined digit?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_decimals_understanding_units_in_decimals
	@description Define the problem set to Understanding units in decimals
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_decimals_understanding_units_in_decimals (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result  = new HashMap<>();

		if(type == 2) {
			result = mg_get_decimal_convert_decimal_length_into_meters_and_centimeter();
			result.put("question", "How many meters and how many centimeters are there in " + result.get("decimal").toString() + " meters?\n\n::blank:: meters ::blank:: centimeters");
		} else if(type == 3) {
			result = mg_get_decimal_convert_decimal_length_into_centimeters_and_millimeters();
			result.put("question", "How many centimeters and how many millimeters are there in " + result.get("decimal").toString() + " centimeters?\n\n::blank:: centimeters ::blank:: millimeters");
		} else if(type == 4) {
			result = mg_get_decimal_convert_money_into_decimal_form(1);
			result.put("question", "Write " + result.get("rupees").toString() + " rupees and " + result.get("paise").toString() + " paise in decimal form\n\n::blank::");
		} else if(type == 5) {
			result = mg_get_decimal_convert_money_into_decimal_form(2);
			result.put("question", "Write " + result.get("paise").toString() + " paise in decimal form\n\n::blank::");
		} else if(type == 6) {
			result = mg_get_decimal_convert_length_into_decimal_form_m_and_cm(1);
			result.put("question", "Write " + result.get("meters").toString() + " meters and " + result.get("centimeters").toString() + " centimeters in decimal form\n\n::blank::");
		} else if(type == 7) {
			result = mg_get_decimal_convert_length_into_decimal_form_m_and_cm(2);
			result.put("question", "Write " + result.get("centimeters").toString() + " centimeters in decimal form\n\n::blank::");
		} else if(type == 8) {
			result = mg_get_decimal_convert_length_into_decimal_form_cm_and_mm(1);
			result.put("question", "Write " + result.get("centimeters").toString() + " centimeters and " + result.get("millimeters").toString() + " millimeters in decimal form\n\n::blank::");
		} else if(type == 9) {
			result = mg_get_decimal_convert_length_into_decimal_form_cm_and_mm(2);
			result.put("question", "Write " + result.get("millimeters").toString() + " millimeters in decimal form\n\n::blank::");
		} else {
			result = mg_get_decimal_convert_decimal_money_into_rupees_and_paise();
			result.put("question", "How many rupees and how many paise are there in Rs. " + result.get("decimal").toString() + "?\n\nRs. ::blank::     paisa ::blank::");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_decimals_add_and_subtract_decimals
	@description Define the problem set to Add and subtract decimals
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_decimals_add_and_subtract_decimals (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result  = new HashMap<>();

		if(type == 2) {
			result = mg_get_decimal_simple_add(2);
			result.put("question", "Add:");
		} else if(type == 3) {
			result = mg_get_decimal_simple_add(3);
			result.put("question", "Add:");
		} else if(type == 4) {
			result = mg_get_decimal_simple_add(4);
			result.put("question", "Add:");
		} else if(type == 5) {
			result = mg_get_decimal_simple_add(5);
			result.put("question", "Add:");
		} else if(type == 6) {
			result = mg_get_decimal_simple_subtract(1);
			result.put("question", "Subtract:");
		} else if(type == 7) {
			result = mg_get_decimal_simple_subtract(2);
			result.put("question", "Subtract:");
		} else if(type == 8) {
			result = mg_get_decimal_simple_subtract(3);
			result.put("question", "Subtract:");
		} else if(type == 9) {
			result = mg_get_decimal_simple_subtract(4);
			result.put("question", "Subtract:");
		} else if(type == 10) {
			result = mg_get_decimal_simple_subtract(5);
			result.put("question", "Subtract:");
		} else {
			result = mg_get_decimal_simple_add(1);
			result.put("question", "Add:");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_decimals_convert_and_add_decimals
	@description Define the problem set to convert and add decimals
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_decimals_convert_and_add_decimals (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result  = new HashMap<>();

		result = mg_get_decimal_convert_fraction_into_decimal_and_add();
		result.put("question", "Convert the following into decimal fractions and add \n\n" + result.get("decimal1").toString() + " " + result.get("unit").toString() + " and " + result.get("decimal2").toString() + " " + result.get("unit").toString() + ".\n\n::blank::");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_division_division_preparation
	@description Define the problem set for division preparation
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_division_division_preparation(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_division_of_two_numbers_without_images(1,false);
			result.put("question", "Total number of " + result.get("object_name").toString() + " = " + result.get("number1").toString() + ". " + result.get("object_name").toString() + " in each lot = " + result.get("number2").toString() + ". Number of lots?\n\n::blank::");
		} else if(type == 3) {
			result = mg_get_division_of_two_numbers_with_images(1,false);
			result.put("question", "There are " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". Each " + result.get("group_name").toString() + " gets " + result.get("number2").toString() + " " + result.get("object_name").toString() + ". How many " + result.get("group_name").toString() + " are there?\n\n::blank::");
			result.put("divide", 2);
		} else if(type == 4) {
			result = mg_get_division_of_two_numbers_without_images(1,false);
			result.put("question", "Total number of " + result.get("object_name").toString() + " = " + result.get("number1").toString() + ". Number of lots = " + result.get("number2").toString() + ". " + result.get("object_name").toString() + " in each lot?\n\n::blank::");
		} else if(type == 5) {
			result = mg_get_division_of_two_numbers_with_images(2,false);
			result.put("question", "There are " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". There are " + result.get("number2").toString() + " " + result.get("group_name").toString() + ". How many does each " + result.get("group_name").toString() + " get?\n\n::blank::");
			result.put("divide", 1);
		} else if(type == 6) {
			result = mg_get_division_of_two_numbers_without_images(2,false);
			result.put("question", "Total number of " + result.get("object_name").toString() + " = " + result.get("number1").toString() + ". " + result.get("object_name").toString() + " in each lot = " + result.get("number2").toString() + ". Number of lots?\n\n::blank::");
		} else if(type == 7) {
			result = mg_get_division_of_two_numbers_with_images(2,false);
			result.put("question", "There are " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". Each " + result.get("group_name").toString() + " gets " + result.get("number2").toString() + " " + result.get("object_name").toString() + ". How many " + result.get("group_name").toString() + " are there?\n\n::blank::");
			result.put("divide", 1);
		} else if(type == 8) {
			result = mg_get_division_of_two_numbers_without_images(2,false);
			result.put("question", "Total number of " + result.get("object_name").toString() + " = " + result.get("number1").toString() + ". Number of lots = " + result.get("number2").toString() + ". " + result.get("object_name").toString() + " in each lot?\n\n::blank::");
			result.put("divide", 1);
		} else{
			result = mg_get_division_of_two_numbers_with_images(1,false);
			result.put("question", "There are " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". There are " + result.get("number2").toString() + " " + result.get("group_name").toString() + ". How many does each " + result.get("group_name").toString() + " get? " + result.get("group_name").toString() + ".\n\n::blank::");
			result.put("divide", 1);
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_division_related_division_facts
	@description Define the problem set for related division facts
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_division_related_division_facts(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_division_of_two_numbers_with_rhs_blank(2);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ::blank:: \n\n " + result.get("number1").toString() + " / " + result.get("number3").toString() + " = ::blank:: ");
		} else if(type == 3) {
			result = mg_get_division_of_two_numbers_with_rhs_blank(1);
			result.put("question", result.get("number1").toString() + "  / ::blank:: = " + result.get("number2").toString() + " \n\n " + result.get("number1").toString() + " / ::blank:: = " + result.get("number3").toString());
		} else if(type == 4) {
			result = mg_get_division_of_two_numbers_with_rhs_blank(2);
			result.put("question", result.get("number1").toString() + " / ::blank:: = " + result.get("number2").toString() + " \n\n " + result.get("number1").toString() + " / ::blank:: = " + result.get("number3").toString());
		} else{
			result = mg_get_division_of_two_numbers_with_rhs_blank(1);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ::blank:: \n\n " + result.get("number1").toString() + " / " + result.get("number3").toString() + " = ::blank:: ");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_division_relate_division_and_multiplication
	@description Define the problem set for Relate division and multiplication
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_division_relate_division_and_multiplication(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_division_relating_division_and_multiplication_without_images(1,false);
			result.put("question", result.get("number2").toString() + " x " + result.get("number3").toString() + " = " + result.get("number1").toString() + "\n\n" + result.get("number1").toString() + " / " + result.get("number3").toString() + " = ::blank::");
		} else if(type == 3) {
			result = mg_get_division_relating_division_and_multiplication_without_images(2,false);
			result.put("question", result.get("number2").toString() + " x " + result.get("number3").toString() + " = " + result.get("number1").toString() + "\n\n" + result.get("number1").toString() + " / " + result.get("number3").toString() + " = ::blank::");
		} else{
			result = mg_get_division_relating_division_and_multiplication_with_images(false);
			result.put("question", result.get("number1").toString() + "  x  " + result.get("number2").toString() + " = " + result.get("number3").toString() + "\n\n" + result.get("number3").toString() + " / " + result.get("number1").toString() + " = ::blank::");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_division_division_practice
	@description Define the problem set for division practice
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_division_division_practice(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_division_of_two_numbers_with_no_remainder(2,false);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ::blank::");
		} else if(type == 3) {
			result = mg_get_division_of_two_numbers_with_no_remainder(3,false);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ::blank::");
		} else if(type == 4) {
			result = mg_get_division_of_two_numbers_with_no_remainder(4,false);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ::blank::");
		} else if(type == 5) {
			result = mg_get_division_of_two_numbers_with_no_remainder(5,false);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ::blank::");
		} else if(type == 6) {
			result = mg_get_division_of_two_numbers_with_remainder(1);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ? \n\nQuotient = ::blank::\n\nRemainder = ::blank::");
		} else if(type == 7) {
			result = mg_get_division_of_two_numbers_with_remainder(2);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ? \n\nQuotient = ::blank::\n\nRemainder = ::blank::");
		} else if(type == 8) {
			result = mg_get_division_of_two_numbers_with_remainder(3);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ? \n\nQuotient = ::blank::\n\nRemainder = ::blank::");
		} else if(type == 9) {
			result = mg_get_division_of_two_numbers_with_remainder(4);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ? \n\nQuotient = ::blank::\n\nRemainder = ::blank::");
		} else if(type == 10) {
			result = mg_get_division_of_two_numbers_with_remainder(5);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ? \n\nQuotient = ::blank::\n\nRemainder = ::blank::");
		} else {
			result = mg_get_division_of_two_numbers_with_no_remainder(1,false);
			result.put("question", result.get("number1").toString() + " / " + result.get("number2").toString() + " = ::blank::");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_division_missing_number
	@description Define the problem set for Missing number
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_division_missing_number(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_division_of_two_numbers_with_no_remainder(2,false);
			result.put("question", result.get("number1").toString() + " / ::blank:: = " + result.get("number2").toString());
		} else if(type == 3) {
			result = mg_get_division_of_two_numbers_with_no_remainder(3,false);
			result.put("question", result.get("number1").toString() + " / ::blank:: = " + result.get("number2").toString());
		} else if(type == 4) {
			result = mg_get_division_of_two_numbers_with_no_remainder(4,false);
			result.put("question", result.get("number1").toString() + " / ::blank:: = " + result.get("number2").toString());
		} else if(type == 5) {
			result = mg_get_division_of_two_numbers_with_no_remainder(5,false);
			result.put("question", result.get("number1").toString() + " / ::blank:: = " + result.get("number2").toString());
		} else {
			result = mg_get_division_of_two_numbers_with_no_remainder(1,false);
			result.put("question", result.get("number1").toString() + " / ::blank:: = " + result.get("number2").toString());
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/*/**
	@name mg_bll_division_division_word_problems
	@description Define the problem set for division word problems
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 * /                  
	public static Map<String, Object> mg_bll_division_division_word_problems(int type) {

		/**
	 * Creating the HashMap
	 */
	/*
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_division_of_two_numbers_word_problems(2,true);
			result.put("question", result.get("name").toString() + " has " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". How many children will get the " + result.get("object_name").toString() + " if each child is given " + result.get("number2").toString() + " " + result.get("object_name").toString() + "?");
		} else if(type == 3) {
			result = mg_get_division_of_two_numbers_word_problems(1,true);
			result.put("question", result.get("name").toString() + " has " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". If each child is to get " + result.get("number2").toString() + " " + result.get("object_name").toString() + ", how many children will get the " + result.get("object_name").toString() + "?");
		} else if(type == 4) {
			result = mg_get_division_of_two_numbers_word_problems(2,true);
			result.put("question", result.get("name").toString() + " has " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". If each child is to get " + result.get("number2").toString() + " " + result.get("object_name").toString() + ", how many children will get the " + result.get("object_name").toString() + "?");
		} else if(type == 5) {
			result = mg_get_division_of_two_numbers_word_problems(1,true);
			result.put("question", "The teacher divided " + result.get("number1").toString() + " " + result.get("object_name").toString() + " among " + result.get("number2").toString() + " students. How many " + result.get("object_name").toString() + " does each student get?");
		} else if(type == 6) {
			result = mg_get_division_of_two_numbers_word_problems(2,true);
			result.put("question", "The teacher divided " + result.get("number1").toString() + " " + result.get("object_name").toString() + " among " + result.get("number2").toString() + " students. How many " + result.get("object_name").toString() + " does each student get?");
		} else if(type == 7) {
			result = mg_get_division_of_two_numbers_word_problems(1,true);
			result.put("question", "The teacher had " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". She gave " + result.get("number2").toString() + " " + result.get("number2").toString() + " to each student. How many students got the " + result.get("object_name").toString() + "?");
		} else if(type == 8) {
			result = mg_get_division_of_two_numbers_word_problems(2,true);
			result.put("question", "The teacher had " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". She gave " + result.get("number2").toString() + " " + result.get("number2").toString() + " to each student. How many students got the " + result.get("object_name").toString() + "?");
		} else {
			result = mg_get_division_of_two_numbers_word_problems(1,true);
			result.put("question", result.get("name").toString() + " has " + result.get("number1").toString() + " " + result.get("object_name").toString() + ". How many children will get the " + result.get("object_name").toString() + " if each child is given " + result.get("number2").toString() + " " + result.get("object_name").toString() + "?");
		}

		/**
	 * Return the HashMap
	 * /  
		return result;
	} */

	/**
	@name mg_bll_division_division_vocabulary
	@description Define the problem set for division vocabulary
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_division_division_vocabulary(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_division_of_two_numbers_division_vocabulary(true);
		result.put("question", "In the model, what is the " + result.get("object_name").toString() + "?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_division_dividing_zero_and_by_zero
	@description Define the problem set for dividing zero and by zero
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_division_dividing_zero_and_by_zero(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_division_of_two_numbers_with_dividend_zero(false);
		result.put("question", "Solve:\n\n" + result.get("number2").toString() + " / " + result.get("number1").toString() + " = ::blank::");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	 @name mg_bll_division_for_division_word_problems()
	 @description Define the problem set containing division of two numbers.
	 @param type - int - Chooses a type. Values are 1 to 16.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_division_for_division_word_problems(int type) {
	
		Map<String, Object> result = new HashMap<>();
	
		if(type == 2 || type == 4 || type == 6 || type == 8 || type == 10 || type == 12) {
			result = mg_get_division_for_basic_word_problems(2, false);
		} else if(type == 13) {
			result = mg_get_division_for_daily_life_examples(1, false);
		} else if(type == 14) {
			result = mg_get_division_for_daily_life_examples(2, false);
		} else if(type == 15) {
			result = mg_get_division_for_number_of_hours_to_travel_a_destination(false);
		} else if(type == 16) {
			result = mg_get_division_for_obtaining_quotient_by_dividing_two_smallest_random_digit_numbers(false);
		} else if(type == 17) {
			result = mg_get_division_for_obtaining_quotient_by_dividing_two_largest_random_digit_numbers(false);
		} else {
			result = mg_get_division_for_basic_word_problems(1, false);
		}
	
		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_identify_whole_halves_quarters_and_equal_parts
	@description Define the problem set to identify whole, halves, quarters and equal parts
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_identify_whole_halves_quarters_and_equal_parts (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_fraction_identify_fraction(2, false, "equals");
			result.put("question", "Select the figure(s) that show(s) equal parts.");
		} else if(type == 3) {
			result = mg_get_fraction_identify_fraction(1, false, "random");
			result.put("question", "Select the figure(s) that show(s) " + result.get("type").toString() + ".");
		} else if(type == 4) {
			result = mg_get_fraction_identify_fraction_shaded_portion();
			result.put("question", "What portion is "+result.get("object_name") + "?");
		} else{
			result = mg_get_fraction_identify_fraction(1, false, "equals");
			result.put("question", "Select the figure(s) that show(s) equal parts.");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_solve_fractions_word_problems
	@description Define the problem set to solve fractions word problems
	@param level - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_solve_fractions_word_problems (int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_fraction_solve_fractions_word_problems_basic(level);
		result.put("question", "How much is " + result.get("portion").toString() + " of " + result.get("quantity").toString() + " " + result.get("units").toString() + "?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_convert_words_and_shaded_portions_to_fractions
	@description Define the problem set to convert words and shaded portions to fractions
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_convert_words_and_shaded_portions_to_fractions (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_fraction_convert_words_to_fractions(2);
			result.put("question", "Write " + result.get("fraction").toString() + " as a fraction?");
		} else if(type == 3) {
			result = mg_get_fraction_convert_words_to_fractions(3);
			result.put("question", "Write " + result.get("fraction").toString() + " as a fraction?");
		} else if(type == 4) {
			result = mg_get_fraction_convert_shaded_image_to_fractions();
			result.put("question", "What portion is shaded below");
		} else if(type == 4) {
			result = mg_get_fraction_from_a_mixed_group();
			result.put("question", "What fraction of the " + result.get("variable1").toString() + " are " + result.get("variable2").toString() + "?");
		} else{
			result = mg_get_fraction_convert_words_to_fractions(1);
			result.put("question", "Write " + result.get("fraction").toString() + " as a fraction?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_relating_fractions_to_their_additive_multiplicative_components
	@description Define the problem set to fractions relating fractions to their additive multiplicative components
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_relating_fractions_to_their_additive_multiplicative_components (int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_fraction_relating_fractions_to_their_additive_multiplicative_components();
		result.put("question", result.get("fraction").toString() + " is equal to:");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_identify_numerator_and_denominator
	@description Define the problem set to identify numerator and denominator
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_identify_numerator_and_denominator(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_fraction_identify_numerator_and_denominator();
		result.put("question", "What is the " + result.get("variable_object").toString() + " of "+result.get("fraction")+"?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_mixed_fractions
	@description Define the problem set to mixed fractions
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_mixed_fractions(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_fraction_text_to_mixed_fraction(2);
			result.put("question", "Write " + result.get("fraction").toString() + " as a fraction?");
		} else if(type == 3) {
			result = mg_get_fraction_improper_fraction_to_mixed_fraction();
			result.put("question", "Convert " + result.get("fraction").toString() + " into mixed form?");
		} else if(type == 4) {
			result = mg_get_fraction_mixed_fraction_to_improper_fraction();
			result.put("question", "Convert " + result.get("fraction").toString() + " into improper form?");
		} else {
			result = mg_get_fraction_text_to_mixed_fraction(1);
			result.put("question", "Write " + result.get("fraction").toString() + " as a fraction?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_compare_fractions
	@description Define the problem set to Compare fractions
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_compare_fractions(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_fraction_compare_fractions_with_same_denominator(1);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		} else if(type == 6) {
			result = mg_get_fraction_compare_fractions_with_1_as_numerator(2);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		} else if(type == 3) {
			result = mg_get_fraction_compare_fractions_with_same_numerator(1);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		} else if(type == 4) {
			result = mg_get_fraction_compare_unlike_fractions(1);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		} else if(type == 5) {
			result = mg_get_fraction_compare_unlike_fractions(2);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		} else if(type == 7) {
			result = mg_get_fraction_compare_fractions_with_same_denominator(2);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		} else if(type == 8) {
			result = mg_get_fraction_compare_fractions_with_same_numerator(2);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		} else if(type == 9) {
			result = mg_get_fraction_convert_unlike_fractions_into_like_fractions(1);
			result.put("question", "Convert " + result.get("fraction1").toString() + " and " + result.get("fraction2").toString() + " into like fractions\n\n::blank::");
		} else if(type == 10) {
			result = mg_get_fraction_convert_unlike_fractions_into_like_fractions(2);
			result.put("question", "Convert " + result.get("fraction1").toString() + " and " + result.get("fraction2").toString() + " into like fractions\n\n::blank::");
		} else{
			result = mg_get_fraction_compare_fractions_with_1_as_numerator(1);
			result.put("question", "Which fraction is " + result.get("variable").toString() + "?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_reduce_fractions_to_simplest_form
	@description Define the problem set to reduce fractions to simplest form
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_reduce_fractions_to_simplest_form(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_fraction_reduce_fractions_to_simplest_form();
		result.put("question", "Reducing "+result.get("fraction")+" to its simplest form gives:");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_equivalent_fractions
	@description Define the problem set to Compare fractions
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_equivalent_fractions(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_fraction_fill_in_the_missing_number(false);
			result.put("question", "Fill in the missing number:");
		} else{
			result = mg_get_fraction_equivalent_fractions(false);
			result.put("question", "Which fraction is equivalent to "+result.get("fraction")+"?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_like_and_unlike_fractions
	@description Define the problem set to like and unlike fractions
	@param level - int - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_like_and_unlike_fractions(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_fraction_convert_unlike_fractions_into_like_fractions(level);
		result.put("question", "Convert "+result.get("fraction1")+" and "+result.get("fraction2")+" into like fractions:");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_addition_and_subtraction_of_fractions
	@description Define the problem set to Addition and Subtraction of fractions
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_addition_and_subtraction_of_fractions(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_fraction_subtraction_of_like_fraction();
			result.put("question", "Subtract");
		} else if(type == 3) {
			result = mg_get_fraction_addition_of_unlike_fraction();
			result.put("question", "Add");
		} else if(type == 4) {
			result = mg_get_fraction_subtraction_of_unlike_fraction();
			result.put("question", "Subtract");
		} else{
			result = mg_get_fraction_addition_of_like_fraction();
			result.put("question", "Add");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_fractions_of_a_collection_or_multiple_of_a_fraction
	@description Define the problem set the fractions of a collection or multiple of a fraction
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_fractions_of_a_collection_or_multiple_of_a_fraction(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_fraction_multiple_of_a_fraction();
		result.put("question", "Solve:");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	 @name mg_bll_fraction_for_word_problem()
	 @description Define the problem set for fraction word problems.
	 @param type - int - Chooses a type. Values are 1 to 9.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_fraction_for_word_problem(int type) {
	
		Map<String, Object> result = new HashMap<>();
	
		if(type == 2) {
			result = mg_get_fraction_for_meaning_of_part_or_share(false);
		} else if(type == 3) {
			result = mg_get_fraction_for_whole_and_fraction_word(1, false);
		} else if(type == 4) {
			result = mg_get_fraction_for_whole_and_fraction_word(2, false);
		} else if(type == 5) {
			result = mg_get_fraction_in_word_and_whole_number(false);
		} else if(type == 6) {
			result = mg_get_fraction_for_addition_of_two_fractions(1, false);
		} else if(type == 7) {
			result = mg_get_fraction_for_addition_of_two_fractions(2, false);
		} else if(type == 8) {
			result = mg_get_fraction_for_subtraction_of_two_fractions(1, false);
		} else if(type == 9) {
			result = mg_get_fraction_for_subtraction_of_two_fractions(2, false);
		} else {
			result = mg_get_fraction_for_understanding_the_fraction(false);
		}
	
		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_geometry_similar_shapes()
	 @description Gets the problem set data for similar shape.
	 @return HashMap(String question, String shape, String image, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_geometry_similar_shapes(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_geometry_choose_similar_shape();

		result.put("question", "Select the object with similar shape as the object.");

		/**
		 * Return the HashMap with String question, String shape, String image, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_geometry_geometrical_shapes()
	 @description Gets the problem set data for identifying the shown geometrical shape.
	 @return HashMap(String question, String image, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_geometry_geometrical_shapes(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_geometry_for_identifying_geometrical_shapes(true);

		result.put("question", "What is the shape of this object?");

		/**
		 * Return the HashMap with String question, String image, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_geometry_edges_corners_faces()
	 @description Gets the problem set data containing the number of edges or corners or faces.
	 @param type - int - Chooses a type. Values are 1, 2 or 3.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_geometry_edges_corners_faces(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_geometry_for_edges_or_corners_or_faces_of_objects_without_image(false);
			result.put("question", "How many " + result.get("parameter_value") + " does a " + result.get("object") + " have?");
		} else if(type == 3) {
			result = mg_get_geometry_for_vertices_or_sides_of_objects(false);
			result.put("question", "How many " + result.get("parameter_value") + " does a " + result.get("object") + " have?");
		}	else {
			result = mg_get_geometry_for_edges_or_corners_or_faces_of_objects_with_image(false);
			result.put("question", "How many " + result.get("parameter_value") + " does the " + result.get("object") + " have?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	 @name mg_bll_geometry_sliding_or_rolling()
	 @description Gets the problem set data identifying whether the given object slides or rolls.
	 @return HashMap(String question, String image of object, String object name, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_geometry_sliding_or_rolling(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_geometry_for_identifying_whether_the_object_slides_or_rolls(true);

		result.put("question", "Does a " + result.get("object") + " slide or roll?");

		/**
		 * Return the HashMap String question, String image of object, String object name, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_geometry_type_of_line()
	 @description Gets the problem set data for type of line.
	 @param type - int - Chooses a type. Values are 1, 2 or 3.
	 @return HashMap(String question, String image, (String or int) answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_geometry_type_of_line(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_geometry_for_identifying_length_of_line(1, false);
			result.put("question", "What is the length of the line below?");
		} else if(type == 3) {
			result = mg_get_geometry_for_identifying_length_of_line(2, false);
			result.put("question", "What is the length of the line below?");
		}	else {
			result = mg_get_geometry_for_identifying_the_type_of_line(true);
			result.put("question", "The image below shows ::blank::");
		}

		/**
		 * Return the HashMap String question, String image, (String or int) answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_geometry_symmetry()
	 @description Gets the problem set data regarding symmetry of object.
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap(String question, String image, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_geometry_symmetry(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_geometry_for_identifying_symmetry_about_any_line(true);
			result.put("question", "Is the figure above symmetrical about any line?");
		} else {
			result = mg_get_geometry_for_identifying_symmetry_about_dotted_line(true);
			result.put("question", "Is the figure above symmetrical about the dotted line?");
		}

		/**
		 * Return the HashMap String question, String image, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_image_comparison()
	 @description Define the problem set for comparing 2 objects on various parameters.
	 @param type - int - Chooses a type. Values are 1 to 5.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_measurement_image_comparison(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_measurement_comparison_among_3_objects(true);
			result.put("question", "Which " + result.get("object") + " is " + result.get("comparison_value") + "?");
		} else if(type == 3) {
			result = mg_get_measurement_comparison_among_2_objects_based_on_size(true);
			result.put("question", "Which " + result.get("object") + " is " + result.get("comparison_value") + " in size?");
		} else if(type == 4) {
			result = mg_get_measurement_comparison_among_2_objects_based_on_capacity(true);
			result.put("question", "Which " + result.get("object") + " holds " + result.get("comparison_value") + "?");
		} else if(type == 5) {
			result = mg_get_measurement_comparison_among_4_objects_based_on_mass(true);
			result.put("question", "Which weighing stone has the most mass?");
		} else {
			result = mg_get_measurement_comparison_among_2_objects(true);
			result.put("question", "Which " + result.get("object") + " is " + result.get("comparison_value") + "?");
		}

		/**
		 * Return the HashMaps
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_measuring_tools()
	 @description Define the problem set for measuring objects.
	 @param type - int - Chooses a type. Values are 1, 2 or 3.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_measurement_measuring_tools(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_measurement_measuring_length_using_a_centimeter_ruler(1, false);
			result.put("question", "Find the length of the given " + result.get("object"));
		} else if(type == 3) {
			result = mg_get_measurement_measuring_length_using_a_centimeter_ruler(2, false);
			result.put("question", "Find the length of the given " + result.get("object"));
		} else {
			result = mg_get_measurement_measuring_objects_using_measuring_tools(true);
			result.put("question", "How would you measure " + result.get("unit_of_measure") + " of " + result.get("object") + "?");
		}

		/**
		 * Return the HashMaps
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_appropriate_measuring_units()
	 @description Define the problem set for appropriate measuring unit for a given object.
	 @return HashMap(String question, String type of measurement, String name of the object, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_appropriate_measuring_units(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_measurement_using_appropriate_measuring_units(true);

		result.put("question", "Which is a better estimate for the " + result.get("type_of_measurement") + " of a " + result.get("object") + "?");

		/**
		 * Return the HashMaps
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_comparing_lengths()
	 @description Define the problem set for comparing lengths.
	 @param type - int - Chooses a type. Values are 1 to 8.
	 @return HashMap(String question, String number1, String number2, String comparison value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_comparing_lengths(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_measurement_comparing_metric_units_of_length_mm_and_cm(2, true);
			result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");
		} else if(type == 3) {
			result = mg_get_measurement_comparing_metric_units_of_length_cm_and_m(1, true);
			result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");
		} else if(type == 4) {
			result = mg_get_measurement_comparing_metric_units_of_length_cm_and_m(2, true);
			result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");
		} else if(type == 5) {
			result = mg_get_measurement_comparing_metric_units_of_length_m_and_km(true);
			result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");
		} else if(type == 6) {
			result = mg_get_measurement_comparing_metric_units_of_length_cm_and_km(true);
			result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");
		} else {
			result = mg_get_measurement_comparing_metric_units_of_length_mm_and_cm(1, true);
			result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");
		}

		/**
		 * Return the HashMap with String question, String number1, String number2, String comparison value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_comparing_weights()
	 @description Define the problem set for comparing weights.
	 @return HashMap(String question, String number1, String number2, String comparison value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_comparing_weights(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_measurement_comparing_metric_units_of_mass_gm_and_kg(true);

		result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");

		/**
		 * Return the HashMap with String question, String number1, String number2, String comparison value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_comparing_volumes()
	 @description Define the problem set for comparing volumes.
	 @return HashMap(String question, String number1, String number2, String comparison value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_comparing_volumes(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_measurement_comparing_metric_units_of_volume_ml_and_l(true);

		result.put("question", "Which is " + result.get("comparison_value") + ", " + result.get("n1_unit1") + " or " + result.get("n2_unit2") + "?");

		/**
		 * Return the HashMap with String question, String number1, String number2, String comparison value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_converting_between_units()
	 @description Define the problem set for converting between units.
	 @param type - int - Chooses a value. Values are 1 to 19.
	 @return HashMap(String question, int random number, String first unit, int answer, String second unit, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_converting_between_units(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(10, 2, "cm", "mm", false, false);
		} else if(type == 3) {
			result = mg_get_measurement_converting_between_units_cm_and_m_without_decimal(1, false);
		} else if(type == 4) {
			result = mg_get_measurement_converting_between_units_cm_and_m_without_decimal(2, false);
		} else if(type == 5) {
			result = mg_get_measurement_converting_between_units_m_and_km_without_decimal(1, false);
		} else if(type == 6) {
			result = mg_get_measurement_converting_between_units_m_and_km_without_decimal(2, false);
		} else if(type == 7) {
			result = mg_get_measurement_converting_between_units_cm_and_km_without_decimal(false);
		} else if(type == 8) {
			result = mg_get_measurement_converting_between_units_g_and_kg_without_decimal(1, false);
		} else if(type == 9) {
			result = mg_get_measurement_converting_between_units_g_and_kg_without_decimal(2, false);
		} else if(type == 10) {
			result = mg_get_measurement_converting_between_units_ml_and_l_without_decimal(1, false);
		} else if(type == 11) {
			result = mg_get_measurement_converting_between_units_ml_and_l_without_decimal(2, false);
		} else if(type == 12) {
			result = mg_get_measurement_converting_between_units_mm_and_cm_with_decimal(1, false);
		} else if(type == 13) {
			result = mg_get_measurement_converting_between_units_mm_and_cm_with_decimal(2, false);
		} else if(type == 14) {
			result = mg_get_measurement_converting_between_units_cm_and_m_with_decimal(1, false);
		} else if(type == 15) {
			result = mg_get_measurement_converting_between_units_cm_and_m_with_decimal(2, false);
		} else if(type == 16) {
			result = mg_get_measurement_converting_between_units_m_and_km_with_decimal(false);
		} else if(type == 17) {
			result = mg_get_measurement_converting_between_units_cm_and_km_with_decimal(false);
		} else if(type == 18) {
			result = mg_get_measurement_converting_between_units_g_and_kg_with_decimal("g", "kg", false);
		} else if(type == 19) {
			result = mg_get_measurement_converting_between_units_ml_and_l_with_decimal(false);
		} else {
			result = mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(10, 1, "cm", "mm", false, false);
		}

		result.put("question", "Solve:\n\n" + result.get("number1").toString() + " " + result.get("unit1").toString() + "     =     "  + result.get("number2").toString() + " "  + result.get("unit2").toString());

		/**
		 * Return the HashMap with String question, String number1, String number2, String comparison value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_conversion_tables()
	 @description Define the problem set for conversion tables.
	 @return HashMap(String question, ArrayList of unit of measure, String first unit, ArrayList of second unit measure, String second unit, ArrayList of answers)
	 */                  
	public static Map<String, Object> mg_bll_measurement_conversion_tables(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_measurement_complete_the_conversion_table_for_converting_between_units();

		result.put("question", "Complete the table:");

		/**
		 * Return the HashMap with String question, ArrayList of unit of measure, String first unit, ArrayList of second unit measure, String second unit, ArrayList of answers
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_converting_between_mixed_units()
	 @description Define the problem set for converting between mixed units.
	 @param type - int - Chooses a value. Values are 1 to 12.
	 @return HashMap(String question, int first random number, String first unit, int second random number, String second unit, int answer, String unit of the answer, ArrayList of remaining mcq options)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_converting_between_mixed_units(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_measurement_converting_between_mixed_units_mm_and_cm(2, false);
		} else if(type == 3) {
			result = mg_get_measurement_converting_between_mixed_units_mm_and_cm(3, false);
		} else if(type == 4) {
			result = mg_get_measurement_converting_between_mixed_units_cm_and_m(1, false);
		} else if(type == 5) {
			result = mg_get_measurement_converting_between_mixed_units_cm_and_m(2, false);
		} else if(type == 6) {
			result = mg_get_measurement_converting_between_mixed_units_cm_and_m(3, false);
		} else if(type == 7) {
			result = mg_get_measurement_converting_between_mixed_units_m_and_km("km", "m", 1, false);
		} else if(type == 8) {
			result = mg_get_measurement_converting_between_mixed_units_m_and_km("km", "m", 2, false);
		} else if(type == 9) {
			result = mg_get_measurement_converting_between_mixed_units_g_and_kg(1, false);
		} else if(type == 10) {
			result = mg_get_measurement_converting_between_mixed_units_g_and_kg(2, false);
		} else if(type == 11) {
			result = mg_get_measurement_converting_between_mixed_units_ml_and_l(1, false);
		} else if(type == 12) {
			result = mg_get_measurement_converting_between_mixed_units_ml_and_l(2, false);
		} else {
			result = mg_get_measurement_converting_between_mixed_units_mm_and_cm(1, false);
		}

		result.put("question", "Solve:" + "\n" + result.get("number1") + " " + result.get("unit1") + " " + result.get("number2") + " " + result.get("unit2") + " = ::blank:: " + result.get("unit3"));

		/**
		 * Return the HashMap with String question, int first random number, String first unit, int second random number, String second unit, int answer, String unit of the answer, ArrayList of remaining mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_addition_between_mixed_units()
	 @description Define the problem set for addition of two numbers with mixed units.
	 @param type - int - Chooses a value. Values are 1 to 10.
	 @return HashMap(String question, int first random number, String first unit, int second random number, String second unit, int third random number, int fourth random number, int answer1, int answer2, int answer3)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_addition_between_mixed_units(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_measurement_addition_of_mixed_units_cm_and_mm(2);
		} else if(type == 3) {
			result = mg_get_measurement_addition_of_mixed_units_cm_and_m(1);
		} else if(type == 4) {
			result = mg_get_measurement_addition_of_mixed_units_cm_and_m(2);
		} else if(type == 5) {
			result = mg_get_measurement_addition_of_mixed_units_m_and_km("km", "m", 1);
		} else if(type == 6) {
			result = mg_get_measurement_addition_of_mixed_units_m_and_km("km", "m", 2);
		} else if(type == 7) {
			result = mg_get_measurement_addition_of_mixed_units_g_and_kg(1);
		} else if(type == 8) {
			result = mg_get_measurement_addition_of_mixed_units_g_and_kg(2);
		} else if(type == 9) {
			result = mg_get_measurement_addition_of_mixed_units_ml_and_l(1);
		} else if(type == 10) {
			result = mg_get_measurement_addition_of_mixed_units_ml_and_l(2);
		} else {
			result = mg_get_measurement_addition_of_mixed_units_cm_and_mm(1);
		}

		result.put("question", "Solve:" + "\n" + result.get("number1") + " " + result.get("unit1") + " " + result.get("number2") + " " + result.get("unit2") + " + " + result.get("number3") + " " + result.get("unit1") + " " + result.get("number4") + " " + result.get("unit2") + " = ::blank:: " + result.get("unit1") + " ::blank:: " + result.get("unit2") + " = ::blank:: " + result.get("unit2"));

		/**
		 * Return the HashMap with String question, int first random number, String first unit, int second random number, String second unit, int third random number, int fourth random number, int answer1, int answer2, int answer3
		 */  
		return result;
	}

	/**
	 @name mg_bll_measurement_for_subtraction_of_mixed_units()
	 @description Define the problem set containing the answer, received on subtraction of two numbers with mixed units.
	 @param type - int - Chooses a value. Values are 1 to 10.
	 @return HashMap(String question, int first random number, String first unit, int second random number, String second unit, int third random number, int fourth random number, int answer1, int answer2, int answer3)
	 */                  
	public static Map<String, Object> mg_bll_measurement_for_subtraction_of_mixed_units(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_measurement_subtraction_of_mixed_units_cm_and_mm(2);
		} else if(type == 3) {
			result = mg_get_measurement_subtraction_of_mixed_units_cm_and_m(1);
		} else if(type == 4) {
			result = mg_get_measurement_subtraction_of_mixed_units_cm_and_m(2);
		} else if(type == 5) {
			result = mg_get_measurement_subtraction_of_mixed_units_m_and_km("km", "m", 1);
		} else if(type == 6) {
			result = mg_get_measurement_subtraction_of_mixed_units_m_and_km("km", "m", 2);
		} else if(type == 7) {
			result = mg_get_measurement_subtraction_of_mixed_units_g_and_kg(1);
		} else if(type == 8) {
			result = mg_get_measurement_subtraction_of_mixed_units_g_and_kg(2);
		} else if(type == 9) {
			result = mg_get_measurement_subtraction_of_mixed_units_ml_and_l(1);
		} else if(type == 10) {
			result = mg_get_measurement_subtraction_of_mixed_units_ml_and_l(2);
		} else {
			result = mg_get_measurement_subtraction_of_mixed_units_cm_and_mm(1);
		}

		result.put("question", "Solve:" + "\n" + result.get("number1") + " " + result.get("unit1") + " " + result.get("number2") + " " + result.get("unit2") + " - " + result.get("number3") + " " + result.get("unit1") + " " + result.get("number4") + " " + result.get("unit2") + " = ::blank:: " + result.get("unit1") + " ::blank:: " + result.get("unit2") + " = ::blank:: " + result.get("unit2"));

		/**
		 * Return the HashMap with String question, int first random number, String first unit, int second random number, String second unit, int third random number, int fourth random number, int answer1, int answer2, int answer3
		 */  
		return result;
	}

	/**
	 @name mg_bll_money_coins_and_notes()
	 @description Define the problem set different denominations of coins and notes.
	 @param type - int - Chooses a level. Values are 1 to 8.
	 @return HashMap (String question, String image, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_money_coins_and_notes(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_money_values_of_coins_and_notes(2, false);
			result.put("question", "How much is this " + result.get("parameter_value") + " worth?");
		} else if(type == 3) {
			result = mg_get_money_sum_of_coins_and_notes(1, false);
			result.put("question", "How much money is shown?");
		} else if(type == 4) {
			result = mg_get_money_sum_of_coins_and_notes(2, false);
			result.put("question", "How much money is shown?");
		} else if(type == 5) {
			result = mg_get_money_sum_of_coins_and_notes(3, false);
			result.put("question", "How much money is shown?");
		} else if(type == 6) {
			result = mg_get_money_sum_of_coins_and_notes(4, false);
			result.put("question", "How much money is shown?");
		} else if(type == 7) {
			result = mg_get_money_sum_of_random_number_of_coins_and_notes(1, false);
			result.put("question", "Solve:");
		} else if(type == 8) {
			result = mg_get_money_sum_of_random_number_of_coins_and_notes(2, false);
			result.put("question", "Solve:");
		} else {
			result = mg_get_money_values_of_coins_and_notes(1, false);
			result.put("question", "How much is this " + result.get("parameter_value") + " worth?");
		}

		/**
		 * Return the HashMap with String question, String image, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_money_consumer_math_word_problems()
	 @description Define the problem set for different consumer math word problems.
	 @param type - int - Chooses a level. Values are 1 to 14.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_money_consumer_math_word_problems(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_money_cost_of_multiple_objects_of_same_kind(2, false);
			result.put("question", "One " + result.get("object1") + " costs Rs. " + result.get("cost1") + "? How much do " + result.get("number1") + " " + result.get("object2") + " cost?");
		} else if(type == 3) {
			result = mg_get_money_cost_of_multiple_objects_of_same_kind(3, false);
			result.put("question", "One " + result.get("object1") + " costs Rs. " + result.get("cost1") + "? How much do " + result.get("number1") + " " + result.get("object2") + " cost?");
		} else if(type == 4) {
			result = mg_get_money_cost_of_multiple_objects_of_different_kind(1, false);
			result.put("question", result.get("name") + " bought a " + result.get("object1") + " for Rs. " + result.get("cost1") + " and a " + result.get("object2") + " for Rs. " + result.get("cost2") + ". How much did "+result.get("name")+" pay altogether?");
		} else if(type == 5) {
			result = mg_get_money_cost_of_multiple_objects_of_different_kind(2, false);
			result.put("question", result.get("name") + " bought a " + result.get("object1") + " for Rs. " + result.get("cost1") + " and a " + result.get("object2") + " for Rs. " + result.get("cost2") + ". How much did "+result.get("name")+" pay altogether?");
		} else if(type == 6) {
			result = mg_get_money_cost_of_multiple_objects_of_different_kind(3, false);
			result.put("question", result.get("name") + " bought a " + result.get("object1") + " for Rs. " + result.get("cost1") + " and a " + result.get("object2") + " for Rs. " + result.get("cost2") + ". How much did "+result.get("name")+" pay altogether?");
		} else if(type == 7) {
			result = mg_get_money_identifying_type_of_notes(1, false);
			result.put("question", result.get("name") + " has " + result.get("number1") + " similar notes. They are worth " + result.get("total_value") + " altogether. Which kind of notes are these?");
		} else if(type == 8) {
			result = mg_get_money_identifying_type_of_notes(2, false);
			result.put("question", result.get("name") + " has " + result.get("number1") + " similar notes. They are worth " + result.get("total_value") + " altogether. Which kind of notes are these?");
		} else if(type == 9) {
			result = mg_get_money_identifying_type_of_notes(3, false);
			result.put("question", result.get("name") + " has " + result.get("number1") + " similar notes. They are worth " + result.get("total_value") + " altogether. Which kind of notes are these?");
		} else if(type == 10) {
			result = mg_get_money_making_money_amounts(1, false);
			result.put("question", result.get("name") + " needs Rs. " + result.get("total_value") + ". How many Rs. " + result.get("value1") + " notes should "+result.get("name")+"'s " + result.get("parent_relation") + " give " + result.get("name") + "?");
		} else if(type == 11) {
			result = mg_get_money_making_money_amounts(2, false);
			result.put("question", result.get("name") + " needs Rs. " + result.get("total_value") + ". How many Rs. " + result.get("value1") + " notes should "+result.get("name")+"'s " + result.get("parent_relation") + " give " + result.get("name") + "?");
		} else if(type == 12) {
			result = mg_get_money_making_money_amounts(3, false);
			result.put("question", result.get("name") + " needs Rs. " + result.get("total_value") + ". How many Rs. " + result.get("value1") + " notes should "+result.get("name")+"'s " + result.get("parent_relation") + " give " + result.get("name") + "?");
		} else if(type == 13) {
			result = mg_get_money_change_back(1, false);
			result.put("question", result.get("name") + " gave a Rs. " + result.get("value1") + " note for a " + result.get("object") + " worth Rs. " + result.get("cost1") + ". How much money will " + result.get("name") + " get back?");
		} else if(type == 14) {
			result = mg_get_money_change_back(2, false);
			result.put("question", result.get("name") + " gave a Rs. " + result.get("value1") + " note for a " + result.get("object") + " worth Rs. " + result.get("cost1") + ". How much money will " + result.get("name") + " get back?");
		} else {
			result = mg_get_money_cost_of_multiple_objects_of_same_kind(1, false);
			result.put("question", "One " + result.get("object1") + " costs Rs. " + result.get("cost1") + "? How much do " + result.get("number1") + " " + result.get("object2") + " cost?");
		}

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_money_converting_between_money_denominations()
	 @description Define the problem set for converting between money denominations.
	 @param type - int - Chooses a level. Values are 1 to 7.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_money_converting_between_money_denominations(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_money_converting_between_money_denominations_without_image();
			result.put("question", "How many " + result.get("RHS_value") + " will I get in exchange for one " + result.get("LHS_value") + "?");
		} else if(type == 3) {
			result = mg_get_money_for_number_of_one_rupee_coins(false);
			result.put("question", "How many one-rupee coins will I get in exchange for " + result.get("number1") + " " + result.get("coin_note_1") + " and " + result.get("number2") + " " + result.get("coin_note_2") + "?");
		} else if(type == 4) {
			result = mg_get_money_for_paying_for_object(1, true);
			result.put("question", "Fill in the missing number:");
		} else if(type == 5) {
			result = mg_get_money_for_paying_for_object(2, true);
			result.put("question", "Fill in the missing number:");
		} else if(type == 6) {
			result = mg_get_money_for_paying_for_object(3, true);
			result.put("question", "Fill in the missing number:");
		} else if(type == 7) {
			result = mg_get_money_change();
			result.put("question", result.get("name") + " went to the shop to get change for Rs. " + result.get("max_price1") + ". " + result.get("pronoun_in_sentence_case") + " got " + result.get("number") + " Rs. " + result.get("denomination1") + " notes and some Rs. " + result.get("denomination2") + " notes. How many Rs. " + result.get("denomination2") + " notes did " + result.get("pronoun") + " get?\n\n::blank::");
		} else {
			result = mg_get_money_converting_between_money_denominations_with_image();
			result.put("question", "Fill in the missing number:");
		}

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	@name mg_bll_multipleandfactors_multiple_divisible
	@description Define the problem set for multiple and factors multiple divisible
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multipleandfactors_multiple_divisible(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiples_and_factors_without_factor_multiplications(1);
			String quest = "Following are some of the divisors of " + result.get("number").toString() + ". Find the missing divisors.\n\n";
			
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			
			result.put("question", quest);
		} else if(type == 3) {
			result = mg_get_multiples_and_factors_without_factor_multiplications(2);
			String quest = "Following are some of the factors of " + result.get("number").toString() + ". Find the missing factors.\n\n";
			
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			
			result.put("question", quest);
		} else if(type == 4) {
			result = mg_get_multiples_and_factors_without_factor_multiplications(3);
			String quest = "Following are some of the factors of " + result.get("number").toString() + ". Find the missing factors.\n\n";
			
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			
			result.put("question", quest);
		} else if(type == 5) {
			result = mg_get_multiples_and_factors_divisible_by_2_5_10(1,true);
			result.put("question", "Is " + result.get("number").toString() + " " + result.get("parameter_value").toString() + " " + result.get("divisor").toString() + "?");
		} else if(type == 6) {
			result = mg_get_multiples_and_factors_divisible_by_2_5_10(2,true);
			result.put("question", "Is " + result.get("number").toString() + " " + result.get("parameter_value").toString() + " " + result.get("divisor").toString() + "?");
		} else if(type == 7) {
			result = mg_get_multiples_and_factors_divisible_by_2_5_10(3,true);
			result.put("question", "Is " + result.get("number").toString() + " " + result.get("parameter_value").toString() + " " + result.get("divisor").toString() + "?");
		} else if(type == 8) {
			result = mg_get_multiples_and_factors_divisible_by_any_other_number_upto_20(1,true);
			result.put("question", "Is " + result.get("number").toString() + " " + result.get("parameter_value").toString() + " " + result.get("divisor").toString() + "?");
		} else if(type == 9) {
			result = mg_get_multiples_and_factors_divisible_by_any_other_number_upto_20(2,true);
			result.put("question", "Is " + result.get("number").toString() + " " + result.get("parameter_value").toString() + " " + result.get("divisor").toString() + "?");
		} else if(type == 10) {
			result = mg_get_multiples_and_factors_divisible_by_any_other_number_upto_20(3,true);
			result.put("question", "Is " + result.get("number").toString() + " " + result.get("parameter_value").toString() + " " + result.get("divisor").toString() + "?");
		} else {
			result = mg_get_multiples_and_factors_with_factor_multiplications(1,true);
			String quest = "Below are factor multiplications for " + result.get("number").toString() + ":\n\n";
			
			ArrayList <String> question_arraylist1 = new ArrayList<>();
			question_arraylist1 = (ArrayList<String>)result.get("factor_multiplications");
			
			for(int ii = 0 ; ii < question_arraylist1.size() ; ii++) {
				quest += question_arraylist1.get(ii) + "\n";
			}
			
			quest += "\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			
			result.put("question", quest);
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multipleandfactors_prime_and_composite_numbers
	@description Define the problem set for prime and composite numbers
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multipleandfactors_prime_and_composite_numbers(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiples_and_factors_identifying_whether_the_random_number_is_prime_or_composite(level,true);
		result.put("question", "Is " + result.get("number").toString() + " a prime or composite number?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multipleandfactors_coprime_numbers
	@description Define the problem set for co prime numbers
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multipleandfactors_coprime_numbers(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiples_and_factors_identifying_co_prime_pairs(level,true);
		result.put("question", "Are " + result.get("number1").toString() + " and " + result.get("number2").toString() + " co-prime?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_count_groups_and_objects_per_group
	@description Define the problem set for multiplication count groups and objects per group
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_count_groups_and_objects_per_group(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiplication_counting_groups_and_objects_per_group(level);
		result.put("question", "Fill in the blanks:\n\nThere are ::blank:: groups of " + result.get("object_name").toString() + ".\n\nThere are ::blank:: " + result.get("object_name").toString() + " in each group.\n\nThe total number of " + result.get("object_name").toString() + " is ::blank::");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_relate_multiplication_to_addition
	@description Define the problem set for relate multiplication to addition
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_relate_multiplication_to_addition(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_of_two_numbers_with_relating_multiplication_to_addition_with_images(2,false);
			String str = "There are ::blank:: group of " + result.get("number2").toString() + " " + result.get("object_name").toString() + "\n\n";
			for(int ii = 0 ; ii < (int) result.get("number1") ; ii++ ) {
				str += result.get("number2").toString() + " ";

				if(ii < (int) result.get("number1") - 1 ) {
					str += "+ ";
				}
			}
			str += "= " + result.get("number3").toString() + "\n\n";
			if((int) result.get("number3") % 2 == 1) {
				str += "::blank:: x " + result.get("number2").toString() + " = " + result.get("number3").toString();
			} else {
				str += "::blank:: times " + result.get("number2").toString() + " = " + result.get("number3").toString();
			}
			result.put("question", str);
		} else if(type == 3) {
			result = mg_get_multiplication_of_two_numbers_with_relating_multiplication_to_addition_with_images(1,false);
			result.remove("image");
			result.remove("image_title");
			String str = "";
			for(int ii = 0 ; ii < (int) result.get("number1") ; ii++ ) {
				str += result.get("number2").toString() + " ";

				if(ii < (int) result.get("number1") - 1 ) {
					str += "+ ";
				}
			}
			str += "= " + result.get("number3").toString() + "\n\n";
			if((int) result.get("number3") % 2 == 1) {
				str += "::blank:: x " + result.get("number2").toString() + " = " + result.get("number3").toString();
			} else {
				str += "::blank:: times " + result.get("number2").toString() + " = " + result.get("number3").toString();
			}
			result.put("question", str);
		} else if(type == 4) {
			result = mg_get_multiplication_of_two_numbers_with_relating_multiplication_to_addition_with_images(2,false);
			result.remove("image");
			result.remove("image_title");
			String str = "";
			for(int ii = 0 ; ii < (int) result.get("number1") ; ii++ ) {
				str += result.get("number2").toString() + " ";

				if(ii < (int) result.get("number1") - 1 ) {
					str += "+ ";
				}
			}
			str += "= " + result.get("number3").toString() + "\n\n";
			if((int) result.get("number3") % 2 == 1) {
				str += "::blank:: x " + result.get("number2").toString() + " = " + result.get("number3").toString();
			} else {
				str += "::blank:: times " + result.get("number2").toString() + " = " + result.get("number3").toString();
			}
			result.put("question", str);
		} else {
			result = mg_get_multiplication_of_two_numbers_with_relating_multiplication_to_addition_with_images(1,false);
			String str = "There are ::blank:: group of " + result.get("number2").toString() + " " + result.get("object_name").toString() + "\n\n";
			for(int ii = 0 ; ii < (int) result.get("number1") ; ii++ ) {
				str += result.get("number2").toString() + " ";

				if(ii < (int) result.get("number1") - 1 ) {
					str += "+ ";
				}
			}
			str += "= " + result.get("number3").toString() + "\n\n";
			if((int) result.get("number3") % 2 == 1) {
				str += "::blank:: x " + result.get("number2").toString() + " = " + result.get("number3").toString();
			} else {
				str += "::blank:: times " + result.get("number2").toString() + " = " + result.get("number3").toString();
			}
			result.put("question", str);
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiplication_tables
	@description Define the problem set for multiplication tables
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiplication_tables(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_tables_non_assisted(10);
			result.put("question", "Fill in the table of " + result.get("number").toString());
		} else if(type == 3) {
			result = mg_get_multiplication_of_two_numbers_with_filling_number_in_series(10,1);
			String quest = "Fill in the missing number from the table of " + result.get("number").toString() + "\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else if(type == 4) {
			result = mg_get_multiplication_of_two_numbers_with_filling_number_in_series(10,2);
			String quest = "Fill in the missing number from the table of " + result.get("number").toString() + "\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else if(type == 5) {
			result = mg_get_multiplication_of_two_numbers_with_filling_number_in_series(10,3);
			String quest = "Fill in the missing number from the table of " + result.get("number").toString() + "\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else if(type == 6) {
			result = mg_get_multiplication_of_two_numbers_with_filling_number_in_series(10,4);
			String quest = "Fill in the missing number from the table of " + result.get("number").toString() + "\n\n";
			ArrayList <String> question_arraylist = new ArrayList<>();
			question_arraylist = (ArrayList<String>)result.get("question_array");
			
			for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
				quest += question_arraylist.get(ii) + "      ";
			}
			result.put("question", quest);
		} else {
			result = mg_get_multiplication_tables_non_assisted(10);
			result.put("question", "Fill in the table of " + result.get("number").toString());
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiplication_facts
	@description Define the problem set for multiplication tables
	@param level - int - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiplication_facts(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiplication_of_two_numbers_upto_200_multiplication_facts(level);

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiply_by_zero
	@description Define the problem set for multiplication multiply by zero
	@param level - int - Chooses a level. Values are 1, 2 or 3.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiply_by_zero(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiplication_of_two_numbers_with_one_number_as_zero(level,false);
		result.put("question", "Multiply:");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiply_by_tens
	@description Define the problem set for multiplication multiply by tens
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiply_by_tens(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiplication_of_two_numbers_with_one_number_as_zero(level,false);
		result.put("question", "Multiply:");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiply_by_hundreds
	@description Define the problem set for multiplication multiply by hundreds
	@param level - Integer - Chooses a level. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiply_by_hundreds(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiplication_of_two_numbers_with_hundreds(level,false);
		result.put("question", "Multiply:");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_word_problems
	@description Define the problem set for multiplication word problems
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_word_problems(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_of_two_numbers_assisted_format(false);
			result.put("question", "There are " + result.get("number1").toString() + " days in one week. How many days are in " + result.get("number2").toString() + " weeks?");
		} else {
			result = mg_get_multiplication_of_two_numbers_assisted_format(false);
			result.put("question", "There are " + result.get("number1").toString() + " days in one week. How many days are in " + result.get("number2").toString() + " weeks?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_describe_multiplication_images
	@description Define the problem set for multiplication describe multiplication images
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_describe_multiplication_images(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiplication_of_two_numbers_with_addition_and_multiplication_operation();
		result.put("question", "Describe the image above as an addition and a multiplication operation.\n\n");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_related_multiplication_facts
	@description Define the problem set for multiplication related multiplication facts
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_related_multiplication_facts(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_of_two_numbers_with_related_facts_without_images(1);
			result.put("question", "Solve");
		} else if(type == 3) {
			result = mg_get_multiplication_of_two_numbers_with_related_facts_without_images(2);
			result.put("question", "Solve");
		} else if(type == 4) {
			result = mg_get_multiplication_of_two_numbers_with_related_facts_with_a_missing_number(1,false);
			result.put("question", "Fill in the missing number:");
		} else if(type == 5) {
			result = mg_get_multiplication_of_two_numbers_with_related_facts_with_a_missing_number(2,false);
			result.put("question", "Fill in the missing number:");
		} else {
			result = mg_get_multiplication_of_two_numbers_with_related_facts_with_images();
			result.put("question", "Solve");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiply_using_lattice_method
	@description Define the problem set for multiplication multiply using lattice method
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiply_using_lattice_method(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_with_boxes(2);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 3) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_with_boxes(3);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 4) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_with_boxes(4);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 5) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_with_boxes(5);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 6) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_without_boxes(1,false);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 7) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_without_boxes(2,false);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 8) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_without_boxes(3,false);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 9) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_without_boxes(4,false);
			result.put("question", "Multiply using the lattice method");
		} else if(type == 10) {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_without_boxes(5,false);
			result.put("question", "Multiply using the lattice method");
		} else {
			result = mg_get_multiplication_of_two_numbers_using_lattice_method_with_boxes(1);
			result.put("question", "Multiply using the lattice method");
		}


		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiply_using_vertical_method 
	@description Define the problem set for multiplication multiply using vertical method 
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiply_using_vertical_method(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_of_two_numbers_with_one_digit_and_three_digits(false);
			result.put("question", "Multiply");
		} else {
			result = mg_get_multiplication_of_two_numbers_with_one_digit_and_two_digits(false);
			result.put("question", "Multiply");
		}


		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_multiply_two_numbers
	@description Define the problem set for multiplication multiply two numbers
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_multiply_two_numbers(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_of_two_numbers_with_one_digit_and_three_digits(false);
			result.put("question", "Multiply");
		} else if(type == 3) {
			result = mg_get_multiplication_of_two_numbers_with_two_digits_with_carrying_over(1,false);
			result.put("question", "Multiply");
		} else if(type == 4) {
			result = mg_get_multiplication_of_two_numbers_with_two_digits_with_carrying_over(2,false);
			result.put("question", "Multiply");
		} else if(type == 5) {
			result = mg_get_multiplication_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over(1,false);
			result.put("question", "Multiply");
		} else if(type == 6) {
			result = mg_get_multiplication_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over(2,false);
			result.put("question", "Multiply");
		} else if(type == 7) {
			result = mg_get_multiplication_of_two_numbers_with_three_or_four_digits_and_three_digits_with_carrying_over(1,false);
			result.put("question", "Multiply");
		} else if(type == 8) {
			result = mg_get_multiplication_of_two_numbers_with_three_or_four_digits_and_three_digits_with_carrying_over(2,false);
			result.put("question", "Multiply");
		} else {
			result = mg_get_multiplication_of_two_numbers_with_one_digit_and_two_digits(false);
			result.put("question", "Multiply");
		}


		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_multiplication_practice
	@description Define the problem set for multiplication practice
	@param level - Integer - Chooses a type. Values are 1 to 6.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_multiplication_practice(int level) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_multiplication_of_two_numbers_general_practice(level,false);
		result.put("question", "Multiply\n\n" + result.get("number1").toString() + " x " + result.get("number2").toString() + " = ::blank::");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	 @name mg_bll_multiplication_for_multiplication_word_problems()
	 @description Gets the problem set data containing multiplication of 2 numbers.
	 @param type - int - Chooses a type. Values are 1 to 7.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_multiplication_for_multiplication_word_problems(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_multiplication_for_daily_life_examples_type_1(2, false);
		} else if(type == 3) {
			result = mg_get_multiplication_for_daily_life_examples_type_1(3, false);
		} else if(type == 4) {
			result = mg_get_multiplication_for_daily_life_examples_type_1(4, false);
		} else if(type == 5) {
			result = mg_get_multiplication_for_daily_life_examples_type_2(1, false);
		} else if(type == 6) {
			result = mg_get_multiplication_for_daily_life_examples_type_2(2, false);
		} else if(type == 7) {
			result = mg_get_multiplication_for_tricky_questions(false);
		} else {
			result = mg_get_multiplication_for_daily_life_examples_type_1(1, false);
		}

		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_patterns_repeating_patterns()
	 @description Define the problem set for repeating patterns.
	 @param type - int - Chooses a type. Values are 1, 2 or 3.
	 @return HashMap (String question, String pattern, String images/numbers for characters A, B, and C, String images/numbers for characters A, B, and C for answer, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_patterns_repeating_patterns(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_patterns_for_filling_in_the_missing_part_in_the_pattern(1, true);
			result.put("question", "Look at the pattern above. Identify the missing part.");
		} else if(type == 3) {
			result = mg_get_patterns_for_filling_in_the_missing_part_in_the_pattern(2, true);
			result.put("question", "Look at the pattern above. Identify the missing part.");
		}	else {
			result = mg_get_patterns_for_identifying_the_pattern_similar_to_the_shown_pattern(true);
			result.put("question", "Look at the pattern above. Which pattern matches?");
		}

		/**
		 * Return the HashMap with String question, String pattern, String images/numbers for characters A, B, and C, String images/numbers for characters A, B, and C for answer, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_patterns_describing_patterns()
	 @description Gets the problem set data describing component of the shown pattern.
	 @return HashMap(String question, String pattern, String images/numbers for characters A, B, and C, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_patterns_describing_patterns(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_patterns_for_describing_component_of_the_pattern(true);

		result.put("question", "Describe the pattern above:");

		/**
		 * Return the HashMap with String question, String pattern, String images/numbers for characters A, B, and C, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_get_patterns_for_growing_patterns()
	 @description Gets the problem set data containing answer of the growing pattern.
	 @return HashMap(String question, String pattern, String images/numbers for characters A, B, and C, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_get_patterns_for_growing_patterns(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_patterns_for_what_comes_next_in_growing_patterns(true);

		result.put("question", "Look at the patterns above. Which comes next?");

		/**
		 * Return the HashMap with String question, String pattern, String images/numbers for characters A, B, and C, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_get_patterns_numeric_patterns()
	 @description Gets the problem set data for numeric patterns.
	 @param type - int - Chooses a type. Values are 1 to 16.
	 @return HashMap(String question, question ArrayList, answer ArrayList)
	 */                  
	public static Map<String, Object> mg_get_patterns_numeric_patterns(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_patterns_for_increasing_patterns_with_constant_difference(2);
		} else if(type == 3) {
			result = mg_get_patterns_for_increasing_patterns_with_constant_difference(3);
		} else if(type == 4) {
			result = mg_get_patterns_for_increasing_patterns_with_constant_difference(4);
		} else if(type == 5) {
			result = mg_get_patterns_for_decreasing_patterns_with_constant_difference(1);
		} else if(type == 6) {
			result = mg_get_patterns_for_decreasing_patterns_with_constant_difference(2);
		} else if(type == 7) {
			result = mg_get_patterns_for_decreasing_patterns_with_constant_difference(3);
		} else if(type == 8) {
			result = mg_get_patterns_for_decreasing_patterns_with_constant_difference(4);
		} else if(type == 9) {
			result = mg_get_patterns_for_increasing_patterns_with_growing_difference(1);
		} else if(type == 10) {
			result = mg_get_patterns_for_increasing_patterns_with_growing_difference(2);
		} else if(type == 11) {
			result = mg_get_patterns_for_decreasing_patterns_with_growing_difference(1);
		} else if(type == 12) {
			result = mg_get_patterns_for_decreasing_patterns_with_growing_difference(2);
		} else if(type == 13) {
			result = mg_get_patterns_for_geometric_patterns(1);
		} else if(type == 14) {
			result = mg_get_patterns_for_geometric_patterns(2);
		} else if(type == 15) {
			result = mg_get_patterns_for_squares();
		} else if(type == 16) {
			result = mg_get_patterns_for_cubes();
		} else {
			result = mg_get_patterns_for_increasing_patterns_with_constant_difference(1);
		}
		
		String quest = "Fill in the missing number:\n\n";
		ArrayList <String> question_arraylist = new ArrayList<>();
		question_arraylist = (ArrayList<String>)result.get("question_array");
		
		for(int ii = 0 ; ii < question_arraylist.size() ; ii++) {
			quest += question_arraylist.get(ii) + "      ";
		}
		result.put("question", quest);

		/**
		 * Return the HashMap with String question, question ArrayList, answer ArrayList
		 */  
		return result;
	}

	/**
	 @name mg_bll_perimeter_and_area_for_perimeter_of_different_shapes()
	 @description Define the problem set for perimeter of different shapes
	 @param type - int - Chooses a type. Values are 1 to 14.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_perimeter_and_area_for_perimeter_of_different_shapes(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_perimeter_and_area_perimeter_of_shapes_with_image(2, false);
			result.put("question", "What is the perimeter of the " + result.get("shape_name") + "?");
		} else if(type == 3) {
			result = mg_get_perimeter_and_area_perimeter_of_shapes_with_image(3, false);
			result.put("question", "What is the perimeter of the " + result.get("shape_name") + "?");
		} else if(type == 4) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_triangle(1, false);
			result.put("question", "What is the perimeter of a triangle with side " + result.get("number1") + " " + result.get("unit") + ", " + result.get("number2") + " " + result.get("unit") +  " and " + result.get("number3") + " " + result.get("unit") + "?");
		} else if(type == 5) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_triangle(2, false);
			result.put("question", "In triangle " + result.get("triangle_name") + ", the length of side " + result.get("side1_name") + " is " + result.get("number1") + " " + result.get("unit") + ", the length of side " + result.get("side2_name") + ", is " + result.get("number2") + " " + result.get("unit") + " and the length of side " + result.get("side3_name") + " is " + result.get("number3") + " " + result.get("unit") + "." + "\n" + "The perimeter of triangle " + result.get("triangle_name") + " is ::blank:: " + result.get("unit"));
		} else if(type == 6) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_triangle(3, false);
			result.put("question", "What is the perimeter of a triangle with side " + result.get("number1") + " " + result.get("unit") + ", " + result.get("number2") + " " + result.get("unit") +  " and " + result.get("number3") + " " + result.get("unit") + "?");
		} else if(type == 7) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_square(1, false);
			result.put("question", "What is the perimeter of a square with sides equal to " + result.get("number1") + " " + result.get("unit") + "?");
		} else if(type == 8) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_square(2, false);
			result.put("question", "The length of a side of square " + result.get("square_name") + " is " + result.get("number1") + " " + result.get("unit") + "." + "\n" + "The perimeter of square " + result.get("square_name") + " is ::blank:: " + result.get("unit") + ".");
		} else if(type == 9) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_square(3, false);
			result.put("question", "The length of a side of square " + result.get("square_name") + " is " + result.get("number1") + " " + result.get("unit") + ". Find its perimeter.");
		} else if(type == 10) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_square(4, false);
			result.put("question", "What is the perimeter of a square with sides equal to " + result.get("number1") + " " + result.get("unit") + "?");
		} else if(type == 11) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_rectangle(1, false);
			result.put("question", "What is the perimeter of a rectangle with sides equal to " + result.get("number1") + " " + result.get("unit") + ", " + result.get("number2") + " " + result.get("unit") + ", " + result.get("number1") + " " + result.get("unit") + " and " + result.get("number2") + " " + result.get("unit") + "?");
		} else if(type == 12) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_rectangle(2, false);
			result.put("question", "The sides of a rectangular formation are " + result.get("number1") + " " + result.get("unit") + ", " + result.get("number2") + " " + result.get("unit") + ", " + result.get("number1") + " " + result.get("unit") + " and " + result.get("number2") + " " + result.get("unit") + "." + "\n" + "Find its perimeter.");
		} else if(type == 13) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_rectangle(3, false);
			result.put("question", "The lengths of the adjacent sides of rectangle " + result.get("rectangle_name") + " are " + result.get("number1") + " " + result.get("unit") + " and " + result.get("number2") + " " + result.get("unit") + "." + "\n" + "The perimeter of rectangle " + result.get("rectangle_name") + " is ::blank:: " + result.get("unit"));
		} else if(type == 14) {
			result = mg_get_perimeter_and_area_calculating_perimeter_of_rectangle(4, false);
			result.put("question", "What is the perimeter of a rectangle with length " + result.get("number1") + " " + result.get("unit") + " and breadth " + result.get("number2") + " " + result.get("unit") + "?");
		} else {
			result = mg_get_perimeter_and_area_perimeter_of_shapes_with_image(1, false);
			result.put("question", "What is the perimeter of the " + result.get("shape_name") + "?");
		}

		/**
		 * Returns the HashMap
		 */  
		return result;
	}

	/**
	 @name mg_bll_perimeter_and_area_for_area_of_different_shapes()
	 @description Define the problem set for area of different shapes
	 @param type - int - Chooses a type. Values are 1 to 6.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_perimeter_and_area_for_area_of_different_shapes(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_perimeter_and_area_calculating_area_from_nets_of_3_d_figures(false);
			result.put("question", "What is the area of the " + result.get("shape_name") + "?");
		} else if(type == 3) {
			result = mg_get_perimeter_and_area_calculating_area_of_rectangle(1, false);
			result.put("question", "What is the area of a rectangle with length " + result.get("number1") + " " + result.get("unit") + " and " + result.get("smaller_side_name") + " " + result.get("number2") + " " + result.get("unit") + "?");
		} else if(type == 4) {
			result = mg_get_perimeter_and_area_calculating_area_of_rectangle(2, false);
			result.put("question", "What is the area of a rectangle with length " + result.get("number1") + " " + result.get("unit") + " and " + result.get("smaller_side_name") + " " + result.get("number2") + " " + result.get("unit") + "?");
		} else if(type == 5) {
			result = mg_get_perimeter_and_area_calculating_area_of_square(1, false);
			result.put("question", "Measure the area of a square with sides " + result.get("number1") + " " + result.get("unit") + " each?");
		} else if(type == 6) {
			result = mg_get_perimeter_and_area_calculating_area_of_square(2, false);
			result.put("question", "Measure the area of a square with sides " + result.get("number1") + " " + result.get("unit") + " each?");
		} else {
			result = mg_get_perimeter_and_area_calculating_area_for_shapes_with_unit_boxes(false);
			result.put("question", "What is the area of the " + result.get("shape_name") + "?");
		}

		/**
		 * Returns the HashMap
		 */  
		return result;
	}

	/**
	 @name mg_bll_perimeter_and_area_for_area_of_daily_life_examples()
	 @description Define the problem set for finding the area of daily life examples.
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_perimeter_and_area_for_area_of_daily_life_examples(int type) {
	
		Map<String, Object> result = new HashMap<>();
	
		if(type == 2) {
			result = mg_get_area_for_daily_life_rectangular_examples(false);
		} else {
			result = mg_get_area_for_daily_life_square_examples(false);
		}
	
		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_perimeter_and_area_for_cost_of_land()
	 @description Define the problem set for finding the cost of land.
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_perimeter_and_area_for_cost_of_land(int type) {
	
		Map<String, Object> result = new HashMap<>();
	
		if(type == 2) {
			result = mg_get_area_for_cost_of_land_subtype_2(false);
		} else {
			result = mg_get_area_for_cost_of_land_subtype_1(false);
		}
	
		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_perimeter_and_area_for_cost_of_laying_floor()
	 @description Define the problem set for getting the cost of laying floor.
	 @param type - int - Chooses a type. Values are 1, 2 or 3.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_perimeter_and_area_for_cost_of_laying_floor(int type) {
	
		Map<String, Object> result = new HashMap<>();
	
		if(type == 2) {
			result = mg_get_area_for_cost_of_laying_rectangular_floor_subtype_2(false);
		} else if(type == 3) {
			result = mg_get_area_for_cost_of_laying_a_square_floor(false);
		} else {
			result = mg_get_area_for_cost_of_laying_rectangular_floor_subtype_1(false);
		}
	
		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_perimeter_and_area_for_perimeter_of_shapes()
	 @description Define the problem set containing perimeter of square and rectangular shapes.
	 @param type - int - Chooses a type. Values are 1 to 10.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_perimeter_and_area_for_perimeter_of_shapes(int type) {
	
		Map<String, Object> result = new HashMap<>();
	
		if(type == 2) {
			result = mg_get_perimeter_for_daily_life_examples_of_square(false);
		} else if(type == 3) {
			result = mg_get_perimeter_for_multiple_rounds_around_a_rectangle(1, false);
		} else if(type == 4) {
			result = mg_get_perimeter_for_multiple_rounds_around_a_rectangle(2, false);
		} else if(type == 5) {
			result = mg_get_perimeter_for_multiple_rounds_around_a_square(1, false);
		} else if(type == 6) {
			result = mg_get_perimeter_for_multiple_rounds_around_a_square(2, false);
		} else if(type == 7) {
			result = mg_get_perimeter_for_cost_of_fencing_a_single_round(1, false);
		} else if(type == 8) {
			result = mg_get_perimeter_for_cost_of_fencing_a_single_round(2, false);
		} else if(type == 9) {
			result = mg_get_perimeter_for_cost_of_fencing_multiple_rounds(1, false);
		} else if(type == 10) {
			result = mg_get_perimeter_for_cost_of_fencing_multiple_rounds(2, false);
		} else {
			result = mg_get_perimeter_for_daily_life_examples_of_rectangles(false);
		}
	
		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_place_values_in_teens()
	 @description Define the problem set for place values in teens.
	 @param type - int - Chooses a type. Values are 1 to 4.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_place_values_in_teens(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_place_values_for_total_number_of_objects_with_images(false);
			result.put("question", "10 + " + result.get("number") + " = ::blank::");
		} else if(type == 3) {
			result = mg_get_place_values_for_total_number_of_objects_without_images(false);
			result.put("question", result.get("number") + " = 10 + ::blank::");
		} else if(type == 4) {
			result = mg_get_place_values_counting_objects(true);
			result.put("question", "Which group has " + result.get("number") + " " + result.get("object") + "?");
		} else {
			result = mg_get_place_values_for_making_teens(false);
			result.put("question", "Here are 10 " + result.get("object") + ":" + "\n" + "We want " + result.get("number") + " " + result.get("object") + "\n\n" + "We will need ::blank:: more " + result.get("object"));
		}	

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_place_values_groups_of_objects()
	 @description Define the problem set for number of groups.
	 @param type - int - Chooses a type. Values are 1 to 4.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_place_values_groups_of_objects(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_place_values_groups_of_ten_objects(2, true, false);
			result.put("question", "There are " + result.get("number") + " " + result.get("object")  + "." + "\n\nThese " + result.get("number") + " " + result.get("object")  + " can be put into ::blank:: groups of 10");
		} else if(type == 3) {
			result = mg_get_place_values_groups_of_hundred_objects(1, false, false);
			result.put("question", "Fill in the blank:" + "\n" + "The number " + result.get("number") + " has ::blank:: groups of 100");
		} else if(type == 4) {
			result = mg_get_place_values_groups_of_hundred_objects(2, true, false);
			result.put("question", "There are " + result.get("number") + " " + result.get("object")  + "." + "\n" + "These " + result.get("number") + " objects can be put into ::blank:: groups of 100");
		} else {
			result = mg_get_place_values_groups_of_ten_objects(1, false, false);
			result.put("question", "Fill in the blank: The number " + result.get("number") + " has ::blank:: groups of 10");
		}	

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_place_values_convert_between_place_values()
	 @description Define the problem set for converting between place values.
	 @param type - int - Chooses a type. Values are 1 to 3.
	 @return HashMap(String question, int random number, int answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_place_values_convert_between_place_values(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_place_values_convert_between_hundreds_and_tens(false);
			result.put("question", "Solve: "+result.get("number1")+" hundreds = "+result.get("number2")+" tens");
		} else if(type == 3) {
			result = mg_get_place_values_convert_between_hundreds_and_units(false);
			result.put("question", "Solve: "+result.get("number1")+" hundreds = "+result.get("number2")+" units");
		} else {
			result = mg_get_place_values_convert_between_tens_and_units(false);	
			result.put("question", "Solve: "+result.get("number1")+" tens = "+result.get("number2")+" units");
		}	

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_place_values_for_place_value_models()
	 @description Define the problem set for place value models.
	 @param type - int - Chooses a type. Values are 1 to 4.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_place_values_for_place_value_models(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_place_values_counting_tens_and_units(2);
			result.put("question", "Count the number of tens and units:" + "\n" + "::blank:: tens + ::blank:: units = " + result.get("number"));
		} else if(type == 3) {
			result = mg_get_place_values_for_identifying_the_number(1, false);
			result.put("question", "What number is shown?   ::blank::");
		} else if(type == 4) {
			result = mg_get_place_values_for_identifying_the_number(2, false);
			result.put("question", "What number is shown?   ::blank::");
		} else {
			result = mg_get_place_values_counting_tens_and_units(1);
			result.put("question", "Count the number of tens and units:" + "\n" + "::blank:: tens + ::blank:: units = " + result.get("number"));
		}	

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_place_values_for_place_values()
	 @description Define the problem set for place values.
	 @param type - int - Chooses a type. Values are 1 to 14.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_place_values_for_place_values(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_place_values_identifying_place_value_of_the_underlined_digit(2);
			result.put("question", result.get("number").toString() + "\n\nWhat is the place value of the underlined digit?\n\n::blank::");
		} else if(type == 3) {
			result = mg_get_place_values_identifying_place_value_of_the_underlined_digit(3);
			result.put("question", result.get("number").toString() + "\n\nWhat is the place value of the underlined digit?\n\n::blank::");
		} else if(type == 4) {
			result = mg_get_place_values_identifying_place_value_of_the_underlined_digit(4);
			result.put("question", result.get("number").toString() + "\n\nWhat is the place value of the underlined digit?\n\n::blank::");
		} else if(type == 5) {
			result = mg_get_place_values_identifying_place_value_of_the_underlined_digit(5);
			result.put("question", result.get("number").toString() + "\n\nWhat is the place value of the underlined digit?\n\n::blank::");
		} else if(type == 6) {
			result = mg_get_place_values_expanded_form(1);
			result.put("question", "Write " + result.get("number1") + " in expanded form\n\n" + result.get("number1") + "    =    ::blank::    +    ::blank::");
		} else if(type == 7) {
			result = mg_get_place_values_expanded_form(2);
			result.put("question", "Write " + result.get("number1") + " in expanded form\n\n" + result.get("number1") + "    =    ::blank::    +    ::blank::    +    ::blank::");
		} else if(type == 8) {
			result = mg_get_place_values_expanded_form(3);
			result.put("question", "Write " + result.get("number1") + " in expanded form\n\n" + result.get("number1") + "    =    ::blank::    +    ::blank::    +    ::blank::    +    ::blank::");
		} else if(type == 9) {
			result = mg_get_place_values_expanded_form(4);
			result.put("question", "Write " + result.get("number1") + " in expanded form\n\n" + result.get("number1") + "    =    ::blank::    +    ::blank::    +    ::blank::    +    ::blank::    +    ::blank::");
		} else if(type == 10) {
			result = mg_get_place_values_expanded_form(5);
			result.put("question", "Write " + result.get("number1") + " in expanded form\n\n" + result.get("number1") + "    =    ::blank::    +    ::blank::    +    ::blank::    +    ::blank::    +    ::blank::    +    ::blank::");
		} else if(type == 11) {
			result = mg_get_place_values_converting_from_expanded_to_normal_form(1, false);
			result.put("question", "What is " + result.get("number1") + " + " + result.get("number2") + "?\n\n::blank::");
		} else if(type == 12) {
			result = mg_get_place_values_converting_from_expanded_to_normal_form(2, false);
			result.put("question", "What is " + result.get("number1") + " + " + result.get("number2") + " + " + result.get("number3") + "?\n\n::blank::");
		} else if(type == 13) {
			result = mg_get_place_values_converting_from_expanded_to_normal_form(3, false);
			result.put("question", "What is " + result.get("number1") + " + " + result.get("number2") + " + " + result.get("number3") +  " + " + result.get("number4") + "?\n\n::blank::");
		} else if(type == 14) {
			result = mg_get_place_values_expanded_form_with_fill_in_the_blanks(false);
			String quest = "Fill in the blank:\n\n";
			String quest1 = "";
			if(!result.get("thousands_place").toString().equals("0")) {
				quest1 = result.get("thousands_place").toString();
			}
			
			if(!result.get("hundreds_place").toString().equals("0")) {
				if(!quest1.equals("")) {
					quest1 += " + " + result.get("hundreds_place").toString();
				} else {
					quest1 = result.get("hundreds_place").toString();
				}
			}
			
			if(!result.get("tens_place").toString().equals("0")) {
				if(!quest1.equals("")) {
					quest1 += " + " + result.get("tens_place").toString();
				} else {
					quest1 = result.get("tens_place").toString();
				}
			}
			
			if(!result.get("units_place").toString().equals("0")) {
				if(!quest1.equals("")) {
					quest1 += " + " + result.get("units_place").toString();
				} else {
					quest1 = result.get("units_place").toString();
				}
			}
			
			result.put("question", quest + quest1 + " = " + result.get("number").toString());
			
		} else {
			result = mg_get_place_values_identifying_place_value_of_the_underlined_digit(1);
			result.put("question", result.get("number").toString() + "\n\nWhat is the place value of the underlined digit?\n\n::blank::");
		}	

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_place_values_for_converting_between_place_values()
	 @description Define the problem set for converting between place values.
	 @param type - int - Chooses a type. Values are 1 to 11.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_place_values_for_converting_between_place_values(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_place_values_tens_in_expanded_form(false);
			result.put("question", "Fill in the blanks:\n\n"+result.get("number").toString()+" = "+result.get("tens_place").toString()+" tens + "+result.get("units_place").toString()+" units");
		} else if(type == 3) {
			result = mg_get_place_values_converting_tens_and_units_to_numbers(1, false);
			result.put("question", "Fill in the blanks:" + "\n" + result.get("tens_place1") + " tens + " + result.get("units_place1") + " units = ::blank::");
		} else if(type == 4) {
			result = mg_get_place_values_converting_tens_and_units_to_numbers(2, false);
			result.put("question", "Fill in the blanks:" + "\n" + result.get("tens_place1") + " tens + " + result.get("units_place1") + " units = ::blank::");
		} else if(type == 5) {
			result = mg_get_place_values_converting_numbers_to_hundreds_tens_and_units();
			result.put("question", "Convert into tens and units:\n\n"+result.get("number").toString()+" = "+result.get("hundreds_place").toString()+" hundreds + "+result.get("tens_place").toString()+" tens + "+result.get("units_place").toString()+" units");
		} else if(type == 6) {
			result = mg_get_place_values_hundreds_in_expanded_form(false);
			result.put("question", "Fill in the blanks:\n\n"+result.get("number").toString()+" = "+result.get("hundreds_place").toString()+" hundreds + "+result.get("tens_place").toString()+" tens + "+result.get("units_place").toString()+" units");
		} else if(type == 7) {
			result = mg_get_place_values_converting_hundreds_tens_and_units_to_numbers(1, false);
			result.put("question", "Fill in the blanks:" + "\n" + result.get("hundreds_place1") + " hundreds + " + result.get("tens_place1") + " tens + " + result.get("units_place1") + " units = ::blank::");
		} else if(type == 8) {
			result = mg_get_place_values_converting_hundreds_tens_and_units_to_numbers(2, false);
			result.put("question", "Fill in the blanks:" + "\n" + result.get("hundreds_place1") + " hundreds + " + result.get("tens_place1") + " tens + " + result.get("units_place1") + " units = ::blank::");
		} else if(type == 9) {
			result = mg_get_place_values_converting_hundreds_tens_and_units_to_numbers(3, false);
			result.put("question", "Fill in the blanks:" + "\n" + result.get("hundreds_place1") + " hundreds + " + result.get("tens_place1") + " tens + " + result.get("units_place1") + " units = ::blank::");
		} else if(type == 10) {
			result = mg_get_place_values_converting_hundreds_tens_and_units_to_numbers(4, false);
			result.put("question", "Fill in the blanks:" + "\n" + result.get("hundreds_place1") + " hundreds + " + result.get("tens_place1") + " tens + " + result.get("units_place1") + " units = ::blank::");
		} else if(type == 11) {
			result = mg_get_place_values_for_regrouping_tens_and_ones();
			result.put("question", "Convert into tens:\n\n" + result.get("number1") + " units + " + result.get("number2") + " units = ::blank:: units = ::blank:: tens + ::blank:: units");
		} else {
			result = mg_get_place_values_converting_numbers_to_tens_and_units();
			result.put("question", "Convert into tens and units:\n\n"+result.get("number").toString()+" = "+result.get("tens_place").toString()+" tens + "+result.get("units_place").toString()+" units\n\n"+result.get("number").toString()+" = ::blank:: units");
		}	

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_place_values_for_comparing_numbers_by_place_values()
	 @description Define the problem set containing the answer which is obtained by comparing two random numbers.
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap()
	 */                  
	public static Map<String, Object> mg_bll_place_values_for_comparing_numbers_by_place_values(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_place_values_comparing_numbers_by_place_values_hundreds(true);
		} else {
			result = mg_get_place_values_comparing_numbers_by_place_values_tens(true);	
		}	

		result.put("question", "Which number is " + result.get("comparison_value") + "?");

		/**
		 * Return the HashMap 
		 */  
		return result;
	}

	/**
	 @name mg_bll_positions_inside_or_outside()
	 @description Gets the problem set data for identifying which object is inside or outside the box
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image1, String image2, String position value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_positions_inside_or_outside(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_position_of_object_whether_inside_or_outside_the_box(true);
			result.put("question", "The " + result.get("object") + " is ::blank::");
		} else {
			result = mg_get_position_which_object_is_inside_or_outside_the_box(true);
			result.put("question", "Which object is " + result.get("position_value") + " the box?");
		}

		/**
		 * Return the HashMap with String question, String image1, String image2, String position value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_positions_left_or_right()
	 @description Gets the problem set data for identifying the object on the left or right of another object
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image1, String image2, String position value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_positions_left_or_right(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_position_of_object_whether_left_or_right(true);
			result.put("question", "The " + result.get("object") + " is on the ::blank::");
		} else {
			result = mg_get_position_which_object_is_on_left_or_right_of_another_object(true);
			result.put("question", "Which object is on the " + result.get("position_value") + "?");
		}

		/**
		 * Return the HashMap with String question, String image1, String image2, String position value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_positions_left_right_or_middle()
	 @description Gets the problem set data for identifying the object on the left, right or in the middle
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image1, String image2, String image3, String position value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_positions_left_right_or_middle(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_position_of_object_whether_on_the_left_right_or_in_the_middle(true);
			result.put("question", "The " + result.get("object") + " is ::blank::");
		} else {
			result = mg_get_position_which_object_is_on_the_left_right_or_in_the_middle(true);
			result.put("question", "Which object is " + result.get("position_value") + "?");
		}

		/**
		 * Return the HashMap with String question, String image1, String image2, String image3, String position value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_positions_top_or_bottom()
	 @description Gets the problem set data for identifying which object is at the top or bottom of another object
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image1, String image2, String position value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_positions_top_or_bottom(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_position_of_object_whether_at_the_top_or_bottom(true);
			result.put("question", "The " + result.get("object") + " is at the ::blank::");
		} else {
			result = mg_get_position_which_object_is_at_the_top_or_bottom_of_another_object(true);
			result.put("question", "Which object is at the " + result.get("position_value") + "?");
		}

		/**
		 * Return the HashMap with String question, String image1, String image2, String position value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	 @name mg_bll_positions_top_bottom_or_middle()
	 @description Gets the problem set data for identifying which object is at the top, bottom or in the middle
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, String image1, String image2, String image3, String position value, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_positions_top_bottom_or_middle(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_position_of_object_whether_at_the_top_bottom_or_in_the_middle(true);
			result.put("question", "The " + result.get("object") + " is ::blank::");
		} else {
			result = mg_get_position_which_object_is_at_the_top_bottom_or_in_the_middle(true);
			result.put("question", "Which object is " + result.get("position_value") + "?");
		}

		/**
		 * Return the HashMap with String question, String image1, String image2, String image3, String position value, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
     @name mg_bll_subtraction_of_two_numbers_with_pictures()
	 @description Gets the problem set data for subtraction of 2 numbers and displays the output in the form of an image                             
	 @param level - int - Chooses a level. Values are 1 or 2.
	 @return HashMap (String question, int number1, int number2, int answer, String image, String image_title)
	 */
	public static Map<String, Object> mg_bll_subtraction_of_two_numbers_with_pictures(int level) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_of_two_numbers_with_images(level, false);

		result.put("question", "Subtract:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer, String image, String image_title 
		 */
		return result;    
	}

	/**
     @name mg_bll_subtraction_basic_subtraction()
	 @description Gets the problem set data for subtraction of 2 numbers                             
	 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.
	 @return HashMap (String question, int number1, int number2, int answer)
	 */       
	public static Map<String, Object> mg_bll_subtraction_basic_subtraction(int level) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_of_two_numbers(level, false);

		result.put("question", "Subtract:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */ 
		return result;
	}	    

	/**
     @name mg_bll_subtraction_word_problems()
	 @description Gets the problem set data for subtraction of 2 numbers
	 @param type - int - Chooses a question type. Values are 1, 2 or 3.                            
	 @return HashMap (String question, int number1, int number2, int answer)
	 */       
	public static Map<String, Object> mg_bll_subtraction_word_problems(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_subtraction_subtraction_word_problems(2, false);
		} else if(type == 3) {
			result = mg_get_subtraction_subtraction_word_problems(3, false);
		} else {
			result = mg_get_subtraction_subtraction_word_problems(1, false);
		}

		if(type == 1) {
			result.remove("answer_in_words");
			result.remove("number1_in_words");
			result.remove("name");
			result.remove("object");
			result.remove("pronoun");
			result.put("question", "Subtract ".concat(result.get("number1").toString()).concat(" from ").concat(result.get("number2").toString()));
		} else if(type == 2) {
			String temp1 = result.get("name").toString();
			String temp2 = temp1.concat(" had ").concat(result.get("number1_in_words").toString()).concat(" ").concat(result.get("object").toString()).concat(". ").concat(result.get("pronoun").toString()).concat(" ate ").concat(result.get("number2").toString()).concat(". How many ").concat(result.get("object").toString()).concat(" left?");
			result.put("question", temp2);
			result.remove("number1");
			result.remove("answer");
		} else {
			String temp1 = result.get("name").toString();
			String temp2 = temp1.concat(" had ").concat(result.get("number1").toString()).concat(" ").concat(result.get("object").toString()).concat(". ").concat(result.get("pronoun").toString()).concat(" shared ").concat(result.get("number2").toString()).concat(" of them with his friends. How many does ").concat(result.get("pronoun").toString()).concat(" have now?");
			result.put("question", temp2);
			result.remove("number1_in_words");
			result.remove("answer_in_words");
		}

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */ 
		return result;    
	} 

	/**
    @name mg_bll_subtraction_related_subtraction()
	 @description Gets the problem set data for subtraction of 2 numbers                             
	 @param type - int - Chooses a type. Values are 1 or 2.
	 @return HashMap (String question, int number1, int number2, int number3, int answer1, int answer2)
	 */       
	public static Map<String, Object> mg_bll_subtraction_related_subtraction(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_subtraction_showing_related_subtraction_of_two_numbers(2);
		} else {
			result = mg_get_subtraction_showing_related_subtraction_of_two_numbers(1);
		}

		result.put("question", "Solve:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */ 
		return result;
	}	    

	/**
    @name mg_bll_subtraction_fill_in_the_missing_number()
	@description Gets the problem set data for subtraction of 2 numbers and displaying the output in the form of an image.                             
	@param level - int - Chooses a level. Values are 1 or 2.
	@return HashMap (String image, String image_title, int number1, int number2, int answer)
	 */       
	public static Map<String, Object> mg_bll_subtraction_fill_in_the_missing_number(int level) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_of_two_numbers_with_images_filling_the_missing_number(level, false);

		result.put("question", "Solve: \n\n" + result.get("number1").toString() + "     -     "+ result.get("number2").toString() + "     =     "+ result.get("number3").toString());
		
		/**
		 * Return the HashMap with String image, String image_title, int number1, int number2, int answer
		 */ 
		return result;    
	}

	/**
    @name mg_bll_subtraction_by_comparison()
	@description Gets the problem set data for subtraction of 2 numbers                             
	@param level - int - Chooses a level. Values are 1 or 2.
	@return HashMap (int number1, int number2, int answer)
	 */       
	public static Map<String, Object> mg_bll_subtraction_by_comparison(int level) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_of_two_numbers_by_comparison(level, false);

		result.put("question", "Solve:"+ "\n\n" + "The number " + result.get("number1").toString() + " is ::blank:: more than " + result.get("number2").toString() + ".\n\nTherefore, " + result.get("number1").toString() + " = " + result.get("number2").toString() + " + ::blank::" + "\n\n" + "The number " + result.get("number2").toString() + " is ::blank:: less than " + result.get("number1").toString() + ".\n\n" + "Therefore, " + result.get("number2").toString() + " = " + result.get("number1").toString() + " - ::blank::");

		/**
		 * Return the HashMap with int number1, int number2, int answer
		 */ 
		return result;    
	} 

	/**
    @name mg_bll_subtraction_with_just_numbers()
	@description Gets the problem set data for subtraction of 2 numbers                    
	@param type - int - Chooses a question type. Values are 1 to 5.          
	@return HashMap (int number1, int number2, int number3, int answer1, int answer2)
	 */       
	public static Map<String, Object> mg_bll_subtraction_with_just_numbers(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_subtraction_of_two_numbers_assisted(2);
			result.put("question", "Solve:\n\n" + result.get("number1").toString() + "   -   " + result.get("number2").toString() + "   =   " + result.get("number3").toString() + "\n\n" + result.get("number_1").toString() + "   -   " + result.get("number_2").toString() + "   =   " + result.get("number_3").toString());
		} else if(type == 3) {
			result = mg_get_subtraction_of_two_numbers_non_assisted(1, false);
			result.put("question", "Solve:\n\n" + result.get("number1").toString() + "   -   " + result.get("number2").toString() + "   =   " + result.get("number3").toString());
		} else if(type == 4) {
			result = mg_get_subtraction_of_two_numbers_non_assisted(2, false);
			result.put("question", "Solve:\n\n" + result.get("number1").toString() + "   -   " + result.get("number2").toString() + "   =   " + result.get("number3").toString());
		} else if(type == 5) {
			result = mg_get_subtraction_of_two_numbers_non_assisted(3, false);
			result.put("question", "Solve:\n\n" + result.get("number1").toString() + "   -   " + result.get("number2").toString() + "   =   " + result.get("number3").toString());
		} else {
			result = mg_get_subtraction_of_two_numbers_assisted(1);
			result.put("question", "Solve:\n\n" + result.get("number1").toString() + "   -   " + result.get("number2").toString() + "   =   " + result.get("number3").toString() + "\n\n" + result.get("number_1").toString() + "   -   " + result.get("number_2").toString() + "   =   " + result.get("number_3").toString());
		}

		/**
		 * Return the HashMap with int number1, int number2, int number3, int answer1, int answer2
		 */ 
		return result;    
	}

	/**
	@name mg_bll_subtraction_subtracting_zero()
	@description Define the problem set for subtracting zero
	@param level - int - Chooses a level. Values are 1 or 2.
	@return HashMap (String question, int number1, int number2, int answer)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_subtracting_zero(int level) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_of_a_number_with_zero(level, false);

		result.put("question", "Solve:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */  
		return result;
	}

	/**
	@name mg_bll_subtraction_subtracting_tens()
	@description Define the problem set for subtracting tens
	@return HashMap (String question, int number1, int number2, int answer)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_subtracting_tens(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_of_two_numbers_with_subtracting_tens(false);

		result.put("question", "Solve:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */  
		return result;
	}

	/**
	@name mg_bll_subtraction_relating_addition_and_subtraction()
	@description Gets the problem set data for subtraction of 2 numbers, where first is of two digits and second number is of one digit
	@return HashMap (String question, int number1, int number2, int answer)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_relating_addition_and_subtraction(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_relating_addition_and_subtraction(false);

		result.put("question", "Solve:\n\n" + result.get("number1").toString() + "     -     " + result.get("number2").toString() + "     =     ::blank::\n\n" + result.get("number1").toString() + "     =     " + result.get("answer").toString() + "     +     ::blank::");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */  
		return result;
	}

	/**
	@name mg_bll_subtraction_by_counting_backward()
	@description Gets the problem set data subtracting 2 number using number line.
	@param level - int - Chooses a level. Values are 1 or 2.
	@return HashMap (String question, int number1, int number2, int answer, String image)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_by_counting_backward(int level) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_subtraction_by_counting_backward_using_number_lines(level, false);

		result.put("question", "Subtract using the number line below:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer, String image
		 */  
		return result;
	}

	/**
	@name mg_bll_subtraction_using_place_values()
	@description Define the problem set for subtraction using place values.
	@param type - int - Chooses a type. Values are 1 to 13.
	@return HashMap (String question, int number1, int number2, int answer)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_using_place_values(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 3 || type == 4) {
			result = mg_get_subtraction_of_two_numbers_with_two_digits(false);
		} else if(type == 5 || type == 6) {
			result = mg_get_subtraction_of_one_digit_and_three_digits(false);
		} else if(type == 7 || type == 8) {
			result = mg_get_subtraction_of_two_digits_and_three_digits(false);
		} else if(type == 9 || type == 10) {
			result = mg_get_subtraction_two_numbers_with_three_digits(false);
		} else if(type == 11 || type == 12) {
			result = mg_get_subtraction_of_one_digit_and_two_digits_with_borrowing(false);
		} else if(type == 13 || type == 14) {
			result = mg_get_subtraction_of_two_numbers_with_two_digits_with_borrowing(false);
		} else if(type == 15 || type == 16) {
			result = mg_get_subtraction_of_two_numbers_with_one_digit_and_three_digits_with_borrowing(false);
		} else if(type == 17) {
			result = mg_get_subtraction_of_two_numbers_with_two_digits_and_three_digits_with_borrowing(1, false);
		} else if(type == 18) {
			result = mg_get_subtraction_of_two_numbers_with_two_digits_and_three_digits_with_borrowing(2, false);
		} else if(type == 19) {
			result = mg_get_subtraction_of_two_numbers_with_three_digits_with_borrowing(1, false);
		} else if(type == 20) {
			result = mg_get_subtraction_of_two_numbers_with_three_digits_with_borrowing(2, false);
		} else if(type == 21) {
			result = mg_get_subtraction_of_two_numbers_with_three_digits_with_borrowing(3, false);
		} else {
			result = mg_get_subtraction_of_two_numbers_with_one_digit_and_two_digits(false);
		}

		result.put("question", "Solve:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */  
		return result;
	}

	/**
	@name mg_bll_subtraction_practice()
	@description Gets the problem set data for subtraction of 2 numbers
	@param type - int - Chooses a type. Values are 1 to 4.
	@return HashMap (String question, int number1, int number2, int answer)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_practice(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 3 || type == 4) {
			result = mg_get_subtraction_of_two_numbers_upto_five_digits(false);
		} else {
			result = mg_get_subtraction_of_two_numbers_upto_four_digits(false);
		}

		result.put("question", "Solve:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */  
		return result;
	}

	/**
	@name mg_bll_subtraction_convert_horizontal_to_vertical_and_subtract()
	@description Gets the problem set data for subtraction of 2 numbers
	@param type - int - Chooses a type. Values are 1 to 6.
	@return HashMap (String question, int number1, int number2, int answer)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_convert_horizontal_to_vertical_and_subtract(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_subtraction_vertical_ordered_subtraction_of_two_numbers(2, false);
			result.put("question", "Fill in the numbers and subtract.");
		} else if(type == 3) {
			result = mg_get_subtraction_vertical_ordered_subtraction_of_two_numbers(3, false);
			result.put("question", "Fill in the numbers and subtract.");
		} else if(type == 4) {
			result = mg_get_subtraction_vertical_unordered_subtraction_of_two_numbers(1, false);
			result.put("question", "Subtract the smaller number from the bigger number.");
		} else if(type == 5) {
			result = mg_get_subtraction_vertical_unordered_subtraction_of_two_numbers(2, false);
			result.put("question", "Subtract the smaller number from the bigger number.");
		} else if(type == 6) {
			result = mg_get_subtraction_vertical_unordered_subtraction_of_two_numbers(3, false);
			result.put("question", "Subtract the smaller number from the bigger number.");
		} else {
			result = mg_get_subtraction_vertical_ordered_subtraction_of_two_numbers(1, false);
			result.put("question", "Fill in the numbers and subtract.");
		}

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */  
		return result;
	}

	/**
	@name mg_bll_subtraction_horizontal_subtraction_of_two_numbers()
	@description Gets the problem set data for subtraction of 2 numbers
	@param type - int - Chooses a type. Values are 1 to 6.
	@return HashMap (String question, int number1, int number2, int answer)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_horizontal_subtraction_of_two_numbers(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_subtraction_horizontal_ordered_subtraction_of_two_numbers(2, false);
		} else if(type == 3) {
			result = mg_get_subtraction_horizontal_ordered_subtraction_of_two_numbers(3, false);
		} else if(type == 4) {
			result = mg_get_subtraction_horizontal_ordered_subtraction_of_two_numbers(4, false);
		} else {
			result = mg_get_subtraction_horizontal_ordered_subtraction_of_two_numbers(1, false);   
		}

		result.put("question", "Subtract:");

		/**
		 * Return the HashMap with String question, int number1, int number2, int answer
		 */  
		return result;
	}

	/**
	 @name mg_bll_subtraction_for_subtraction_word_problems()
	 @description Gets the problem set data containing subtraction of 2 numbers.
	 @param type - int - Chooses a type. Values are 1 to 7.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_subtraction_for_subtraction_word_problems(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_subtraction_for_daily_life_examples_type_1(2, false);
		} else if(type == 3) {
			result = mg_get_subtraction_for_daily_life_examples_type_1(3, false);
		} else if(type == 4) {
			result = mg_get_subtraction_for_daily_life_examples_type_2(1, false);
		} else if(type == 5) {
			result = mg_get_subtraction_for_daily_life_examples_type_2(2, false);
		} else if(type == 6) {
			result = mg_get_subtraction_for_daily_life_examples_type_2(3, false);
		} else if(type == 7) {
			result = mg_get_subtraction_for_challenging_word_problem(false);
		} else {
			result = mg_get_subtraction_for_daily_life_examples_type_1(1, false);
		}

		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	 @name mg_bll_addition_and_subtraction_for_mixed_word_problems()
	 @description Gets the problem set data containing answer obtained by adding and subtracting the given quantities.
	 @param type - int - Chooses a type. Values are 1, 2 or 3.
	 @return HashMap (String question, int answer, ArrayList mcq_options)
	 */                  
	public static Map<String, Object> mg_bll_addition_and_subtraction_for_mixed_word_problems(int type) {
	
		Map<String, Object> result = new HashMap<>();
	
		if(type == 2) {
			result = mg_get_addition_and_subtraction_for_mixed_problems(2, false);
		} else if(type == 3) {
			result = mg_get_addition_and_subtraction_for_mixed_problems(3, false);
		} else {
			result = mg_get_addition_and_subtraction_for_mixed_problems(1, false);
		}
	
		/**
		 * Return the HashMap (String question, int answer, ArrayList mcq_options)
		 */  
		return result;
	}

	/**
	@name mg_bll_ThreeDObjectsAndNets_identify_nets_from_figure()
	@description Gets the problem set data identifying the net for the shown image of a figure.
	@param type - int - Chooses a level. Values are 1 or 2.
	@param mcq - boolean - Multiple choice options required true / false - default is false.
	@return HashMap (String question, String image, String figure_name, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_ThreeDObjectsAndNets_identify_nets_from_figure(int type) {

		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_ThreeDObjectsAndNets_for_identifying_nets_identifying_nets_from_figure_name(true);
			result.put("question", "Which of the following nets will make a " + result.get("figure_name") + " ?");
		} else {
			result = mg_get_ThreeDObjectsAndNets_for_identifying_nets_from_image(true);
			result.put("question", "Which of the following nets will make the figure?");
		}

		/**
		 * Return the HashMap with String question, String image, String figure_name, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	@name mg_bll_ThreeDObjectsAndNets_identify_figure_from_nets()
	@description Gets the problem set data identifying the figure for the image of net of the figure shown.
	@param mcq - boolean - Multiple choice options required true / false - default is false
	@return HashMap (String question, String image, String answer, ArrayList of mcq options)
	 */                  
	public static Map<String, Object> mg_bll_ThreeDObjectsAndNets_identify_figure_from_nets(int type) {

		Map<String, Object> result = new HashMap<>();

		result = mg_get_ThreeDObjectsAndNets_for_identifying_figure_from_nets(true);
		result.put("question", "Which figure will the net shown above make?");

		/**
		 * Return the HashMap with String question, String image, String answer, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	@name mg_bll_time_days
	@description Define the problem set for days
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_days(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_time_for_day_before_or_after_a_random_day(false);
			result.put("question", "What day comes " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		} else if(type == 3) {
			result = mg_get_time_for_days_before_or_after_a_random_day(1,true);
			result.put("question", "What day is " + result.get("number").toString() + " day(s) " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		} else if(type == 4) {
			result = mg_get_time_for_days_before_or_after_a_random_day(2,false);
			result.put("question", "What day is " + result.get("number").toString() + " day(s) " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		} else if(type == 5) {
			result = mg_get_time_for_days_before_or_after_a_random_day(3,false);
			result.put("question", "What day is " + result.get("number").toString() + " day(s) " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		} else if(type == 6) {
			result = mg_get_time_for_days_before_or_after_a_random_day(1,true);
			result.put("question", "What day is " + result.get("number").toString() + " day(s) " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		} else if(type == 7) {
			result = mg_get_time_for_days_before_or_after_a_random_day(2,true);
			result.put("question", "What day is " + result.get("number").toString() + " day(s) " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		} else if(type == 8) {
			result = mg_get_time_for_days_before_or_after_a_random_day(3,true);
			result.put("question", "What day is " + result.get("number").toString() + " day(s) " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		} else if(type == 9) {
			result = mg_get_time_for_today_or_tomorrow_based_on_yesterday(true);
			result.put("question", "Yesterday was " + result.get("day").toString() + ". What day " + result.get("variable").toString() + "?");
		} else if(type == 10) {
			result = mg_get_time_for_today_or_tomorrow_based_on_yesterday(false);
			result.put("question", "Yesterday was " + result.get("day").toString() + ". What day " + result.get("variable").toString() + "?");
		} else if(type == 11) {
			result = mg_get_time_for_today_or_yesterday_based_on_tomorrow(true);
			result.put("question", "Tomorrow will be " + result.get("day").toString() + ". What day " + result.get("variable").toString() + "?");
		} else if(type == 12) {
			result = mg_get_time_for_today_or_yesterday_based_on_tomorrow(false);
			result.put("question", "Tomorrow will be " + result.get("day").toString() + ". What day " + result.get("variable").toString() + "?");
		} else if(type == 13) {
			result = mg_get_time_for_tomorrow_or_yesterday_based_on_today(true);
			result.put("question", "Today is " + result.get("day").toString() + ". What day " + result.get("variable").toString() + "?");
		} else if(type == 14) {
			result = mg_get_time_for_tomorrow_or_yesterday_based_on_today(false);
			result.put("question", "Today is " + result.get("day").toString() + ". What day " + result.get("variable").toString() + "?");
		} else {
			result = mg_get_time_for_day_before_or_after_a_random_day(true);
			result.put("question", "What day comes " + result.get("variable").toString() + " " + result.get("day").toString() + "?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_seasons
	@description Define the problem set for Seasons
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_seasons(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_time_for_season_before_or_after_a_random_season(true);
		result.put("question", "What season comes " + result.get("variable").toString() + " " + result.get("season").toString() + "?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_months
	@description Define the problem set for Months
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_months(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_time_for_month_before_or_after_a_random_month(false);
			result.put("question", "What month comes " + result.get("variable").toString() + " " + result.get("month").toString() + "?");
		} else if(type == 3) {
			result = mg_get_time_for_nth_month_of_a_year(true);
			result.put("question", "Which is the " + result.get("number").toString() + " month of the year?");
		} else if(type == 4) {
			result = mg_get_time_for_nth_month_of_a_year(false);
			result.put("question", "Which is the " + result.get("number").toString() + " month of the year?");
		} else {
			result = mg_get_time_for_month_before_or_after_a_random_month(true);
			result.put("question", "What month comes " + result.get("variable").toString() + " " + result.get("month").toString() + "?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_calendar
	@description Define the problem set for Calendar
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_calendar(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_time_for_number_of_x_days_in_a_month(true);
			result.put("question", "How many " + result.get("day").toString() + " are there in the month below?");
		} else {
			result = mg_get_time_for_nth_day_in_a_month(false);
			result.put("question", "What date is the " + result.get("number").toString() + " " + result.get("day").toString() + "?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_telling_time
	@description Define the problem set for telling time
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_telling_time(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_time_from_a_clock(true);
		result.put("question", "What time does the clock show?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_elapsed_time
	@description Define the problem set for Elapsed Time
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_elapsed_time(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_time_for_number_of_days_between_two_random_dates_in_a_month(2,false);
			result.put("question", "How many days after " + result.get("day1").toString() + " of " + result.get("month1").toString() + " is " + result.get("day2").toString() + " of " + result.get("month2").toString() + "?");
		} else if(type == 3) {
			result = mg_get_time_for_number_of_years_between_the_two_random_years(false);
			result.put("question", "How many years after " + result.get("year1").toString() + " is " + result.get("year2").toString() + "?");
		} else if(type == 4) {
			result = mg_get_time_for_age_from_two_random_years(1,true);
			result.put("question", result.get("name").toString() + " was born on " + result.get("date1").toString() + ". How old will " + result.get("pronoun").toString() + " be on " + result.get("date2").toString() + "?");
		} else if(type == 5) {
			result = mg_get_time_for_time_taken_to_finish_task(false);
			result.put("question", "If " + result.get("name").toString() + " started " + result.get("task").toString() + " at " + result.get("time1").toString() + " and finished " + result.get("task").toString() + " at " + result.get("time2").toString() + ", how long did " + result.get("name").toString() + " take?\n\n::blank::");
		} else if(type == 6) {
			result = mg_get_time_for_end_time_of_task(false);
			result.put("question", "If " + result.get("name").toString() + " started " + result.get("task").toString() + " at " + result.get("time1").toString() + " and finished " + result.get("task").toString() + " in " + result.get("amount_hour").toString() + ":" + result.get("amount_minutes").toString() + ", what time did " + result.get("name").toString() + " finish " + result.get("task").toString() + "?\n\n::blank::");
		} else {
			result = mg_get_time_for_number_of_days_between_two_random_dates_in_a_month(1,false);
			result.put("question", "How many days after " + result.get("day1").toString() + " of " + result.get("month1").toString() + " is " + result.get("day2").toString() + " of " + result.get("month2").toString() + "?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_appropriate_time
	@description Define the problem set for Appropriate Time
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_appropriate_time(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_time_for_appropriate_time_amounts_for_tasks(true);
		result.put("question", "How long does it take to " + result.get("task").toString() + "? Select the most appropriate answer.");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_leap_year
	@description Define the problem set for Leap year
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_leap_year(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		result = mg_get_time_for_leap_year(true);
		result.put("question", "Is " + result.get("year").toString() + " a leap year?");

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_time_units
	@description Define the problem set for MG_BLL_Time
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_time_units(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_time_for_days_in_a_week(false);
			result.put("question", "How many days are there in " + result.get("number").toString() + " weeks?");
		} else if(type == 3) {
			result = mg_get_time_for_number_of_days_in_a_particular_month(false);
			result.put("question", "How many days are there in " + result.get("month").toString() + "?");
		} else if(type == 4) {
			result = mg_get_time_for_number_of_hours_in_particular_number_of_days(false);
			result.put("question", "How many hours are there in " + result.get("number").toString() + " day(s)?");
		} else if(type == 5) {
			result = mg_get_time_for_number_of_minutes_in_particular_number_of_hours(false);
			result.put("question", "How many minutes are there in " + result.get("number").toString() + " hour(s)?");
		} else if(type == 6) {
			result = mg_get_time_for_number_of_seconds_in_particular_number_of_minutes(false);
			result.put("question", "How many seconds are there in " + result.get("number").toString() + " minute(s)?");
		} else {
			result = mg_get_time_for_days_in_a_year(false);
			result.put("question", "How many days are there in " + result.get("number").toString() + " " + result.get("year").toString() + "?");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_converting_time
	@description Define the problem set for Converting time
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_converting_time(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_time_for_converting_24_hour_format_to_12_hour_format(false);
			result.put("question", "Write " + result.get("time").toString() + " as a 12-hour time.");
		} else {
			result = mg_get_time_for_converting_12_hour_format_to_24_hour_format(false);
			result.put("question", "Write " + result.get("time").toString() + " as a 24-hour time.");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
	@name mg_bll_time_add_and_subtract_time_units
	@description Define the problem set for Add and subtract time units
	@param type - Integer - Chooses a type. Values are 1 or 2.
	@return HashMap
	 */                  
	public static Map<String, Object> mg_bll_time_add_and_subtract_time_units(int type) {

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if(type == 2) {
			result = mg_get_time_for_subtracting_hours_and_minutes();
			result.put("question", result.get("hour1").toString() + " hours " + result.get("minute1").toString() + " minutes - " + result.get("hour2").toString() + " hours " + result.get("minute2").toString() + " minutes = ::blank:: hours ::blank:: minutes");
		} else {
			result = mg_get_time_for_adding_hours_and_minutes();
			result.put("question", result.get("hour1").toString() + " hours " + result.get("minute1").toString() + " minutes + " + result.get("hour2").toString() + " hours " + result.get("minute2").toString() + " minutes = ::blank:: hours ::blank:: minutes");
		}

		/**
		 * Return the HashMap
		 */  
		return result;
	}

	/**
 	@name mg_get_addition_of_two_numbers_with_images()
 	@description Gets the problem set data for addition of 2 numbers and displays the result as an image
 	@param level - Integer - Chooses a level. Values are 1 or 2.
 	@param mcq - boolean - Multiple choice options required true / false - default is false                        
 	@return HashMap ( Integer number1, Integer number2, Integer answer, String image, ArrayList mcq_options )
	 */                  
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_images(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 4, random);
			n2 = mg_giveRandomInteger(1, 5 - n1, random);
		} else {
			n1 = mg_giveRandomInteger(1, 9, random);
			n2 = mg_giveRandomInteger(1, 10 - n1, random);
		}

		/**
		 * Performing addition of two numbers
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of first random number, second random number, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Array of images
		 */
		String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Getting the index position of a random image
		 */
		int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

		/**
		 * Selecting a random image
		 */
		String image = images[random_index];
		String imagename = image.concat(".png");
		String imagetitle = image;

		/**
		 * Storing the image name, image title, and image url in the HashMap
		 */
		result.put("image", imagename );
		result.put("image_title", imagetitle );

		/**
		 * Creating the mcq options
		 */
		if (mcq == true) {

			/**
			 * Creating ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */
			mcq_option.add(answer); 

			/**
			 * Creating an Integer array
			 */
			int[] array;

			if(level == 1) {         

				/**
				 * Generating remaining mcq options within a range
				 */
				array = IntStream.rangeClosed(2, 5).toArray();

			} else {

				/**
				 * Generating remaining mcq options within a range
				 */
				array = IntStream.rangeClosed(2, 10).toArray();
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for (int u : array) {
				if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with Integer number1, Integer number2, Integer answer, String image, ArrayList mcq_options
		 */  
		return result;
	}

	/**
	  @name mg_get_addition_of_two_numbers_upto_20()
	  @description Gets the problem set data for addition of 2 numbers upto 20 
	  @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.
	  @param mcq - boolean - Multiple choice options required true / false - default is false                        
	  @return HashMap (first random number, second random number, sum of the 2 random number, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_upto_20(int level, boolean mcq) {

		/**
		 * Declaring variables
		 */
		int n1 = 0, n2 = 0, answer = 0;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first random number and second random number
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 4, random);
			n2 = mg_giveRandomInteger(1, 5 - n1, random);

		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 5, random);
			n2 = mg_giveRandomInteger(1, 5, random);

		} else if(level == 3) {
			n1 = mg_giveRandomInteger(6, 10, random);
			n2 = mg_giveRandomInteger(1, 5, random);

		} else if(level == 4) {
			n1 = mg_giveRandomInteger(6, 10, random);
			n2 = mg_giveRandomInteger(6, 10, random);

		} else {
			n1 = mg_giveRandomInteger(11, 19, random);
			n2 = mg_giveRandomInteger(1, 20 - n1, random);       
		}

		/**
		 * Calculating the answer the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of first random number, second random number, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating an ArrayList 
			 */  
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(2, 5).toArray();	              
			} else if(level == 2){

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(2, 10).toArray();	              	           
			} else if(level == 3){

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(7, 15).toArray();	              	         
			} else {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(12, 20).toArray();	              	        
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option );
		} 

		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random numbers(the answer), ArrayList of mcq options 
		 */
		return result;    
	}

	/**
      @name mg_get_addition_show_related_addition_of_two_numbers()
	  @description Gets the problem set data for addition of 2 numbers 
	  @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.                        
	  @return HashMap (first random number, second random number, sum of the 2 random number)
	 */
	public static Map<String, Object> mg_get_addition_show_related_addition_of_two_numbers(int level) {

		Map<String, Object> result = mg_get_addition_of_two_numbers_upto_20(level, false);
		
		result.put("number1_related", result.get("number2"));
		result.put("number2_related", result.get("number1"));
		result.put("answer_related", result.get("answer"));   
		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random numbers(the answer), ArrayList of mcq options 
		 */
		return result;    
	}

	/**
      @name mg_get_addition_filling_the_missing_number_with_image()
	  @description Gets the problem set data containing the number to be added to another number to get the desired value  
	  @param mcq - boolean - Multiple choice options required true / false - default is false     
	  @return HashMap (first random number, second random number, sum of the 2 random number, image, image_title, image_url, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_filling_the_missing_number_with_image(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, answer;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		n1 = mg_giveRandomInteger(1, 9, random);
		n2 = mg_giveRandomInteger(1, 10 - n1, random);

		/**
		 * Performing addition of two numbers
		 */
		n3 = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(rand1 == 0) {

			/**
			 * Storing the values of first random number, answer, and third number in the HashMap
			 */
			result.put("number1", n1);
			result.put("number2", "::blank::");
			result.put("number3", n3);
			result.put("answer", n2);
			answer = n2;
		} else {

			/**
			 * Storing the values of answer, second random number, and third number in the HashMap
			 */
			result.put("number1", "::blank::");
			result.put("number2", n2);
			result.put("number3", n3);   
			result.put("answer", n1);
			answer = n1;
		}

		/**
		 * Array of images
		 */
		String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Getting the index position of a random image
		 */
		int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

		/**
		 * Selecting a random image
		 */
		String image = images[random_index];
		String imagename = image.concat(".png");
		String imagetitle = image;

		/**
		 * Storing the image name, image title, and image url in the HashMap
		 */
		result.put("image", imagename);
		result.put("image_title", imagetitle);

		/**
		 * Creating the mcq options
		 */
		if (mcq == true) {

			/**
			 * Creating ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an int array
			 */
			int[] array;
			int answer_lower_limit, answer_upper_limit;

			/**
			 * Adding answer as mcq option in ArrayList 
			 */
			mcq_option.add(answer);

			/**
			 * Generating remaining mcq options within a range
			 */
			if(answer - 5 <= 1) {
				answer_lower_limit = 1;
			} else {
				answer_lower_limit = answer - 5;
			}

			answer_upper_limit = answer + 5;

			array = IntStream.rangeClosed(answer_lower_limit, answer_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for (int u : array) {
				if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random number, image, image_title, image_url, ArrayList of mcq options
		 */  
		return result;
	}

	/**
      @name mg_get_addition_filling_the_missing_number_without_image()
	  @description Gets the problem set data containing the number to be added to another number to get the desired value                          
	  @param level - Integer - Chooses a level. Values are 1 or 2 or 3, default is 1
	  @param mcq - boolean - Multiple choice options required true / false - default is false     
	  @return HashMap (first random number, second random number, sum of the 2 random number)
	 */
	public static Map<String, Object> mg_get_addition_filling_the_missing_number_without_image(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, answer;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		if(level == 2) {
			n1 = mg_giveRandomInteger(1, 5, random);
			n2 = mg_giveRandomInteger(1, 5, random);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(6, 10, random);
			n2 = mg_giveRandomInteger(1, 5, random);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger(6, 10, random);
			n2 = mg_giveRandomInteger(6, 10, random);
		} else if(level == 5) {
			n1 = mg_giveRandomInteger(11, 19, random);
			n2 = mg_giveRandomInteger(1, 20 - n1, random);
		} else {
			n1 = mg_giveRandomInteger(1, 4, random);
			n2 = mg_giveRandomInteger(1, 5 - n1, random);
		}


		/**
		 * Performing addition of two numbers
		 */
		n3 = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(rand1 == 0) {

			/**
			 * Storing the values of first random number, answer, and third number in the HashMap
			 */
			result.put("number1", n1);
			result.put("number2", "::blank::");
			result.put("number3", n3);
			result.put("answer", n2);
			answer = n2;
		} else {

			/**
			 * Storing the values of answer, second random number, and third number in the HashMap
			 */
			result.put("number1", "::blank::");
			result.put("number2", n2);
			result.put("number3", n3);   
			result.put("answer", n1);
			answer = n1;
		}

		/**
		 * Creating the mcq options
		 */
		if (mcq == true) {

			/**
			 * Creating ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an int array
			 */
			int[] array;
			int answer_lower_limit, answer_upper_limit;

			/**
			 * Adding answer as mcq option in ArrayList 
			 */
			mcq_option.add(answer);

			/**
			 * Generating remaining mcq options within a range
			 */
			if(answer - 5 <= 1) {
				answer_lower_limit = 1;
			} else {
				answer_lower_limit = answer - 5;
			}

			answer_upper_limit = answer + 5;

			array = IntStream.rangeClosed(answer_lower_limit, answer_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for (int u : array) {
				if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random number, image, image_title, image_url, ArrayList of mcq options
		 */  
		return result;
	}

	/**
     @name mg_get_addition_addition_by_counting_forward_with_number_and_image_counting()
	 @description Gets the problem set data containing the answer, obtained by counting the images and adding that count to a given number                            
	 @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.
	 @param mcq - boolean - Multiple choice options required true / false - default is false
	 @return HashMap (first random number, second random number, sum of the 2 random number(the answer), name of the item, name of the image, title of the image, url of the image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_addition_by_counting_forward_with_number_and_image_counting(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;
		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(5, 15, random);
			n2 = mg_giveRandomInteger(1, 5, random);

		} else {
			n1 = mg_giveRandomInteger(10, 90, random);
			n2 = mg_giveRandomInteger(1, 9, random);
		}

		/**
		 * Calculating the answer
		 */
		answer = n1 + n2;

		/**
		 *  Array of images
		 */
		String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random index for selecting a random image
		 */
		int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

		String image = images[random_index];
		String imagename = image.concat(".png");
		String image_title = image;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Returning the values of n1, n2, answer, name of an item, name of the image, title of the image, url of the image
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);
		result.put("image_title", image_title);
		result.put("image", imagename );

		/**
		 * Creating the mcq options
		 */
		if (mcq == true) {

			/**
			 * Creating ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(level == 1) {			

				if((answer - 5) <= 6) {
					mcq_lower_limit = 6;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 20) {
					mcq_upper_limit = 20;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else {

				if((answer - 5) <= 11) {
					mcq_lower_limit = 11;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 99) {
					mcq_upper_limit = 99;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for (int u : array) {
				if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random number(the answer), name of the item, name of the image, title of the image, url of the image, ArrayList of mcq options
		 */
		return result;
	}

	/**
      @name mg_get_addition_add_2_numbers_using_number_lines()
	  @description Gets the problem set data adding 2 number using number line 
	  @param level - Integer - Chooses a level. Values are 1 or 2, default is 1
	  @param mcq - boolean - Multiple choice options required true / false - default is false     
	  @return HashMap (first random number, second random number, answer, image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_add_2_numbers_using_number_lines(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer, rand1;
		String image;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Array of images
		 */
		String[] images_level1 = {"0_3_7_number_line","1_2_7_number_line", "2_3_7_number_line", "2_5_7_number_line","3_1_7_number_line","3_4_7_number_line", "4_4_7_number_line", "4_5_7_number_line", "5_1_6_number_line", "5_2_6_number_line"};
		String[] images_level2 = {"12_3_7_number_line","23_4_7_number_line","36_4_7_number_line","42_2_7_number_line","55_6_7_number_line","68_3_7_number_line","71_3_7_number_line","84_4_7_number_line","91_1_7_number_line","55_2_7_number_line"};

		/**
		 * Generating first and second random number
		 */
		if(level == 2) {
			rand1 = mg_giveRandomInteger(0, images_level1.length - 1, random);
			String[] temp = images_level1[rand1].split("_");

			n1 = Integer.parseInt(temp[0]);
			n2 = Integer.parseInt(temp[1]);
			answer = n1 + n2;

			image = images_level1[rand1] + ".png";
		} else {
			rand1 = mg_giveRandomInteger(0, images_level2.length - 1, random);
			String[] temp = images_level2[rand1].split("_");

			n1 = Integer.parseInt(temp[0]);
			n2 = Integer.parseInt(temp[1]);
			answer = n1 + n2;

			image = images_level2[rand1] + ".png";
		}

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the image name, image title, and image url in the HashMap
		 */
		result.put("image", image);

		/**
		 * Creating the mcq options
		 */
		if (mcq == true) {

			/**
			 * Creating ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an int array
			 */
			int[] array;
			int answer_lower_limit, answer_upper_limit;

			/**
			 * Adding answer as mcq option in ArrayList 
			 */
			mcq_option.add(answer);

			/**
			 * Generating remaining mcq options within a range
			 */
			if(answer - 5 < 1) {
				answer_lower_limit = 1;
			} else {
				answer_lower_limit = answer - 5;
			}

			answer_upper_limit = answer + 5;

			array = IntStream.rangeClosed(answer_lower_limit, answer_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for (int u : array) {
				if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random number, image, image_title, image_url, ArrayList of mcq options
		 */  
		return result;
	}

	/**
	@name mg_get_addition_of_a_number_with_adding_zero()
	@description Gets the problem set data for addition of 2 numbers with one number whose default value is 0 
	@param level - int - Chooses a level.Values are 1 or 2.                        
	@param mcq - boolean - Multiple choice options required true / false - default is false
	@return HashMap (first random number, second random number, sum of the 2 random number(the answer), ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_of_a_number_with_adding_zero(int level, boolean mcq) {

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;

		/**
		 * Generating a random number for making either n1 or n2 equal to zero
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(level == 1) {
			if(rand1 == 0){             				/** first random number becomes equal to zero */
				n1 = 0;
				n2 = mg_giveRandomInteger(1, 9, random);
			} else {									/** second random number becomes equal to zero */	
				n1 = mg_giveRandomInteger(1, 9, random);  
				n2 = 0;
			}
		} else {
			if(rand1 == 0){             				/** first random number becomes equal to zero */
				n1 = 0;
				n2 = mg_giveRandomInteger(10, 99, random);
			} else {									/** second random number becomes equal to zero */	
				n1 = mg_giveRandomInteger(10, 99, random);  
				n2 = 0;
			}
		}

		/**
		 * Calculating the answer
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */
		if (mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 1) {
				mcq_lower_limit = 1;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			mcq_upper_limit = answer + 5;

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for (int u : array) {
				if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random number(the answer), ArrayList of mcq options
		 */    
		return result;
	}

	/**
    @name mg_get_addition_of_two_numbers_with_adding_tens()
    @description Gets the problem set data for addition of 2 numbers
    @param mcq - boolean - Multiple choice options required true / false - default is false                            
    @return HashMap (first random number, second random number, answer, ArrayList of mcq options)
	 */ 
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_tens(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		n1 = mg_giveRandomInteger(1, 50, random);
		n2 = 10 * mg_giveRandomInteger(1, 5, random);

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */
		if (mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 11) {
				mcq_lower_limit = 11;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 100) {
				mcq_upper_limit = 100;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for (int u : array) {
				if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the remaining mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer in terms of units, number of tens in the answer, number of units in the answer
		 */                     
		return result;
	}

	/**
    @name mg_get_addition_of_two_numbers_with_converting_units_into_tens()
    @description Gets the problem set data for addition of 2 numbers                            
    @return HashMap (first random number, second random number, answer in terms of units, number of tens in the answer, number of units in the answer)
	 */ 
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_converting_units_into_tens() {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4, n5;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		n1 = mg_giveRandomInteger(1, 30, random);
		n2 = mg_giveRandomInteger(1, 30, random);

		/**
		 * Calculating the result
		 */
		n3 = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2 and n3 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", n3);

		/**
		 * Calculating the number of tens and units in the answer
		 */
		n4 = n3 / 10;
		n5 = n3 % 10;

		/**
		 * Storing the values of n4 and n5 in the HashMap
		 */
		result.put("tens", n4);
		result.put("units", n5);

		/**
		 * Return the HashMap with first random number, second random number, answer in terms of units, number of tens in the answer, number of units in the answer
		 */                     
		return result;
	}

	/**
	     @name mg_get_addition_of_two_numbers_with_converting_tens_into_units()
	     @description Gets the problem set data for addition of 2 numbers in terms of units                            
	     @return HashMap (first random number, second random number, answer in terms of units)
	 */ 
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_converting_tens_into_units() {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		n1 = mg_giveRandomInteger(1, 5, random);
		n2 = mg_giveRandomInteger(1, 50, random);

		/**
		 * Calculating the result
		 */
		answer = (10 * n1) + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Return the HashMap with first random number, second random number, answer in terms of units
		 */                     
		return result;
	}

	/**
	    @name mg_get_addition_of_two_numbers_with_converting_units_and_tens()
	    @description Gets the problem set data for addition of 2 numbers and returns the number of tens and units in the answer                            
	    @return HashMap (first random number, second random number, answer in terms of tens, number of hundreds in the answer, number of tens in the answer)
	 */ 
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_converting_units_and_tens() {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		n1 = mg_giveRandomInteger(1, 8, random);
		n2 = mg_giveRandomInteger(10, 100 - (n1 * 10), random);

		/**
		 * Calculating the result
		 */
		int temp = (10 * n1) + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1 and n2 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);

		/**
		 * Calculating the number of tens and units
		 */
		n3 = temp / 10;
		n4 = temp % 10;

		/**
		 * Generating a random number for making either n3 or n4 blank
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		/**
		 * Storing the values of n3 and n4 in the HashMap
		 */
		if(rand1 == 0) {                    /** n3 will be the input field */
			result.put("answer", n3);
			result.put("units", n4);
			result.put("tens", "::blank::");
		} else {
			result.put("tens", n3);			/** n4 will be the input field */
			result.put("answer", n4);
			result.put("units", "::blank::");
		}

		/**
		 * Return the HashMap with first random number, second random number, number of tens in the answer, number of units in the answer
		 */                     
		return result;
	}

	/**
	    @name mg_get_addition_of_two_numbers_with_converting_tens_into_hundreds()
	    @description Gets the problem set data for addition of 2 numbers in tens and return the result in terms of hundreds                             
	    @return HashMap (first random number, second random number, answer in terms of tens, number of hundreds in the answer, number of tens in the answer)
	 */ 
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_converting_tens_into_hundreds() {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4, n5;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first, and second random number
		 */
		n1 = mg_giveRandomInteger(1, 30, random);
		n2 = mg_giveRandomInteger(1, 30, random);

		/**
		 * Calculating the result
		 */
		n3 = (10 * n1) + (10 * n2);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and n3 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);

		/**
		 * Calculating the number of hundreds and tens
		 */
		n4 = n3 / 100;
		int temp = n3 % 100;
		n5 = temp / 10;

		/**
		 * Storing the values of n4 and n5 in the HashMap
		 */
		if(mg_giveRandomInteger(0, 1, random) == 1) {
			result.put("number3", "::blank::");
			result.put("number4", n4);
			result.put("number5", n5);
			result.put("answer", n3);
		} else {
			if(mg_giveRandomInteger(0, 1, random) == 1) {
				result.put("number3", n3);
				result.put("number4", "::blank::");
				result.put("number5", n5);
				result.put("answer", n4);
			} else {
				result.put("number3", n3);
				result.put("number4", n4);
				result.put("number5", "::blank::");
				result.put("answer", n5);
			}
		}


		/**
		 * Return the HashMap with first random number, second random number, answer in terms of tens, number of hundreds in the answer, number of tens in the answer
		 */                     
		return result;
	}

	/**
	    @name mg_get_addition_of_two_numbers_with_converting_hundreds_into_tens()
	    @description Gets the problem set data for addition of 2 numbers in terms of tens                             
	    @return HashMap (first random number, second random number, answer)
	 */ 
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_converting_hundreds_into_tens() {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		n1 = mg_giveRandomInteger(1, 5, random);
		n2 = mg_giveRandomInteger(1, 50, random);

		/**
		 * Calculating the result
		 */
		answer = (100 * n1) + (10 * n2);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Return the HashMap with first random number, second random number, answer
		 */                     
		return result;
	}

	/**
	    @name mg_get_addition_of_two_numbers_with_converting_tens_and_hundreds()
	    @description Gets the problem set data for addition of 2 numbers                             
	    @return HashMap (first random number, second random number, number of hundreds, number of tens)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_converting_tens_and_hundreds() {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		n1 = mg_giveRandomInteger(1, 8, random);
		n2 = mg_giveRandomInteger(10, 100 - ((n1) * 10), random);

		/**
		 * Calculating the result
		 */
		int temp = (100 * n1) + (10 * n2);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1 and n2 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);

		/**
		 * Calculating the number of hundreds and tens
		 */
		n3 = temp / 100;
		int temp1 = temp % 100;
		n4= temp1/10;

		int rand1 = mg_giveRandomInteger(0, 1, random);

		/**
		 * Storing the values of n3 and n4 in the HashMap
		 */
		if(rand1 == 0) {
			result.put("answer", n3);
			result.put("tens", n4);
			result.put("hundreds", "::blank::");
		} else {
			result.put("answer", n4);
			result.put("tens", "::blank::");
			result.put("hundreds", n3);
		}

		/**
		 * Return the HashMap with first random number, second random number, number of hundreds, number of tens
		 */                        
		return result;    
	}

	/**
	    @name mg_get_addition_of_two_numbers_with_adding_one_digit_to_two_digits()
	    @description Gets the problem set data for addition of 2 numbers, one of which is a 2-digits number and other is a 1-digit number                             
	    @param mcq - boolean - Multiple choice options required true / false - default is false
	    @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_one_digit_to_two_digits( boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int t1, u1, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating tens digit for the first number
		 */
		t1 = mg_giveRandomInteger(1, 9, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 8, random);
		u2 = mg_giveRandomInteger(1, 9 - u1, random);

		/**
		 * Generating first and second random number
		 */
		if(mg_giveRandomInteger(0, 1, random) == 1) {
			n1 = ((t1) * 10) + u1;
			n2 = u2;
		} else {
			n2 = ((t1) * 10) + u1;
			n1 = u2;
		}

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_tens", answer/10);
	      result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 11) {
				mcq_lower_limit = 11;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 99) {
				mcq_upper_limit = 99;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                        
		return result;    
	}

	/**
	   @name mg_get_addition_of_two_numbers_with_adding_two_digits_to_two_digits()
	   @description Gets the problem set data for addition of 2 numbers, both of which are of 2-digits                             
	   @param mcq - boolean - Multiple choice options required true / false - default is false
	   @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_two_digits_to_two_digits(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int t1, t2, u1, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating tens digit for the first and second number
		 */
		t1 = mg_giveRandomInteger(1, 8, random);
		t2 = mg_giveRandomInteger(1, 9 - t1, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 8, random);
		u2 = mg_giveRandomInteger(1, 9 - u1, random);

		/**
		 * Generating first and second random number
		 */
		n1 = ((t1) * 10) + u1;
		n2 = ((t2) * 10) + u2;

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_tens", answer/10);
	      result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 22) {
				mcq_lower_limit = 22;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 99) {
				mcq_upper_limit = 99;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                        
		return result;    
	}

	/**
	   @name mg_get_addition_of_two_numbers_with_adding_one_digit_to_three_digits()
	   @description Gets the problem set data for addition of 2 numbers, one of which is a 3-digits number and other is a 1-digit number                            
	   @param mcq - boolean - Multiple choice options required true / false - default is false
	   @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_one_digit_to_three_digits( boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1, t1, u1, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating hundreds digit for the first number
		 */
		h1 = mg_giveRandomInteger(1, 9, random);

		/**
		 * Generating tens digit for the first number
		 */
		t1 = mg_giveRandomInteger(1, 9, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 8, random);
		u2 = mg_giveRandomInteger(1, 9 - u1, random);

		/**
		 * Generating first and second random number
		 */
		if(mg_giveRandomInteger(1, 8, random) == 1) {
			n1 = ((h1) * 100) + ((t1) * 10) + u1;
			n2 = u2;
		} else {
			n2 = ((h1) * 100) + ((t1) * 10) + u1;
			n1 = u2;
		}	

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_hundreds", answer/100);
	        result.put("answer_tens", answer/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 112) {
				mcq_lower_limit = 112;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 999) {
				mcq_upper_limit = 999;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                        
		return result;    
	}

	/**
	     @name mg_get_addition_of_two_numbers_with_adding_two_digits_to_three_digits()
		 @description Gets the problem set data for addition of 2 numbers, one of which is 3-digits number and other is 1-digit number                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_two_digits_to_three_digits(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1, t1, u1, t2, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating hundreds digit for the first number
		 */
		h1 = mg_giveRandomInteger(1, 9, random);

		/**
		 * Generating tens digit for the first and second number
		 */
		t1 = mg_giveRandomInteger(1, 8, random);
		t2 = mg_giveRandomInteger(1, 9 - t1, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 8, random);
		u2 = mg_giveRandomInteger(1, 9 - u1, random);

		/**
		 * Generating first and second random number
		 */
		if(mg_giveRandomInteger(0, 1, random) == 1) {
			n1 = ((h1) * 100) + ((t1) * 10) + u1;
			n2 = ((t2) * 10)  + u2;
		} else {
			n2 = ((h1) * 100) + ((t1) * 10) + u1;
			n1 = ((t2) * 10)  + u2;
		}	

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_hundreds", answer/100);
	        result.put("answer_tens", answer/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 122) {
				mcq_lower_limit = 122;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 999) {
				mcq_upper_limit = 999;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                        
		return result;    
	}

	/**
	     @name mg_get_addition_of_two_numbers_with_adding_three_digits_to_three_digits()
		 @description Gets the problem set data for addition of 2 numbers, both of which are of 3-digits                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_three_digits_to_three_digits(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1, t1, u1, h2, t2, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating hundreds digit for the first and second number
		 */
		h1 = mg_giveRandomInteger(1, 8, random);
		h2 = mg_giveRandomInteger(1, 9 - h1, random);

		/**
		 * Generating tens digit for the first and second number
		 */
		t1 = mg_giveRandomInteger(1, 8, random);
		t2 = mg_giveRandomInteger(1, 9 - t1, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 8, random);
		u2 = mg_giveRandomInteger(1, 9 - u1, random);

		/**
		 * Generating first and second random number
		 */
		n1 = ((h1) * 100) + ((t1) * 10 ) + u1;
		n2 = ((h2) * 100) + ((t2) * 10)  + u2;

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_hundreds", answer/100);
	        result.put("answer_tens", answer/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 222) {
				mcq_lower_limit = 222;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 999) {
				mcq_upper_limit = 999;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                         
		return result;    
	}

	/**
     @name mg_get_addition_of_two_numbers_with_adding_four_digits_to_four_digits()
	 @description Gets the problem set data for addition of 2 numbers, both of which are of 4-digits                            
	 @param mcq - boolean - Multiple choice options required true / false - default is false
	 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_four_digits_to_four_digits(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int th1, th2, h1, t1, u1, h2, t2, u2, n1, n2, answer;
	
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();
	
		/**
		 * Generating thousands digit for the first and second number
		 */
		th1 = mg_giveRandomInteger(0, 8, random);
		th2 = mg_giveRandomInteger(0, 9 - th1, random);
		
		/**
		 * Generating hundreds digit for the first and second number
		 */
		h1 = mg_giveRandomInteger(0, 8, random);
		h2 = mg_giveRandomInteger(0, 9 - h1, random);
	
		/**
		 * Generating tens digit for the first and second number
		 */
		t1 = mg_giveRandomInteger(0, 8, random);
		t2 = mg_giveRandomInteger(0, 9 - t1, random);
	
		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(0, 8, random);
		u2 = mg_giveRandomInteger(0, 9 - u1, random);
	
		/**
		 * Generating first and second random number
		 */
		n1 = ((th1) * 1000) + ((h1) * 100) + ((t1) * 10) + u1;
		n2 = ((th2) * 1000) + ((h2) * 100) + ((t2) * 10)  + u2;
	
		/**
		 * Calculating the result
		 */
		answer = n1 + n2;
	
		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();
	
		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);
	
		/**result.put("answer_thousands", answer/1000);
		   result.put("answer_hundreds", answer/100);
	       result.put("answer_tens", answer/10);
	       result.put("answer_units", answer%10);*/
	
		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {
	
			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 
	
			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);
	
			/**
			 * Creating an int array
			 */
			int[] array = {0};
	
			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
	
			if((answer - 5) <= 0) {
				mcq_lower_limit = 0;  
			} else {
				mcq_lower_limit = answer - 5;
			}
	
			if((answer + 5) >= 9999) {
				mcq_upper_limit = 9999;  
			} else {
				mcq_upper_limit = answer + 5;
			}
	
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
	
			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 
	
			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}
	
			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);
	
			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

	/**
	 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
	 */                         
	return result;    
}

	/**
	     @name mg_get_addition_of_two_numbers_with_one_digit_and_two_digits_with_carrying_over()
		 @description Gets the problem set data for addition of 2 numbers, one of which is a 2-digits number and other is a 1-digit number                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_one_digit_and_two_digits_with_carrying_over(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int t1, u1, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating tens digit for the first number
		 */
		t1 = mg_giveRandomInteger(1, 8, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 9, random);
		u2 = mg_giveRandomInteger(10 - u1, 9, random);

		if(mg_giveRandomInteger(0, 1, random) == 1){

			/**
			 * Making first operand a 2-digits number
			 */
			n1 = ((t1) * 10) + u1;

			/**
			 * Making second operand a 1-digit number
			 */
			n2 = u2;

		} else {

			/**
			 * Making second operand a 2-digits number
			 */
			n2 = ((t1) * 10) + u1;

			/**
			 * Making first operand a 1-digit number
			 */
			n1 = u2;
		}

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_tens", answer/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 20) {
				mcq_lower_limit = 20;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 98) {
				mcq_upper_limit = 98;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                         
		return result;    
	}

	/**
	     @name mg_get_addition_of_two_numbers_with_two_digits_with_carrying_over()
		 @description Gets the problem set data for addition of 2 numbers, both of which are of 2-digits                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_two_digits_with_carrying_over(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int t1, t2, u1, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating tens digit for the first and second number
		 */
		t1 = mg_giveRandomInteger(1, 7, random);
		t2 = mg_giveRandomInteger(1, 8 - t1, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 9, random);
		u2 = mg_giveRandomInteger(10 - u1, 9, random);

		/**
		 * Generating first and second random number 
		 */        
		n1 = ((t1) * 10) + u1;
		n2 = ((t2) * 10) + u2;

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_tens", answer/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 30) {
				mcq_lower_limit = 30;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 98) {
				mcq_upper_limit = 98;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                             
		return result;             
	}

	/**
	     @name mg_get_addition_of_two_numbers_with_one_digit_and_three_digits_with_carrying_over()
		 @description Gets the problem set data for addition of 2 numbers, one of which is a 3-digits number and the other is a 1-digit number                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_one_digit_and_three_digits_with_carrying_over(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1, t1, u1, u2, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating hundreds digit for the first number
		 */
		h1 = mg_giveRandomInteger(1, 8, random);

		/**
		 * Generating tens digit for the first and second number
		 */
		t1 = mg_giveRandomInteger(1, 9, random);

		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 9, random);
		u2 = mg_giveRandomInteger(10 - u1, 9, random);

		if(mg_giveRandomInteger(0, 1, random) == 1) {

			/**
			 * Making first operand a 3-digits number
			 */
			n1 = ((h1) * 100) + ((t1) * 10) + u1;

			/**
			 * Making second operand a 1-digit number
			 */
			n2 = u2;

		} else {

			/**
			 * Making second operand a 3-digits number
			 */
			n2 = ((h1) * 100) + ((t1) * 10) + u1;

			/**
			 * Making first operand a 1-digit number
			 */
			n1 = u2;    
		}

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_hundreds", answer/100);
	        result.put("answer_tens", (answer%100)/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 120) {
				mcq_lower_limit = 120;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 908) {
				mcq_upper_limit = 908;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                             
		return result;    
	}

	/**
	     @name mg_get_addition_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over()
		 @description Gets the problem set data for addition of 2 numbers, one of which is a 3-digits number and the other is a 2-digits number                            
		 @param level - int - Chooses a level. Values are 1, 2 or 3. 
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1 = 0, t1 = 0, u1 = 0, t2 = 0, u2 = 0, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		if(level == 1) {

			/**
			 * Generating hundreds digit for the first number
			 */
			h1 = mg_giveRandomInteger(1, 9, random);

			/**
			 * Generating tens digit for the first and second number
			 */
			t1 = mg_giveRandomInteger(1, 7, random);
			t2 = mg_giveRandomInteger(1, 8 - t1, random);

			/**
			 * Generating units digit for the first and second number
			 */
			u1 = mg_giveRandomInteger(1, 9, random);
			u2 = mg_giveRandomInteger(10 - u1, 9, random);

		} else if(level == 2) {

			/**
			 * Generating hundreds digit for the first number
			 */
			h1 = mg_giveRandomInteger(1, 8, random);

			/**
			 * Generating tens digit for the first and second number
			 */
			t1 = mg_giveRandomInteger(1, 9, random);
			t2 = mg_giveRandomInteger(10 - t1, 9, random);

			/**
			 * Generating units digit for the first and second number
			 */
			u1 = mg_giveRandomInteger(1, 8, random);
			u2 = mg_giveRandomInteger(1, 9 - u1, random);

		} else {

			/**
			 * Generating hundreds digit for the first number
			 */
			h1 = mg_giveRandomInteger(1, 8, random);

			/**
			 * Generating tens digit for the first and second number
			 */
			t1 = mg_giveRandomInteger(1, 9, random);
			t2 = mg_giveRandomInteger(9 - t1, 9, random);

			/**
			 * Generating units digit for the first and second number
			 */
			u1 = mg_giveRandomInteger(1, 9, random);
			u2 = mg_giveRandomInteger(10 - u1, 9, random);
		}

		if(mg_giveRandomInteger(0, 1, random) == 1) {

			/**
			 * Making first operand a 3-digits number
			 */
			n1 = ((h1) * 100) + ((t1) * 10) + u1;

			/**
			 * Making second operand a 2-digits number
			 */
			n2 = ((t2) * 10) + u2;

		} else {

			/**
			 * Making second operand a 3-digits number
			 */
			n2 = ((h1) * 100) + ((t1) * 10) + u1;

			/**
			 * Making first operand a 2-digits number
			 */
			n1 = ((t2) * 10) + u2;    
		}

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_hundreds", answer/100);
	        result.put("answer_tens", (answer%100)/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if(level == 1) {

				if((answer - 5) <= 130) {
					mcq_lower_limit = 130;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 998) {
					mcq_upper_limit = 998;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level ==2) {

				if((answer - 5) <= 202) {
					mcq_lower_limit = 202;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 989) {
					mcq_upper_limit = 989;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else {

				if((answer - 5) <= 200) {
					mcq_lower_limit = 200;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 998) {
					mcq_upper_limit = 998;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                               
		return result;    
	}

	/**
	     @name mg_get_addition_of_two_numbers_with_three_digits_with_carrying_over()
		 @description Gets the problem set data for addition of 2 numbers, both of which are of 3-digits                            
		 @param level - int - Chooses a level. Values are 1, 2 or 3. 
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_three_digits_with_carrying_over(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1 = 0, t1 = 0, u1 = 0, h2 = 0, t2 = 0, u2 = 0, n1, n2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		if(level == 1) {

			/**
			 * Generating hundreds digit for the first and second number
			 */
			h1 = mg_giveRandomInteger(1, 8, random);
			h2 = mg_giveRandomInteger(1, 9 - h1, random);

			/**
			 * Generating tens digit for the first and second number
			 */
			t1 = mg_giveRandomInteger(1, 7, random);
			t2 = mg_giveRandomInteger(1, 8 - t1, random);

			/**
			 * Generating units digit for the first and second number
			 */
			u1 = mg_giveRandomInteger(1, 9, random);
			u2 = mg_giveRandomInteger(10 - u1, 9, random);

		} else if(level == 2) {

			/**
			 * Generating hundreds digit for the first and second number
			 */
			h1 = mg_giveRandomInteger(1, 7, random);
			h2 = mg_giveRandomInteger(1, 8 - h1, random);

			/**
			 * Generating tens digit for the first and second number
			 */
			t1 = mg_giveRandomInteger(1, 9, random);
			t2 = mg_giveRandomInteger(10 - t1, 9, random);

			/**
			 * Generating units digit for the first and second number
			 */
			u1 = mg_giveRandomInteger(1, 8, random);
			u2 = mg_giveRandomInteger(1, 9 - u1, random);

		} else {

			/**
			 * Generating hundreds digit for the first and second number
			 */
			h1 = mg_giveRandomInteger(1, 7, random);
			h2 = mg_giveRandomInteger(1, 8 - h1, random);

			/**
			 * Generating tens digit for the first and second number
			 */
			t1 = mg_giveRandomInteger(1, 9, random);
			t2 = mg_giveRandomInteger(9 - t1, 9, random);

			/**
			 * Generating units digit for the first and second number
			 */
			u1 = mg_giveRandomInteger(1, 9, random);
			u2 = mg_giveRandomInteger(10 - u1, 9, random);
		}

		/**
		 * Generating first, second, and third random number 
		 */
		n1 = ((h1) * 100) + ((t1) * 10) + u1;
		n2 = ((h2) * 100) + ((t2) * 10) + u2;

		/**
		 * Calculating the result
		 */
		answer = n1 + n2;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**result.put("answer_hundreds", answer/100);
	        result.put("answer_tens", (answer%100)/10);
	        result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if(level == 1) {

				if((answer - 5) <= 230) {
					mcq_lower_limit = 230;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 998) {
					mcq_upper_limit = 998;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level ==2) {

				if((answer - 5) <= 302) {
					mcq_lower_limit = 302;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 989) {
					mcq_upper_limit = 989;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else {

				if((answer - 5) <= 300) {
					mcq_lower_limit = 300;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 998) {
					mcq_upper_limit = 998;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
		 */                       
		return result;    
	}

	/**
     @name mg_get_addition_of_two_numbers_with_adding_four_digits_to_four_digits_with_carrying_over()
	 @description Gets the problem set data for addition of 2 numbers, both of which are of 4-digits                            
	 @param mcq - boolean - Multiple choice options required true / false - default is false
	 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_two_numbers_with_adding_four_digits_to_four_digits_with_carrying_over(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int th1, th2, h1, t1, u1, h2, t2, u2, n1, n2, answer;
	
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();
	
		/**
		 * Generating thousands digit for the first and second number
		 */
		th1 = mg_giveRandomInteger(1, 7, random);
		th2 = mg_giveRandomInteger(1, 8 - th1, random);
		
		/**
		 * Generating hundreds digit for the first and second number
		 */
		h1 = mg_giveRandomInteger(1, 9, random);
		h2 = mg_giveRandomInteger(9 - h1, 9, random);
	
		/**
		 * Generating tens digit for the first and second number
		 */
		t1 = mg_giveRandomInteger(1, 9, random);
		t2 = mg_giveRandomInteger(9 - t1, 9, random);
	
		/**
		 * Generating units digit for the first and second number
		 */
		u1 = mg_giveRandomInteger(1, 9, random);
		u2 = mg_giveRandomInteger(10 - u1, 9, random);
	
		/**
		 * Generating first and second random number
		 */
		n1 = ((th1) * 1000) + ((h1) * 100) + ((t1) * 10) + u1;
		n2 = ((th2) * 1000) + ((h2) * 100) + ((t2) * 10)  + u2;
	
		/**
		 * Calculating the result
		 */
		answer = n1 + n2;
	
		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();
	
		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);
	
		/**result.put("answer_thousands", answer/1000);
		   result.put("answer_hundreds", answer/100);
	       result.put("answer_tens", answer/10);
	       result.put("answer_units", answer%10);*/
	
		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {
	
			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 
	
			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);
	
			/**
			 * Creating an int array
			 */
			int[] array = {0};
	
			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
	
			if((answer - 5) <= 3000) {
				mcq_lower_limit = 3000;  
			} else {
				mcq_lower_limit = answer - 5;
			}
	
			if((answer + 5) >= 9998) {
				mcq_upper_limit = 9998;  
			} else {
				mcq_upper_limit = answer + 5;
			}
	
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
	
			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 
	
			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}
	
			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);
	
			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

	/**
	 * Return the HashMap with first random number, second random number, answer, ArrayList of mcq options
	 */                         
	return result;    
}

	/**
	     @name mg_get_addition_of_three_numbers_with_two_digits_without_carrying_over()
		 @description Gets the problem set data for addition of 2 numbers, both of which are of 3-digits                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_three_numbers_with_two_digits_without_carrying_over(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int t1, u1, t2, u2, t3, u3, n1, n2, n3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating tens digit for the first, second, and third number
		 */
		t1 = mg_giveRandomInteger(0, 7, random);
		t2 = mg_giveRandomInteger(0, 8 - t1, random);
		t3 = mg_giveRandomInteger(0, 9 - (t1 + t2), random);

		/**
		 * Generating units digit for the first, second, and third number
		 */
		u1 = mg_giveRandomInteger(0, 7, random);
		u2 = mg_giveRandomInteger(0, 8 - u1, random);
		u3 = mg_giveRandomInteger(0, 9 - (u1 + u2), random);

		/**
		 * Generating first, second, and third random number 
		 */
		n1 = ((t1) * 10) + u1;
		n2 = ((t2) * 10) + u2;
		n3 = ((t3) * 10) + u3;

		/**
		 * Calculating the result
		 */
		answer = n1 + n2 + n3;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("answer", answer); 

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 0) {
				mcq_lower_limit = 0;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 99) {
				mcq_upper_limit = 99;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, third random number, answer, ArrayList of mcq options
		 */                           
		return result;    
	}

	/**
	     @name mg_get_addition_of_three_numbers_with_three_digits_without_carrying_over()
		 @description Gets the problem set data for addition of 2 numbers, both of which are of 3-digits                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_three_numbers_with_three_digits_without_carrying_over(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1, t1, u1, h2, t2, u2, h3, t3, u3, n1, n2, n3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating hundreds digit for the first, second, third, and fourth number
		 */
		h1 = mg_giveRandomInteger(0, 7, random);
		h2 = mg_giveRandomInteger(0, 8 - h1, random);
		h3 = mg_giveRandomInteger(0, 9 - (h1 + h2), random);

		/**
		 * Generating tens digit for the first, second, and third number
		 */
		t1 = mg_giveRandomInteger(0, 7, random);
		t2 = mg_giveRandomInteger(0, 8 - t1, random);
		t3 = mg_giveRandomInteger(0, 9 - (t1 + t2), random);

		/**
		 * Generating units digit for the first, second, and third number
		 */
		u1 = mg_giveRandomInteger(0, 7, random);
		u2 = mg_giveRandomInteger(0, 8 - u1, random);
		u3 = mg_giveRandomInteger(0, 9 - (u1 + u2), random);

		/**
		 * Generating first, second, and third random number 
		 */
		n1 = ((h1) * 100) + ((t1) * 10) + u1;
		n2 = ((h2) * 100) + ((t2) * 10) + u2;
		n3 = ((h3) * 100) + ((t3) * 10) + u3;

		/**
		 * Calculating the result
		 */
		answer = n1 + n2 + n3;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("answer", answer); 

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 0) {
				mcq_lower_limit = 0;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 999) {
				mcq_upper_limit = 999;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, third random number, answer, ArrayList of mcq options
		 */    
		return result;    
	}

	/**
	     @name mg_get_addition_of_three_numbers_with_four_digits_without_carrying_over()
		 @description Gets the problem set data for addition of 4 numbers, all 4 of which are of 4-digits                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, fourth random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_three_numbers_with_four_digits_without_carrying_over(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int th1, h1, t1, u1, th2, h2, t2, u2, th3, h3, t3, u3, n1, n2, n3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating thousands digit for the first, second, third, and fourth number
		 */
		th1 = mg_giveRandomInteger(0, 7, random);
		th2 = mg_giveRandomInteger(0, 8 - th1, random);
		th3 = mg_giveRandomInteger(0, 9 - (th1 + th2), random);

		/**
		 * Generating hundreds digit for the first, second, third, and fourth number
		 */
		h1 = mg_giveRandomInteger(0, 7, random);
		h2 = mg_giveRandomInteger(0, 8 - h1, random);
		h3 = mg_giveRandomInteger(0, 9 - (h1 + h2), random);

		/**
		 * Generating tens digit for the first, second, third, and fourth number
		 */
		t1 = mg_giveRandomInteger(0, 7, random);
		t2 = mg_giveRandomInteger(0, 8 - t1, random);
		t3 = mg_giveRandomInteger(0, 9 - (t1 + t2), random);

		/**
		 * Generating units digit for the first, second, third, and fourth number
		 */
		u1 = mg_giveRandomInteger(0, 7, random);
		u2 = mg_giveRandomInteger(0, 8 - u1, random);
		u3 = mg_giveRandomInteger(0, 9 - (u1 + u2), random);        

		/**
		 * Generating first, second, third, and fourth random number 
		 */
		n1 = ((th1) * 1000) + ((h1) * 100) + ((t1) * 10) + u1;
		n2 = ((th2) * 1000) + ((h2) * 100) + ((t2) * 10) + u2;
		n3 = ((th3) * 1000) + ((h3) * 100) + ((t3) * 10) + u3;

		/**
		 * Calculating the result
		 */
		answer = n1 + n2 + n3;

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, n4, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("answer", answer); 

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 0) {
				mcq_lower_limit = 0;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 9999) {
				mcq_upper_limit = 9999;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, third random number, fourth random number, answer, ArrayList of mcq options
		 */
		return result;    
	}

	/**
	     @name mg_get_addition_horizontal_addition_of_two_numbers()
		 @description Gets the problem set data for addition of 2 numbers    
		 @param level - int - Chooses a level. Values are 1, 2, or 3.                        
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_horizontal_addition_of_two_numbers(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, answer = 0;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random number
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 900, random);
			n2 = mg_giveRandomInteger(1, 999 - n1, random);

		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 9000, random);
			n2 = mg_giveRandomInteger(1, 9999 - n1, random);

		} else {
			n1 = mg_giveRandomInteger(1, 90000, random);
			n2 = mg_giveRandomInteger(1, 99999 - n1, random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Calculating the answer for addition of 2 numbers
		 */
		answer = n1 + n2;

		/**
		 * Storing the value of n1, n2, and answer in the  HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/** 
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>();

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;			

			if (level == 1){
				if((answer - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 999) {
					mcq_upper_limit = 999;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 2){	
				if((answer - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 9999) {
					mcq_upper_limit = 9999;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else {
				if((answer - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 99999) {
					mcq_upper_limit = 99999;  
				} else {
					mcq_upper_limit = answer + 5;
				}              
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, sum of the 2 random numbers(the answer), ArrayList of mcq options
		 */
		return result;          
	}

	/**
	     @name mg_get_addition_horizontal_addition_of_three_numbers()
		 @description Gets the problem set data for addition of 3 numbers    
		 @param level - int - Chooses a level. Values are 1, 2, or 3.                        
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_horizontal_addition_of_three_numbers(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, answer = 0;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first, second, and third random number
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 800, random);
			n2 = mg_giveRandomInteger(1, 900 - n1, random);
			n3 = mg_giveRandomInteger(1, 999 - (n1 + n2) , random);

		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 8000, random);
			n2 = mg_giveRandomInteger(1, 9000 - n1, random);
			n3 = mg_giveRandomInteger(1, 9999 - (n1 + n2) , random);

		} else {
			n1 = mg_giveRandomInteger(1, 80000, random);
			n2 = mg_giveRandomInteger(1, 90000 - n1, random);
			n3 = mg_giveRandomInteger(1, 99999 - (n1 + n2) , random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Calculating the answer for addition of 3 numbers
		 */
		answer = n1 + n2 + n3;

		/**
		 * Storing the values of n1, n2, n3, and answer in the  HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/** 
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>();

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;			

			if (level == 1){

				if((answer - 5) <= 3) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 999) {
					mcq_upper_limit = 999;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 2){

				if((answer - 5) <= 3) {
					mcq_lower_limit = 3;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 9999) {
					mcq_upper_limit = 9999;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else {

				if((answer - 5) <= 3) {
					mcq_lower_limit = 3;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 99999) {
					mcq_upper_limit = 99999;  
				} else {
					mcq_upper_limit = answer + 5;
				}        		
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, third random number, sum of the 2 or 3 random number(the answer), ArrayList of mcq options
		 */
		return result;          
	}

	/**
     @name mg_get_addition_vertical_addition_upto_three_digits()
	 @description Gets the problem set data for addition of 3 numbers                            
	 @return HashMap (first random number, second random number, third random number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_vertical_addition_upto_three_digits() {


		Map<String, Object> result = mg_get_addition_horizontal_addition_of_three_numbers(1, true);

		/**
		 * Return the HashMap with first random number, second random number, third random number, sum of 3 random numbers(the answer), ArrayList of mcq options
		 */
		return result;      
	}

	/**
	     @name mg_get_addition_of_four_digit_numbers_upto_four_digits()
		 @description Gets the problem set data for addition of 2 ,3 or 4 numbers    
		 @param level - int - if 1, then addition of 2 numbers will take place. If 2, then addition of 3 numbers will take place and if 3, then addition of 4 numbers will take place                        
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, fourth random number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_of_four_digit_numbers_upto_four_digits(int level, boolean mcq) {

		/**
		 * Declaring the variables 
		 */
		int n1, n2, n3, n4, answer = 0;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first random number, second random number, third random number, and fourth random number 
		 */
		n1 = mg_giveRandomInteger(1, 7000, random);
		n2 = mg_giveRandomInteger(1, 8000 - n1, random);
		n3 = mg_giveRandomInteger(1, 9000 - (n1 + n2) , random);
		n4 = mg_giveRandomInteger(1, 9999 - (n1 + n2 + n3) , random);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if (level == 1) {

			/**
			 * Calculating the answer for addition of two numbers
			 */
			answer = n1 + n2;

		} else if(level == 2){

			/**
			 * Calculating the answer for addition of three numbers
			 */ 
			answer = n1 + n2 + n3;

			/**
			 * Storing the values of n3 in the  HashMap
			 */
			result.put("number3", n3);

		} else {

			/**
			 * Calculating the answer for addition of three numbers
			 */  
			answer = n1 + n2 + n3 + n4;

			/**
			 * Storing the values of number3, number4 in the  HashMap
			 */
			result.put("number3", n3);
			result.put("number4", n4);
		}

		/**
		 * Storing the values of answer in the  HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/** 
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>();

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;			

			if (level == 1){

				if((answer - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 8000) {
					mcq_upper_limit = 8000;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 2){

				if((answer - 5) <= 3) {
					mcq_lower_limit = 3;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 9000) {
					mcq_upper_limit = 9000;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else {

				if((answer - 5) <= 4) {
					mcq_lower_limit = 4;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 9999) {
					mcq_upper_limit = 9999;  
				} else {
					mcq_upper_limit = answer + 5;
				}        		
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, third random number, fourth random number, sum of 2, 3 or 4 random numbers(the answer), ArrayList of mcq options
		 */
		return result;      
	}

	/**
	     @name mg_get_addition_of_five_digit_numbers_upto_five_digits()
		 @description Gets the problem set data for addition of 2, 3, 4 or 5 numbers    
		 @param level - int - if 1, then addition of 2 numbers will take place. If 2, then addition of 3 numbers will take place .If 3, then addition of 4 numbers will take place and if 4, then addition of 5 numbers will take place                       
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, fourth random number, fifth random number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_of_five_digit_numbers_upto_five_digits(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4, n5, answer = 0;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first, second, third, fourth, and fifth random number
		 */
		n1 = mg_giveRandomInteger(1, 60000, random);
		n2 = mg_giveRandomInteger(1, 70000 - n1, random);
		n3 = mg_giveRandomInteger(1, 80000 - (n1 + n2) , random);
		n4 = mg_giveRandomInteger(1, 90000 - (n1 + n2 + n3) , random);
		n5 = mg_giveRandomInteger(1, 99999 - (n1 + n2 + n3 + n4) , random);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		if (level == 1) {

			/**
			 * Calculating the answer for addition of 2 numbers	
			 */
			answer = n1 + n2;

			/**
			 * Storing the values of n1 and n2 in the  HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);

		} else if(level == 2) {

			/**
			 * Calculating the answer for addition of 3 numbers	
			 */ 
			answer = n1 + n2 + n3;

			/**
			 * Storing the values of n1, n2, and n3 in the  HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number3", n3);

		} else if(level == 3) {

			/**
			 * Calculating the answer for addition of 4 numbers	
			 */ 
			answer = n1 + n2 + n3 + n4;

			/**
			 * Storing the values of n1, n2, n3, and n4 in the  HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number3", n3);
			result.put("number4", n4);

		} else {

			/**
			 * Calculating the answer for addition of 5 numbers	
			 */ 
			answer = n1 + n2 + n3 + n4 + n5;

			/**
			 * Storing the values of n1, n2, n3, n4, and n5 in the  HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number3", n3);
			result.put("number4", n4);
			result.put("number5", n5);
		}

		/**
		 * Storing the values of answer in the  HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/** 
			 * Creating the ArrayList
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;			

			if (level == 1){

				if((answer - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 70000) {
					mcq_upper_limit = 70000;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 2){

				if((answer - 5) <= 3) {
					mcq_lower_limit = 3;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 80000) {
					mcq_upper_limit = 80000;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 3){

				if((answer - 5) <= 4) {
					mcq_lower_limit = 4;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 90000) {
					mcq_upper_limit = 90000;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else {

				if((answer - 5) <= 5) {
					mcq_lower_limit = 5;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 99999) {
					mcq_upper_limit = 99999;  
				} else {
					mcq_upper_limit = answer + 5;
				}	
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, third random number, fourth random number, fifth random number, sum of the 2, 3, 4 or 5 random numbers(the answer), ArrayList of mcq options
		 */
		return result;      
	}

	/**
	     @name mg_get_addition_of_numbers_addition_revision()
		 @description Gets the problem set data for addition of numbers                            
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, answer, ArrayList of mcq)
	 */
	public static Map<String, Object> mg_get_addition_of_numbers_addition_revision(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, answer = 0;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Generating first, second, and third random number
		 */
		n1 = mg_giveRandomInteger(1, 99999, random);
		n2 = mg_giveRandomInteger(1, 99999, random);
		n3 = mg_giveRandomInteger(1, 99999, random);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Calculating the answer
		 */
		answer = n1 + n2 + n3;

		/**
		 * Storing the values of first random number, second random number, third random number, and answer
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("answer", answer);

		/**
		 * Creating mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList	
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = new int[]{0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;			
			if((answer - 5) <= 3) {
				mcq_lower_limit = 3;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 299997) {
				mcq_upper_limit = 299997;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, third random number, sum of the 3 random numbers(the answer), ArrayList of mcq options
		 */
		return result;      
	}

	/**
    @name mg_get_addition_for_daily_life_examples()
	 @description Gets the problem set data for addition of 2 numbers.   
	 @param level - int - Chooses a level. Values are 1, 2 or 3. 
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_for_daily_life_examples(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(level == 1) {
			number1 = mg_giveRandomInteger(2, 8, random);
			number2 = mg_giveRandomInteger(2, 10 - number1, random);
		} else if(level == 2) {
			number1 = mg_giveRandomInteger(10, 90, random);
			number2 = mg_giveRandomInteger(10, 100 - number1, random);
		} else {
			number1 = mg_giveRandomInteger(100, 800, random);
			number2 = mg_giveRandomInteger(100, 900 - number1, random);
		}

		/**
		 * Obtaining the answer 
		 */
		answer = number1 + number2;

		/**
		 * Creating a temporary ArrayList for storing the values of name1, name2, tree1, tree2, object1, object2, fruit name, pronoun1, relative_pronoun1, pronoun2, relative_pronoun2 
		 */
		ArrayList<String> temp = mg_getRandomNames();

		/**
		 * Storing the values of answer in the HashMap
		 */
		result.put("answer", answer);

		int type = mg_giveRandomInteger(1, 21, random);

		if(type == 2) {
			result.put("question", temp.get(0) + " made " + number1 + " " + temp.get(3) + " and " + number2 + " " + temp.get(4) + ". How many objects were made altogether?");
		} else if(type == 3) {
			result.put("question", "There are " + number1 + " " + temp.get(9) + " in the basket. " + number2 +  " more were put in it. How many " + temp.get(9) + " are in the basket now?");
		} else if(type == 4) {
			result.put("question", number1 + " " + temp.get(3) + " and " + number2 +  " " + temp.get(3) + ", make a total of how many " + temp.get(3) + "?");
		} else if(type == 5) {
			result.put("question", temp.get(0) + " read " + number1 + " story books and " + temp.get(1) + " read " + number2 +  " story books. How many books did they read altogether?");
		} else if(type == 6) {
			result.put("question", "There are " + number1 + " pencils in the drawer. " + temp.get(0) + " placed " + number2 +  " more pencils in the drawer. How many pencils are now there in all?");
		} else if(type == 7) {
			result.put("question", temp.get(0) + " picked " + number1 + " mangoes and " + temp.get(1) +  " picked " + number2 + " mangoes from the mango tree. How many mangoes were picked in total?");
		} else if(type == 8) {
			result.put("question", "School library has " + number1 + " books of stories and " + number2 + " novels. How many books are there in school library?");
		} else if(type == 9) {
			result.put("question", temp.get(0) + "'s cat had kittens. " + temp.get(12) + " gave " + number1 + " to his friends. " + temp.get(12) + " now has " + number2 + " kittens left. How many kittens did " + temp.get(13) + " cat have?");
		} else if(type == 10) {
			result.put("question", temp.get(0) + " has " + number1 + " red balloons. " + temp.get(1) + " has " + number2 + " red balloons. How many red balloons do they have in total?");
		} else if(type == 11) {
			result.put("question", "There are " + number1 + " walnut trees currently in the park. Park workers will plant " + number2 + " more walnut trees today. How many walnut trees will be in the park in total?");
		} else if(type == 12) {
			result.put("question", temp.get(0) + " picked " + number1 + " apples and " + temp.get(1) + " picked " + number2 + " apples from the apple tree. How many apples were picked in all?");
		} else if(type == 13) {
			result.put("question", temp.get(0) + " had " + number1 + " rupees in " + temp.get(13) + " bank. " + toTitleCase(temp.get(13).toString()) + " dad gave " + number2 + " more pennies. How many rupees does " + temp.get(12).toLowerCase() + " have now?");
		} else if(type == 14) {
			result.put("question", temp.get(0) + " has " + number1 + " books. " + temp.get(1) + " has " + number2 + " books. How many books do they have together?");
		} else if(type == 15) {
			result.put("question", number1 + " flowers bloomed yesterday. " + number2 + " flowers bloomed today. How many flowers bloomed altogether?");
		} else if(type == 16) {
			result.put("question", "There were " + number1 + " ladybugs. " + number2 + " more ladybugs came. How many ladybugs are there now?");
		} else if(type == 17) {
			result.put("question", "There were " + number1 + " elephants and " + number2 + " tigers in a zoo. How many animals were in zoo?");
		} else if(type == 18) {
			result.put("question", "There are " + number1 + " red roses and " + number2 + " white roses. How many roses are there?");
		} else if(type == 19) {
			result.put("question", temp.get(0) + " ate " + number1 + " mangoes. " + temp.get(1) + " ate " + number2 + " apples. How many fruits did they eat together?");
		} else if(type == 20) {
			result.put("question", temp.get(0) + " ate " + number1 + " chocolates and " + temp.get(1) + " ate " + number2 + " chocolates. How many chocolates did they eat together?");
		} else if(type == 21) {
			result.put("question", temp.get(0) + " had a tower with " + number1 + " blocks. " + temp.get(1) + " added " + number2 + " more blocks. How many blocks are there in a tower?");
		} else {
			result.put("question", temp.get(0) + " planted " + number1 + " " + temp.get(6) + " trees and " + number2 +  " " + temp.get(7) + " trees. How many trees did " + temp.get(0) + " plant altogether?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

			if(level == 1) {
				if((answer - 5) <= 4) {
					mcq_lower_limit = 4;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 10) {
					mcq_upper_limit = 10;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else if(level == 2) {
				if((answer - 5) <= 20) {
					mcq_lower_limit = 20;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else {
				if((answer - 5) <= 200) {
					mcq_lower_limit = 200;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 900) {
					mcq_upper_limit = 900;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_addition_for_three_number_addition()
	 @description Gets the problem set data for addition of 3 numbers.   
	 @param level - int - Chooses a level. Values are 1, 2 or 3. 
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(name1, name2, name3, tree1, tree2, tree3, fruit1, fruit2, fruit3, question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_for_three_number_addition(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(level == 1) {
			number1 = mg_giveRandomInteger(1, 100, random);
			number2 = mg_giveRandomInteger(1, 100, random);
			number3 = mg_giveRandomInteger(1, 100, random);
		} else if(level == 2) {
			number1 = mg_giveRandomInteger(100, 800, random);
			number2 = mg_giveRandomInteger(100, 900 - number1, random);
			number3 = mg_giveRandomInteger(100, 999 - (number1 + number2), random);
		} else {
			number1 = mg_giveRandomInteger(1000, 8000, random);
			number2 = mg_giveRandomInteger(1000, 9000 - number1, random);
			number3 = mg_giveRandomInteger(1, 9999 - (number1 + number2), random);
		}

		/**
		 * Obtaining the answer 
		 */
		answer = number1 + number2 + number3;

		/**
		 * Creating a temporary ArrayList for storing the values of name1, name2, name3, tree1, tree2, tree3, fruit1, fruit2, fruit3 
		 */
		ArrayList<String> temp = mg_getRandomNames();

		/**
		 * Storing the values of answer in the HashMap
		 */
		result.put("answer", answer);

		int type = mg_giveRandomInteger(1, 5, random);

		if(type == 2) {
			result.put("question", "A village has " + number1 + " two-wheelers, " + number2 + " three-wheelers and " + number3 + " four-wheelers. What is the total number of vehicles in the village?");
		} else if(type == 3) {
			result.put("question", temp.get(0) + " grew " + number1 + " " + temp.get(9) + ", " + temp.get(1) + " grew " + number2 + " " + temp.get(10) + ", and " + temp.get(2) + " grew " + number3 + " " + temp.get(11) + ". How many fruits did they grow in all?");
		} else if(type == 4) {
			result.put("question", temp.get(0) + " has " + number1 + " red balloons, " + temp.get(1) +  " has " + number2 + " red balloons, and " + temp.get(2) +  " has " + number3 + " red balloons. How many red balloons do they have in total?");
		} else if(type == 5) {
			result.put("question", "A city library has " + number1 + " books of history, " + number2 + " books of literature and " + number3 +  " novels. How many books does the library have in all?");
		} else {
			result.put("question", "If " + number1 + " " + temp.get(6) + " trees, " + number2 + " " + temp.get(7) + " trees and " + number3 +  " " + temp.get(8) + " trees were planted, how many trees were planted altogether?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

			if(level == 1) {
				if((answer - 5) <= 3) {
					mcq_lower_limit = 3;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 300) {
					mcq_upper_limit = 300;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else if(level == 2) {
				if((answer - 5) <= 300) {
					mcq_lower_limit = 300;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 999) {
					mcq_upper_limit = 999;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else {
				if((answer - 5) <= 3000) {
					mcq_lower_limit = 3000;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 9999) {
					mcq_upper_limit = 9999;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with name1, name2, name3, tree1, tree2, tree3, fruit1, fruit2, fruit3, question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_addition_for_sum_of_smallest_and_largest_number1_digit_number()
	 @description Gets the problem set data for sum of smallest and largest number1 digit number.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_addition_for_sum_of_smallest_and_largest_number1_digit_number(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array for storing number of digits
		 */
		int[] numbers = {2, 3, 4, 5, 6, 7};

		/**
		 * Creating an array containing sum of the smallest and largest number with above number of digits
		 */
		int[] answers = {109, 1099, 10999, 109999, 1099999, 10999999};

		/**
		 * Generating a random number for selecting values from above arrays
		 */
		int rand1 = mg_giveRandomInteger(0, numbers.length - 1, random);

		/**
		 * Selecting values for number1 and answer
		 */
		number1 = numbers[rand1];
		answer = answers[rand1];

		/**
		 * Returning the question to the HashMap
		 */
		result.put("question", "What will be the sum of the smallest and the largest " + number1 + " digit numbers?");

		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_angles_for_identifying_the_angle_type_from_the_images()
		 @description Gets the problem set data identifying the angle type from a shown image.  
		 @param name_flag - boolean - If true, returns the name of the sides of a shape. 
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image of an angle, name of an sides whose angle is to obtained (optional), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_angles_for_identifying_the_angle_type_from_the_images(boolean name_flag, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists for storing the shapes, sides along with their angles     
		 */
		ArrayList<String> shape_names = new ArrayList<String>(Arrays.asList("triangle", "rectangle", "square", "parallelogram", "rhombus"));
		ArrayList<ArrayList<String>> sides_and_angles = new ArrayList<ArrayList<String>>();

		/**
		 * Creating temporary ArrayLists for storing names of sides along with the angles corresponding to the shape
		 */
		ArrayList<String> temp_triangle = new ArrayList<>(Arrays.asList("PQR_An_acute_angle", "QPR_An_acute_angle", "QRP_An_acute_angle"));
		ArrayList<String> temp_rectangle = new ArrayList<>(Arrays.asList("MNO_A_right_angle", "NOP_A_right_angle", "OPM_A_right_angle", "PMN_A_right_angle"));
		ArrayList<String> temp_square = new ArrayList<>(Arrays.asList("ABC_A_right_angle", "BCD_A_right_angle", "CDA_A_right_angle", "DAB_A_right_angle"));
		ArrayList<String> temp_parallelogram = new ArrayList<>(Arrays.asList("ABC_An_acute_angle", "BCD_An_obtuse_angle", "BCA_An_acute_angle", "DAB_An_obtuse_angle"));
		ArrayList<String> temp_rhombus = new ArrayList<>(Arrays.asList("PQR_An_acute_angle", "QRS_An_obtuse_angle", "RSP_An_acute_angle", "SPQ_An_obtuse_angle"));

		/**
		 * Adding the sides of the chosen shape in the sides_and_angles ArrayList
		 */
		sides_and_angles.add(temp_triangle);
		sides_and_angles.add(temp_rectangle);
		sides_and_angles.add(temp_square);
		sides_and_angles.add(temp_parallelogram);
		sides_and_angles.add(temp_rhombus);

		/**
		 * Generating random numbers for selecting a shape and a random side of that shape
		 */
		int rand = mg_giveRandomInteger(0, shape_names.size() - 1, random);
		int rand1 = mg_giveRandomInteger(0, sides_and_angles.get(rand).size() - 1, random);

		/**
		 * Selecting a shape, and its sides and angle
		 */
		String shape_ = shape_names.get(rand);
		String angle_ = sides_and_angles.get(rand).get(rand1);

		/**
		 * Splitting the sides and angle of the shape, and storing the values in a String array 
		 */
		String[] temp = angle_.split("_");

		/**
		 * Creating the image to be displayed
		 */
		String image = temp[0].concat("_").concat(shape_).concat(".png");

		/**
		 * Obtaining the answer
		 */
		answer = temp[1].concat(" ").concat(temp[2]).concat(" ").concat(temp[3]);

		/**
		 * Obtaining the name of sides of the chosen shape
		 */
		String name_of_angle = temp[0];

		/**
		 * Storing the image, name of sides of the shape, and answer in the HashMap
		 */
		result.put("image", image);
		result.put("answer", answer);
		if(name_flag == true) {
			result.put("name_of_angle", name_of_angle);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add("An acute angle");
			mcq_option.add("A right angle");
			mcq_option.add("An obtuse angle");
			mcq_option.add("A straight angle");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option); 	 	
		}

		/**
		 * Return the HashMap with image of an angle, name of an sides whose angle is to obtained (optional), answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_angles_for_identifying_the_angle_type_from_a_shown_number()
		 @description Gets the problem set data identifying the angle type from a shown number.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (n, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_angles_for_identifying_the_angle_type_from_a_shown_number(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random number to get n with equal probability
		 */
		int rand1 = mg_giveRandomInteger(0, 3, random);

		/**
		 * Generating a random value for n
		 */
		if(rand1 == 0) {
			n = mg_giveRandomInteger(1, 89, random);
		} else if(rand1 == 1) {
			n = 90;
		} else if(rand1 == 2) {
			n = mg_giveRandomInteger(91, 179, random);
		} else {
			n = 180;
		}

		/**
		 * Obtaining the answer
		 */
		if(n < 90) {
			answer = "An acute angle";
		} else if(n == 90) {
			answer = "A right angle";
		} else if(n == 180) {
			answer = "A straight angle";
		} else {
			answer = "An obtuse angle";
		}

		/**
		 * Storing the value of n and answer in the HashMap
		 */
		result.put("number", n);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an ArrayList for storing wrong mcq options
			 */
			ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("An acute angle", "A right angle", "An obtuse angle", "A straight angle"));

			/**
			 * Storing mcq options apart from the answer in a temporary ArrayList 
			 */
			ArrayList<String> temp = new ArrayList<>();
			for(int i=0;i<wrong_mcq_options.size();i++){
				if(!mcq_option.contains(wrong_mcq_options.get(i))){
					temp.add(wrong_mcq_options.get(i));
				}
			}

			/**
			 * Shuffling the wrong mcq options
			 */
			Collections.shuffle(temp);

			/**
			 * Storing the wrong mcq options in the mcq_option ArrayList
			 */
			mcq_option.add(temp.get(0));
			mcq_option.add(temp.get(1));

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option); 	 	
		}

		/**
		 * Return the HashMap with n, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_angles_for_identifying_the_vertex_of_angle()
		 @description Gets the problem set data identifying the point / vertex with the angle.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image with angle marked, parameter value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_angles_for_identifying_the_vertex_of_angle(boolean mcq) {

		Map<String, Object> result = mg_get_angles_for_identifying_the_angle_type_from_the_images(true, mcq);
		result.remove("answer");
		String temp1 = result.get("name_of_angle").toString();
		String[] temp2 = temp1.split("");
		result.put("answer", temp2[1]);
		result.remove("name_of_angle");

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array for parameter values
		 */
		String[] parameter_values = {"point", "vertex"};

		/**
		 * Generating a random number for selecting a parameter
		 */
		int rand1 = mg_giveRandomInteger(0, parameter_values.length - 1, random);

		/**
		 * Selecting a parameter
		 */
		String parameter_value = parameter_values[rand1];

		/**
		 * Storing the parameter value in the HashMap
		 */
		result.put("parameter_value", parameter_value);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(temp2[0]);
			mcq_option.add(temp2[1]);
			mcq_option.add(temp2[2]);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option); 	 	
		}

		/**
		 * Return the HashMap with image with angle marked, parameter value, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_angles_for_identifying_the_name_of_angle()
		 @description Gets the problem set data identifying name of the angle.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image with angle marked, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_angles_for_identifying_the_name_of_angle(boolean mcq) {

		Map<String, Object> result = mg_get_angles_for_identifying_the_angle_type_from_the_images(true, mcq);
		result.remove("answer");
		result.put("answer", result.get("name_of_angle").toString());
		String temp1 = result.get("name_of_angle").toString();
		String[] temp2 = temp1.split("");
		result.remove("name_of_angle");

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(temp1);

			/**
			 * Creating the wrong mcq options
			 */
			String wrong_1 = temp2[1].concat(temp2[0]).concat(temp2[2]);
			String wrong_2 = temp2[1].concat(temp2[2]).concat(temp2[0]);
			String wrong_3 = temp2[2].concat(temp2[1]).concat(temp2[0]);
			String wrong_4 = temp2[2].concat(temp2[0]).concat(temp2[1]);

			/**
			 * Storing the wrong options in ArrayList
			 */
			ArrayList<String> wrong_mcq_options = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

			/**
			 * Shuffling the wrong mcq options
			 */
			Collections.shuffle(wrong_mcq_options);

			/**
			 * Storing the values of wrong mcq options in the ArrayList
			 */
			mcq_option.add(wrong_mcq_options.get(0));
			mcq_option.add(wrong_mcq_options.get(1));
			mcq_option.add(wrong_mcq_options.get(2));

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image with angle marked, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_angles_for_measuring_angles_using_a_protractor()
		 @description Gets the problem set data containing the angle shown by the protractor.
		 @param mcq - boolean - Multiple choice options required true / false - default is false                           
		 @return HashMap (image of protractor showing some angle, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_angles_for_measuring_angles_using_a_protractor(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String image;
		int answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random value for angle shown by the protractor i.e. answer 
		 */
		ArrayList<String> images_options = new ArrayList<String>(Arrays.asList("protractor_90", "protractor_60", "protractor_30", "protractor_45", "protractor_50", "protractor_75", "protractor_120", "protractor_150", "protractor_180", "protractor_125"));

		/**
		 * Generating a random number for selecting a value from the above Arrayist
		 */
		int rand1 = mg_giveRandomInteger(0, images_options.size() - 1, random);

		/**
		 * Creating an image and obtaining the answer 
		 */
		image = images_options.get(rand1).concat(".png");
		String[] temp = images_options.get(rand1).split("_");
		answer = Integer.parseInt(temp[1]);

		/**
		 * Storing the image and answer in the HashMap
		 */
		result.put("answer", answer);
		result.put("image", image);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>();

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options  
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(((answer / 5) - 10) <= 4) {
				mcq_lower_limit = 4;  
			} else {
				mcq_lower_limit = (answer / 5) - 5;
			}

			if(((answer / 5) + 5) >= 36) {
				mcq_upper_limit = 36;  
			} else {
				mcq_upper_limit = (answer / 5) + 5;
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same 
			 */ 
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u * 5) && mcq_option.size() < 4) {
					mcq_option.add(u * 5);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image of protractor showing some angle, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_angles_for_identifying_parallel_or_perpendicular_lines()
	 @description Gets the problem set data identifying parallel or perpendicular lines.   
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image of lines, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_angles_for_identifying_parallel_or_perpendicular_lines(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String image, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array containing lines
		 */
		String[] lines_value = {"parallel_line_1.png", "parallel_line_2.png", "parallel_line_3.png", "parallel_line_4.png", "parallel_line_5.png", "perpendicular_line_1.png", "perpendicular_line_2.png", "perpendicular_line_3.png", "perpendicular_line_4.png", "perpendicular_line_5.png"};

		/**
		 * Generating a random number for selecting a lines value
		 */
		int rand1 = mg_giveRandomInteger(0, lines_value.length - 1, random);

		/**
		 * Selecting an image
		 */
		image = lines_value[rand1];
		
		/**
		 * Splitting the image name
		 */
		String[] temp = image.split("_");
		
		/**
		 * Selecting a lines value i.e. answer
		 */
		answer = temp[0];

		/**
		 * Storing the image of lines and answer in the HashMap
		 */
		result.put("image", image);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("parallel");
			mcq_option.add("perpendicular");
			mcq_option.add("neither");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with image of lines, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_circles_for_parts_of_a_circle()
	 @description Gets the problem set data identifying the highlighted part of the circle.   
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image, part name, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_circles_for_parts_of_a_circle(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String part_name, answer, image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array containing images of circle with part highlighted
		 */
		String[] circle_images = {"Chord_AB", "Centre_A", "Centre_B", "Radius_AB", "Diameter_AB", "Arc_AB", "Chord_MN", "Centre_M", "Centre_N", "Radius_MN", "Diameter_MN", "Arc_MN", "Chord_QR", "Centre_Q", "Centre_R", "Radius_QR", "Diameter_QR", "Arc_QR"};

		/**
		 * Generating a random number for selecting a random image 
		 */
		int rand1 = mg_giveRandomInteger(0, circle_images.length - 1, random);

		/**
		 * Creating the image of a circle with its parts marked 
		 */
		String temp2 = circle_images[rand1];
		image = temp2.concat(".png");

		/**
		 * Splitting the String variable containing part of a circle and highlighted part 
		 */
		String[] temp = temp2.split("_");

		/**
		 * Obtaining the part name
		 */
		part_name = temp[1];

		/**
		 * Obtaining the answer
		 */
		answer = temp[0];

		/**
		 * Storing the image, part name, and answer in the HashMap
		 */
		result.put("image", image);
		result.put("part_name", part_name);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an ArrayList for storing wrong mcq options
			 */
			ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("Chord", "Centre", "Radius", "Diameter", "Arc"));

			/**
			 * Generating index positions for wrong mcq options and storing the wrong options apart from the answer in the mcq_option ArrayList 
			 */
			int rand2;
			do{
				rand2 = mg_giveRandomInteger(0, wrong_mcq_options.size() - 1, random);
				if(!mcq_option.contains(wrong_mcq_options.get(rand2))){
					mcq_option.add(wrong_mcq_options.get(rand2));
				}
			} while(mcq_option.size() < 3);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image, part name, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_circles_for_points_inside_or_outside_the_circle()
		 @description Gets the problem set data identifying whether the point is inside or outside the circle.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image with a point marked, point name, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_circles_for_points_inside_or_outside_the_circle(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String point_name, answer, image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array containing points inside or outside the circle
		 */
		String[] point_values = {"Inside_the_circle_A", "Inside_the_circle_B", "Inside_the_circle_P", "Inside_the_circle_Q", "Center_of_the_circle_C", "Center_of_the_circle_D", "Center_of_the_circle_R", "Center_of_the_circle_S", "Outside_the_circle_E", "Outside_the_circle_F", "Outside_the_circle_T","Outside_the_circle_U", "On_the_circle_G", "On_the_circle_H", "On_the_circle_V", "On_the_circle_X"};

		/**
		 * Generating a random number for selecting a value from the above array 
		 */
		int rand1 = mg_giveRandomInteger(0, point_values.length - 1, random);

		/**
		 * Selecting a point value and creating an image from it
		 */
		String temp1 = point_values[rand1];
		image = temp1.concat(".png");

		/**
		 * Splitting the String variable containing the point and its location with respect to the circle 
		 */
		String[] temp2 = temp1.split("_");

		/**
		 * Obtaining the point name
		 */
		int temp3 = temp2.length - 1;
		point_name = temp2[temp3];

		/**
		 * Obtaining the answer
		 */
		answer = temp2[0];
		for(int ii=1; ii<=temp2.length - 2; ii++) {
			answer = answer.concat(" ").concat(temp2[ii]);
		}

		/**
		 * Storing the image, point name, and answer in the HashMap
		 */
		result.put("image", image);
		result.put("point_name", point_name);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Inside the circle");
			mcq_option.add("Outside the circle");
			mcq_option.add("On the circle");
			mcq_option.add("Center of the circle");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image, point name, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_circles_for_obtaining_the_size_of_radius_or_diameter_from_circle_image()
		 @description Gets the problem set data containing the size of radius or diameter from the shown image.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image with radius or diameter marked, parameter value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_circles_for_obtaining_the_size_of_radius_or_diameter_from_circle_image(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String parameter_value, answer, image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array containing parameter values
		 */
		String[] parameter_values = {"radius_5", "radius_10", "radius_15", "radius_20", "diameter_5", "diameter_10", "diameter_15", "diameter_20"};

		/**
		 * Generating a random number for selecting a value from the above array 
		 */
		int rand1 = mg_giveRandomInteger(0, parameter_values.length - 1, random);

		/**
		 * Selecting a parameter value and creating an image from it
		 */
		String temp1 = parameter_values[rand1];
		image = temp1.concat(".png");

		/**
		 * Splitting the String variable containing the parameter value and its size 
		 */
		String[] temp2 = temp1.split("_");

		/**
		 * Obtaining the parameter value
		 */
		parameter_value = temp2[0];

		/**
		 * Obtaining the answer
		 */
		answer = temp2[1];

		/**
		 * Storing the image, parameter value, and answer in the HashMap
		 */
		result.put("image", image);
		result.put("parameter_value", parameter_value);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an ArrayList for storing wrong mcq options
			 */
			ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("5", "10", "15", "20", "25", "30"));

			/**
			 * Generating index positions for the wrong mcq options and storing wrong mcq options apart from the answer in the mcq_option ArrayList 
			 */
			int rand2;
			do{
				rand2 = mg_giveRandomInteger(0, wrong_mcq_options.size() - 1, random);
				if(!mcq_option.contains(wrong_mcq_options.get(rand2))){
					mcq_option.add(wrong_mcq_options.get(rand2));
				}
			} while(mcq_option.size() < 4);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image with radius or diameter marked, parameter value, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	@name mg_get_circles_for_multiple_radii_and_diameter()
	@description Gets the problem set data containing the length of radius or diameter if length of one radius or diameter is given.   
	@param mcq - boolean - Multiple choice options required true / false - default is false                        
	@return HashMap (image, n1, first parameter, second parameter, name of first parameter, name of second parameter, answer, ArrayList of mcq options)
	*/
	public static Map<String, Object> mg_get_circles_for_multiple_radii_and_diameter(boolean mcq) {

	/**
	* Declaring the variables
	*/
	int n1, rand1, rand2, answer = 0;
	String parameter_value_1, parameter_value_2, image;

	/**
	* Initializing the random generator
	*/
	Random random = new Random();

	/**
	* Creating the HashMap 
	*/
	Map<String, Object> result = new HashMap<>();

	/**
	* Generating a random number for length of radius or diameter of the circle 
	*/
	n1 = mg_giveRandomInteger(1, 20, random);

	/**
	* Creating an array containing parameter values
	*/
	String[] parameter_values = {"OA radius", "OB radius", "OC radius", "OD radius", "AB diameter", "CD diameter"};

	/**
	* Generating random numbers for selecting values from the above array 
	*/
	rand1 = mg_giveRandomInteger(0, parameter_values.length - 1, random);
	do{
		rand2 = mg_giveRandomInteger(0, parameter_values.length - 1, random);
	} while(rand2 == rand1);

	/**
	* Obtaining the parameter values
	*/
	String value_1, value_2;
	String[] temp1 = parameter_values[rand1].split(" ");
	String[] temp2 = parameter_values[rand2].split(" ");
	parameter_value_1 = temp1[1];
	parameter_value_2 = temp2[1];
	value_1 = temp1[0];
	value_2 = temp2[0];

	/**
	* Obtaining the answer
	*/
	if(parameter_value_1.equals("radius") && parameter_value_2.equals("radius") ) {
		answer = n1;
	} else if(parameter_value_1.equals("radius") && parameter_value_2.equals("diameter")) {
		answer = 2 * n1;
	} else if(parameter_value_1.equals("diameter") && parameter_value_2.equals("radius")) {
		if(n1 % 2 != 0) {
			n1 += 1;
		}
		answer = n1 / 2;
	} else {
		answer = n1;
	}

	/**
	* Creating an image
	*/
	image = "multiple_radii".concat(".png");

	/**
	* Storing the values of image, n1, first parameter, second parameter, name of first parameter, name of second parameter, and answer in the HashMap
	*/
	result.put("image", image);
	result.put("number1", n1);
	result.put("parameter_value_1", parameter_value_1);
	result.put("parameter_value_2", parameter_value_2);
	result.put("value_1", value_1);
	result.put("value_2", value_2);
	result.put("answer", answer);

	/**
	* Creating the mcq options 
	*/
	if(mcq == true) {

		/**
		 * Creating the ArrayList 
		 */ 
		ArrayList <Integer> mcq_option = new ArrayList<>(); 

		/**
		 * Storing the value of answer in the ArrayList
		 */
		mcq_option.add(answer);

		/**
		 * Creating an int array
		 */
		int[] array = {0};

		/**
		 * Calculating the lower limit and upper limit for the remaining mcq options
		 */
		int mcq_lower_limit = 0, mcq_upper_limit = 0;

		if((answer - 5) <= 1) {
			mcq_lower_limit = 1;  
		} else {
			mcq_lower_limit = answer - 5;
		}

		if((answer + 5) >= 20) {
			mcq_upper_limit = 20;  
		} else {
			mcq_upper_limit = answer + 5;
		}

		/**
		 * Generating remaining mcq options within the calculated range  
		 */ 
		array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

		/**
		 * Shuffling the data 
		 */ 
		array = mg_shuffleInt(array);

		/**
		 * Ensuring that no 2 options are the same
		 */
		for(int u : array){
			if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
				mcq_option.add(u);
			}
		}   		

		/**
		 * Shuffling the mcq options
		 */
		Collections.shuffle(mcq_option);

		/**
		 * Returning the values of mcq options to the HashMap
		 */
		result.put("mcq_options", mcq_option);
	} 

	/**
	* Return the HashMap with image, n1, first parameter, second parameter, name of first parameter, name of second parameter, answer, ArrayList of mcq options
	*/ 
	return result;    
	}

	/**
	     @name mg_get_circles_for_length_of_radius_or_diameter_using_compass_image()
		 @description Gets the problem set data containing the length of radius or diameter for the length shown in the image using compass.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (compass image, parameter value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_circles_for_length_of_radius_or_diameter_using_compass_image(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, rand1, answer;
		String parameter_value, image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random number for the length of radius or diameter
		 */
		n1 = mg_giveRandomInteger(1, 10, random);

		/**
		 * Creating an array containing parameter values
		 */
		String[] parameter_values = {"radius", "diameter"};

		/**
		 * Generating a random number for selecting a value from the above array 
		 */
		rand1 = mg_giveRandomInteger(0, parameter_values.length - 1, random);

		/**
		 * Selecting a parameter value
		 */
		parameter_value = parameter_values[rand1];

		/**
		 * Creating the image
		 */
		image = "compass_".concat(Integer.toString(n1)).concat(".png");

		/**
		 * Obtaining the answer
		 */
		if(parameter_value == "radius") {
			answer = n1;
			result.put("answer", answer);
		} else {
			answer = 2 * n1;
			result.put("answer", answer);
		}

		/**
		 * Storing the image, parameter value in the HashMap
		 */
		result.put("image", image);
		result.put("parameter_value", parameter_value);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 1) {
				mcq_lower_limit = 1;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 20) {
				mcq_upper_limit = 20;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}   		

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with compass image, parameter value, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_circles_for_length_of_radius_or_diameter_with_just_numbers()
		 @description Gets the problem set data containing the length of radius or diameter if the length of one of the parameters given.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (n1, first parameter value, second parameter value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_circles_for_length_of_radius_or_diameter_with_just_numbers(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, rand1, answer;
		String parameter_value_1;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random number for length of radius or diameter
		 */
		n1 = mg_giveRandomInteger(1, 50, random);

		/**
		 * Creating an array containing parameter values
		 */
		String[] parameter_values = {"radius", "diameter"};

		/**
		 * Generating a random number for selecting a value from the above array 
		 */
		rand1 = mg_giveRandomInteger(0, parameter_values.length - 1, random);

		/**
		 * Selecting the first parameter value
		 */
		parameter_value_1 = parameter_values[rand1];

		/**
		 * Obtaining the answer and storing n1 along with second parameter value in the HashMap
		 */
		if(parameter_value_1.equals("radius")) {
			answer = 2 * n1;
			result.put("number1", n1);
			result.put("parameter_value_2", "diameter");
		} else {
			answer = n1;
			result.put("number1", answer * 2);
			result.put("parameter_value_2", "radius");
		} 

		/**
		 * Storing the first parameter value and answer in the HashMap 
		 */
		result.put("parameter_value_1", parameter_value_1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if(parameter_value_1 == "radius") {
				if((answer - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else {
				if((answer - 5) <= 1) {
					mcq_lower_limit = 1;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 50) {
					mcq_upper_limit = 50;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}   		

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with n1, first parameter value, second parameter value, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_circles_for_identifying_major_or_minor_arc()
		 @description Gets the problem set data identifying major or minor arc in the shown image of the circle.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image with arcs marked, arc value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_circles_for_identifying_major_or_minor_arc(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String point_value, arc_value, major_arc, minor_arc;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array containing point values
		 */
		String[] point_values = {"circle_SLMN", "circle_ACDB", "circle_RPSQ", "circle_MNOP", "circle_HFEG", "circle_MKNL"};

		/**
		 * Generating a random number for selecting a value from the above array 
		 */
		int rand1 = mg_giveRandomInteger(0, point_values.length - 1, random);

		/**
		 * Selecting the point value
		 */
		point_value = point_values[rand1];

		/**
		 * Splitting the point value to obtain the points for arcs in the circle 
		 */
		String[] temp = point_value.split("_");
		String points_on_the_circle = temp[1];

		/**
		 * Obtaining minor and major arcs based on the points marked on the circle
		 */
		if(points_on_the_circle.equals("SLMN")) {
			major_arc = "SLM";
			minor_arc = "SNM";
		} else if(points_on_the_circle.equals("ACDB")) {
			major_arc = "ACD";
			minor_arc = "ABD";
		} else if(points_on_the_circle.equals("RPSQ")) {
			major_arc = "RPS";
			minor_arc = "RQS";
		} else if(points_on_the_circle.equals("MNOP")) {
			major_arc = "MNO";
			minor_arc = "MPO";
		} else if(points_on_the_circle.equals("HFEG")) {
			major_arc = "HFE";
			minor_arc = "HGE";
		} else {
			major_arc = "MKN";
			minor_arc = "MLN";
		}

		/**
		 * Creating an array containing arc values
		 */
		String[] arc_values = {"minor", "major"};

		/**
		 * Generating a random number for selecting a value from the above array 
		 */
		rand1 = mg_giveRandomInteger(0, arc_values.length - 1, random);

		/**
		 * Selecting the arc value
		 */
		arc_value = arc_values[rand1];

		/**
		 * Obtaining the answer
		 */
		if(arc_value == "major") {
			result.put("answer", major_arc);
		} else {
			result.put("answer", minor_arc);
		}

		/**
		 * Storing the image and arc value in the HashMap 
		 */
		result.put("image", point_value.concat(".png"));
		result.put("arc_value", arc_value);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(major_arc);
			mcq_option.add(minor_arc);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image with arcs marked, arc value, answer, ArrayList of mcq options
		 */ 
		return result;    
	}


	/**
     @name mg_get_comparison_fewer_or_more_of_same_object()
	 @description Gets the problem set data for identifying which group has lesser or more of same object than the other group
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param name_flag - boolean - if true returns a name - default is false
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (first random number, second random number, comparison value (less or more), object name, first name, second name, answer, answer name, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_comparison_fewer_or_more_of_same_object(int level, boolean name_flag, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, rand1, rand2;
		String comparison_value, object, object_image, name1 = null, name2 = null;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(name_flag == true) {

			/**
			 * Creating an array of names 
			 */
			String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Aditi", "Priya", "Neha", "Nisha", "Rita"};

			/**
			 * Generating random numbers for selecting random names 
			 */
			rand1 = mg_giveRandomInteger( 0, name_array.length - 1, random);

			do{
				rand2 = mg_giveRandomInteger( 0, name_array.length - 1, random);
			} while(rand2 == rand1);

			/**
			 * Selecting names
			 */
			name1 = name_array[rand1];
			name2 = name_array[rand2];

			/**
			 * Storing the values in the HashMap
			 */
			result.put("name1", name1);
			result.put("name2", name2);
		}

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object
		 */
		object = objects_array[rand1];	    
		object_image = object.concat(".png");

		/**
		 * Returning the object name and object image
		 */
		result.put("object_name", object);
		result.put("image", object_image);

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less", "fewer"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Storing the comparison value in the HashMap
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Shuffling the range for random values between n1 and n2
		 */
		if(level == 1) {
			if(mg_giveRandomInteger(0, 1, random) == 0) {			/** random value for n1 is generated between the given range */  
				n1 = mg_giveRandomInteger(1, 5, random); 
				n2 = mg_giveRandomInteger(n1 + 1, n1 + 3, random);
			} else {											/** random value for n2 is generated between the given range */
				n2 = mg_giveRandomInteger(1, 5, random); 
				n1 = mg_giveRandomInteger(n2 + 1, n2 + 3, random);
			}
		} else {
			if(mg_giveRandomInteger(0, 1, random) == 1) {			/** random value for n1 is generated between the given range */
				n1 = mg_giveRandomInteger(1, 5, random); 			
				n2 = mg_giveRandomInteger(n1, n1 + 3, random);
			} else {											/** random value for n2 is generated between the given range */
				n2 = mg_giveRandomInteger(1, 5, random); 
				n1 = mg_giveRandomInteger(n2, n2 + 3, random);
			}
		}

		/**
		 * Storing the values of n1 and n2 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {				/** comparing which random number is more than the other */
			if(n1 > n2) {								/** if n1 is more than n2 */
				if(name_flag == true) {
					result.put("answer", name1);
				} else {
					result.put("answer", n1);
				}
			} else if(n1 == n2) {						/** if n1 is equal to n2 */
				result.put("answer", "Neither, they have equal ".concat(object));
			} else {									/** if n2 is more than n2 */
				if(name_flag == true) {
					result.put("answer", name2);
				} else {
					result.put("answer", n2);
				}
			}
		} else {		/** comparing which random number is less than the other */
			if(n1 < n2) {								/** if n1 is less than n2 */
				if(name_flag == true) {
					result.put("answer", name1);
				} else {
					result.put("answer", n1);
				}
			} else if(n1 == n2) {						/** if n1 is equal to n2 */
				result.put("answer", "Neither, they have equal ".concat(object));
			} else {									/** if n2 is less than n1 */
				if(name_flag == true) {
					result.put("answer", name2);
				} else {
					result.put("answer", n2);
				}
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			if(name_flag == true) {
				if(level == 1) {

					/**
					 * Storing the mcq options in the ArrayList
					 */
					mcq_option.add(name1);
					mcq_option.add(name2);
				} else {

					/**
					 * Storing the mcq options in the ArrayList
					 */
					mcq_option.add(name1);
					mcq_option.add(name2);
					mcq_option.add("Neither, they have equal ".concat(object));
				}
			} else {    		 
				if(level == 1) {

					/**
					 * Storing the mcq options in the ArrayList
					 */
					mcq_option.add(Integer.toString(n1));
					mcq_option.add(Integer.toString(n2));
				} else if(level == 2) {
					if(n1 == n2) {

						/**
						 * Storing the mcq options in the ArrayList
						 */
						mcq_option.add(Integer.toString(n1));
						mcq_option.add("Neither, they have equal ".concat(object));
					} else {

						/**
						 * Storing the mcq options in the ArrayList
						 */
						mcq_option.add(Integer.toString(n1));
						mcq_option.add(Integer.toString(n2));
						mcq_option.add("Neither, they have equal ".concat(object));
					}
				} 
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, comparison value (less or more), object name, first name, second name, answer, answer name, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_comparison_fewer_or_more_of_different_objects()
		 @description Gets the problem set data for identifying which object is lesser or more than the other object
		 @param level - int - Chooses a level. Values are 1 or 2.  
		 @param object_name_flag - boolean - if true, returns the name of the objects for mcq options
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (first random number, second random number, comparison value (less or more or fewer), first object name, second object name, answer, answer object (optional), ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_comparison_fewer_or_more_of_different_objects(int level, boolean object_name_flag, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, rand1, rand2;
		String comparison_value, object1, object1_image, object2, object2_image ;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		do{
			rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		} while(rand2 == rand1);

		/**
		 * Selecting first object
		 */
		object1 = objects_array[rand1];

		/**
		 * Creating an image for the selected object
		 */
		object1_image = object1.concat(".png");

		/**
		 * Storing the object name and its image in the HashMap
		 */
		result.put("object1_name", object1);
		result.put("image1", object1_image);

		/**
		 * Selecting second object
		 */
		object2 = objects_array[rand2];

		/**
		 * Creating an image for the selected object
		 */
		object2_image = object2.concat(".png");

		/**
		 * Storing the object name and its image in the HashMap
		 */
		result.put("object2_name", object2);
		result.put("image2", object2_image);

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less", "fewer"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Storing the comparison value in the HashMap
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Shuffling the range for random values between n1 and n2
		 */
		if(level == 1) {
			if(mg_giveRandomInteger( 0, 1, random) == 0) {			/** random value for n1 is generated between the given range */
				n1 = mg_giveRandomInteger( 1, 5, random); 
				n2 = mg_giveRandomInteger( n1 + 1, n1 + 3, random);
			} else {											/** random value for n2 is generated between the given range */
				n2 = mg_giveRandomInteger( 1, 5, random); 
				n1 = mg_giveRandomInteger( n2 + 1, n2 + 3, random);
			}
		} else {
			if(mg_giveRandomInteger( 0, 1, random) == 0) {			/** random value for n1 is generated between the given range */
				n1 = mg_giveRandomInteger( 1, 5, random); 
				n2 = mg_giveRandomInteger( n1, n1 + 3, random);
			} else {											/** random value for n2 is generated between the given range */
				n2 = mg_giveRandomInteger( 1, 5, random); 
				n1 = mg_giveRandomInteger( n2, n2 + 3, random);
			}
		}

		/**
		 * Storing the values of n1 and n2 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {					/** comparing which random number is more than the other */
			if(n1 > n2) {	    				/** if n1 is more than n2 */
				if(object_name_flag == true) {
					result.put("answer", object1);
				} else {
					result.put("answer", n1);
				}
			} else if(n1 == n2) {				/** if n1 is equal to n2 */
				if(object_name_flag == true) {
					result.put("answer", "Neither, they have equal ".concat(object1).concat(" and ").concat(object2));
				} else {
					result.put("answer", "Neither, they have equal ".concat(object1).concat(" and ").concat(object2));
				}
			} else {							/** if n2 is more than n2 */
				if(object_name_flag == true) {
					result.put("answer", object2);
				} else {
					result.put("answer", n2);	
				}
			}
		} else {		/** comparing which random number is less than the other */
			if(n1 < n2) {						/** if n1 is less than n2 */
				if(object_name_flag == true) {
					result.put("answer", object1);
				} else {
					result.put("answer", n1);
				}
			} else if(n1 == n2) {				/** if n1 is equal to n2 */
				if(object_name_flag == true) {
					result.put("answer", "Neither, they have equal ".concat(object1).concat(" and ").concat(object2));
				} else {
					result.put("answer", "Neither, they have equal ".concat(object1).concat(" and ").concat(object2));
				}
			} else {							/** if n2 is less than n1 */
				if(object_name_flag == true) {
					result.put("answer", object2);
				} else {
					result.put("answer", n2);
				}
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			if(object_name_flag == true) {
				if(level == 1) {

					/**
					 * Storing the mcq options in the ArrayList
					 */
					mcq_option.add(object1);
					mcq_option.add(object2);
				} else {

					/**
					 * Storing the mcq options in the ArrayList
					 */
					mcq_option.add(object1);
					mcq_option.add(object2);
					mcq_option.add("Neither, they are equal");
				}
			} else {
				if(level == 1) {

					/**
					 * Storing the mcq options in the ArrayList
					 */
					mcq_option.add(Integer.toString(n1));
					mcq_option.add(Integer.toString(n2));
				} else {

					/**
					 * Storing the mcq options in the ArrayList
					 */
					mcq_option.add(Integer.toString(n1));
					mcq_option.add(Integer.toString(n2));
					mcq_option.add("Neither, they have equal ".concat(object1).concat(" and ").concat(object2));
				} 
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, comparison value (less or more or fewer), first object name, second object name, answer, answer object (optional), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_comparison_for_identifying_same_image()
		 @description Gets the problem set data for identifying the image which is same as the image shown in the question  
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image for the question, image for the answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_comparison_for_identifying_same_image(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String object1_image, object2_image, object3_image, object4_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object image
		 */
		object1_image = objects_array[rand1].concat(".png");

		/**
		 * Returning the object image and answer
		 */
		result.put("image", object1_image);
		result.put("answer", object1_image);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			int rand2, rand3, rand4;

			/**
			 * Generating random numbers for index positions other than the answer
			 */
			do{
				rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			} while(rand2 == rand1);

			do{
				rand3 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			} while(rand3 == rand1 || rand3 == rand2);

			do{
				rand4 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			} while(rand4 == rand1 || rand4 == rand2 || rand4 == rand3);

			/**
			 * Selecting images for wrong options
			 */
			object2_image = objects_array[rand2].concat(".png");
			object3_image = objects_array[rand3].concat(".png");
			object4_image = objects_array[rand4].concat(".png");

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing mcq options in the ArrayList
			 */ 
			mcq_option.add(object1_image);
			mcq_option.add(object2_image);
			mcq_option.add(object3_image);
			mcq_option.add(object4_image);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with values of image for the question, image for the answer, ArrayList of mcq options
		 */ 
		return result;
	}

	/**
	     @name mg_get_comparison_for_identifying_different_image()
		 @description Gets the problem set data for identifying the image which is different from the image shown in the question  
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image for the question, image for the answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_comparison_for_identifying_different_image(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1, rand2;
		String object1_image, object2_image, object3_image, object4_image, answer_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		do{
			rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		} while(rand2 == rand1);

		/**
		 * Selecting the object and answer image
		 */
		object1_image = objects_array[rand1].concat(".png");
		answer_image = objects_array[rand2].concat(".png"); 
		object2_image = answer_image;

		/**
		 * Returning the object1, answer image
		 */
		result.put("image1", object1_image);
		result.put("image2", object2_image);
		result.put("answer", answer_image);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Selecting images for wrong options
			 */
			object2_image = answer_image;
			object3_image = objects_array[rand1].concat(".png");
			object4_image = objects_array[rand1].concat(".png");

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing mcq options in the ArrayList 
			 */ 
			mcq_option.add(object1_image);
			mcq_option.add(object2_image);
			mcq_option.add(object3_image);
			mcq_option.add(object4_image);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with values of image for the question, image for the answer, ArrayList of mcq options
		 */ 
		return result;
	}

	/**
	     @name mg_get_comparison_larger_or_smaller_number()
		 @description Gets the problem set data for identifying which number is smaller/less or larger/bigger/greater than the other number 
		 @param level - int - choose a level. Values are 1, 2, 3, 4 or 5.  
		 @param options_in_words - boolean - If true, then mcq options will be such as, greater than or less than. If false, then mcq options will be n1, n2 or Neither, they are equal. 
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (first random number, second random number, comparison value (larger / smaller or bigger / smaller or less / greater), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_comparison_larger_or_smaller_number(int level, boolean options_in_words, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0;
		String comparison_value, temp = null;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {	
			n1 = mg_giveRandomInteger(1, 9, random); 
			n2 = mg_giveRandomInteger(1, 9, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 99, random); 
			n2 = mg_giveRandomInteger(1, 99, random);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(1, 999, random); 
			n2 = mg_giveRandomInteger(1, 999, random);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger(1, 9999, random); 
			n2 = mg_giveRandomInteger(1, 9999, random);
		} else {
			n1 = mg_giveRandomInteger(1, 99999, random); 
			n2 = mg_giveRandomInteger(1, 99999, random);
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1 and n2 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"larger", "bigger", "greater", "smaller", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Storing the comparison value in the HashMap
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Creating comparison value for wrong mcq options
		 */
		if(comparison_value == "greater") {
			temp = "less";
		} else if(comparison_value == "larger" || comparison_value == "bigger") {
			temp = "smaller";
		} else if(comparison_value == "less") {
			temp = "greater";
		} else {
			int rand3 = mg_giveRandomInteger(0, 1, random);
			if(rand3 == 0){
				temp = "larger";
			} else {
				temp = "bigger";
			}
		}

		/**
		 * If comparing_in_words == true, mcq options will be such as, greater than or less than. If comparing_in_words == false, mcq options will be n1, n2 or Neither, they are equal.  
		 */
		if(options_in_words == true) {
			if(comparison_value == "larger" || comparison_value == "bigger" || comparison_value == "greater") {			/** comparing which random number is larger or bigger or greater than the other */
				if(n1 > n2) {							/** if n1 is larger or bigger or greater than n2 */
					result.put("answer", "is ".concat(comparison_value).concat(" than"));
				} else if(n1 < n2) {				/** if n2 is larger or bigger or greater than n1 */
					result.put("answer", "is ".concat(temp).concat(" than"));
				} else {				/** if n1 is equal to n2 */
					result.put("answer", "is equal to");
				}	
			} else {		/** comparing which random number is smaller or less than the other */
				if(n1 < n2) {						/** if n1 is smaller or less than n2 */
					result.put("answer", "is ".concat(comparison_value).concat(" than"));
				} else if(n1 == n2) {				/** if n1 is equal to n2 */
					result.put("answer", "is equal to");
				} else {				/** if n2 is smaller or less than n1 */
					result.put("answer", "is ".concat(temp).concat(" than"));
				}
			}	    	
		} else {
			if(comparison_value == "larger" || comparison_value == "bigger" || comparison_value == "greater") {			/** comparing which random number is larger or bigger or greater than the other */
				if(n1 > n2) {						/** if n1 is larger or bigger or greater than n2 */
					result.put("answer", n1);
				} else if(n1 == n2) {				/** if n1 is equal to n2 */
					result.put("answer", "Neither, they are equal");
				} else {							/** if n2 is larger or bigger or greater than n1 */
					result.put("answer", n2);
				}
			} else {		/** comparing which random number is smaller or less than the other */
				if(n1 < n2) {						/** if n1 is smaller or less than n2 */
					result.put("answer", n1);
				} else if(n1 == n2) {				/** if n1 is equal to n2 */
					result.put("answer", "Neither, they are equal");
				} else {							/** if n2 is smaller or less than n1 */
					result.put("answer", n2);
				}
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList 
			 */
			if(options_in_words == true) {
				mcq_option.add("is ".concat(comparison_value).concat(" than"));
				mcq_option.add("is ".concat(temp).concat(" than"));
				mcq_option.add("is equal to");
				result.remove("comparison_value");		    	
			} else {
				mcq_option.add(Integer.toString(n1));
				mcq_option.add(Integer.toString(n2));
				mcq_option.add("Neither, they are equal");
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, comparison value (larger / smaller or bigger / smaller or less / greater), object name, first name, second name, answer, answer name, ArrayList of mcq options
		 */ 
		return result; 	    
	}

	/**
	     @name mg_get_comparison_largest_or_smallest_number()
		 @description Gets the problem set data for identifying which number is smallest/least or largest/greatest among the 3 numbers 	 
		 @param level - int - choose a level. Values are 1, 2, 3, 4 or 5.  
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (first random number, second random number, third random number, comparison value (largest / smallest or greatest / least), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_comparison_largest_or_smallest_number(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random values for n1, n2 and n3 
		 */
		if(level == 1) {	
			n1 = mg_giveRandomInteger(1, 9, random);

			do{
				n2 = mg_giveRandomInteger(1, 9, random);
			}while(n2 == n1);

			do{
				n3 = mg_giveRandomInteger(1, 9, random);
			}while(n3 == n1 || n3 == n2);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 99, random); 

			do{
				n2 = mg_giveRandomInteger(1, 99, random);
			}while(n2 == n1);

			do{
				n3 = mg_giveRandomInteger(1, 99, random);
			}while(n3 == n1 || n3 == n2);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(1, 999, random); 

			do{
				n2 = mg_giveRandomInteger(1, 999, random);
			}while(n2 == n1);

			do{
				n3 = mg_giveRandomInteger( 1, 999, random);
			}while(n3 == n1 || n3 == n2);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger( 1, 9999, random); 

			do{
				n2 = mg_giveRandomInteger( 1, 9999, random);
			}while(n2 == n1);

			do{
				n3 = mg_giveRandomInteger( 1, 9999, random);
			}while(n3 == n1 || n3 == n2);
		} else {
			n1 = mg_giveRandomInteger( 1, 99999, random); 

			do{
				n2 = mg_giveRandomInteger( 1, 99999, random);
			}while(n2 == n1);

			do{
				n3 = mg_giveRandomInteger( 1, 99999, random);
			}while(n3 == n1 || n3 == n2);	
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and n3 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);

		int rand1;

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"largest", "greatest", "smallest", "least"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Storing the comparison value in the HashMap
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Obtaining the answer based on comparison value
		 */
		if(comparison_value == "largest" || comparison_value == "greatest") {
			if(n1 > n2 && n1 > n3) {
				result.put("answer", n1);
			} else if(n2 > n1 && n2 > n3){
				result.put("answer", n2);
			} else {
				result.put("answer", n3);
			}	
		} else {
			if(n1 < n2 && n1 < n3) {
				result.put("answer", n1);

			} else if(n2 < n1 && n2 < n3){
				result.put("answer", n2);

			} else {
				result.put("answer", n3);
			}
		}	    	

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList 
			 */
			mcq_option.add(Integer.toString(n1));
			mcq_option.add(Integer.toString(n2));
			mcq_option.add(Integer.toString(n3));

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, third random number, comparison value (largest / smallest or greatest / least), answer, ArrayList of mcq options
		 */ 
		return result; 	    
	}

	/**
     @name mg_get_counting_and_numbers_for_counting_objects_shown_in_linear_form()
	 @description Gets the count for number of objects shown. 
	 @param level - int - Chooses a level. Values are 1, 2 or 3.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (random number (n1), object name, object image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_objects_shown_in_linear_form(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String object, object_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object and its image
		 */
		object = objects_array[rand1];	    
		object_image = object.concat(".png");

		/**
		 * Returning the object name and object image
		 */
		result.put("object", object);
		result.put("image", object_image);

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 5, random); 	
		} else if (level == 2) {
			n1 = mg_giveRandomInteger(6, 10, random);
		} else {
			n1 = mg_giveRandomInteger(11, 20, random);
		}

		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", n1);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(n1);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(1, 5).toArray();
			} else if(level == 2) {	

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(6, 10).toArray();
			} else {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(11, 20).toArray();
			} 

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with n1, object name, object image, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_counting_objects_shown_in_Brownian_form()
	 @description Gets the count for number of objects shown. 
	 @param level - int - Chooses a level. Values are 1, 2 or 3.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (random number (n1), object name, object image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_objects_shown_in_Brownian_form(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String object, object_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object and its image
		 */
		object = objects_array[rand1];	    
		object_image = object.concat(".png");

		/**
		 * Returning the object name and object image
		 */
		result.put("object", object);
		result.put("image", object_image);

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 5, random); 	
		} else if (level == 2) {
			n1 = mg_giveRandomInteger(6, 10, random);
		} else {
			n1 = mg_giveRandomInteger(11, 20, random);
		}

		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", n1);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(n1);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(1, 5).toArray();
			} else if(level == 2) {	

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(6, 10).toArray();
			} else {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(11, 20).toArray();
			} 

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with n1, object name, object image, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	 @name mg_get_counting_and_numbers_for_counting_on_fingers()
	 @description Gets the count for number of fingers shown.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (random number (n1), image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_on_fingers(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random value for n1
		 */
		n1 = mg_giveRandomInteger(1, 10, random);

		/**
		 * Creating an image
		 */	    
		image = "finger_".concat(Integer.toString(n1)).concat(".png");

		/**
		 * Returning the value of n1 and image 
		 */
		result.put("number", n1);
		result.put("image", image);
		result.put("answer", n1);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(n1);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(1, 10).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with n1, image, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_counting_tens_and_ones_with_images()
	 @description Gets the count for number of objects shown bundled into tens and ones.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (tens (t1), ones (u1), object name, object image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_tens_and_ones_with_images(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int t1, u1, answer;
		String object_individual_image, object_bundle_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"buttons", "crayons", "markers", "pencils"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object, its bundled image, and individual image 
		 */
		String object = objects_array[rand1];	    
		object_individual_image = object.concat("_individual.png");
		object_bundle_image = object.concat("_bundle.png");

		/**
		 * Returning the object name, image with objects in bundle, individual object image 
		 */
		result.put("object", object);
		result.put("image", object_individual_image);
		result.put("bundled_image", object_bundle_image);

		/**
		 * Generating random values for t1 and u1
		 */
		t1 = mg_giveRandomInteger(1, 9, random);
		u1 = mg_giveRandomInteger(1, 9, random);

		/**
		 * Calculating the answer
		 */
		answer = t1 * 10 + u1;

		/**
		 * Storing the values of t1, u1, and answer in the HashMap
		 */
		result.put("tens", t1);
		result.put("ones", u1);
		result.put("number", answer);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 5) <= 11) {
				mcq_lower_limit = 11;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 99) {
				mcq_upper_limit = 99;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}   		

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with tens (t1), ones (u1), object name, object image, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_counting_in_order_with_images()
	 @description Displays images for the selected object in the range of n1 to n2 and then randomly replaces index positions by an input field.  
	 @param level - int - Chooses a level. Values are 1, 2 or 3.
	 @param num_blanks - int - number of positions to be replaced by an input field. Values are 1 or 2.                        
	 @return HashMap (n1, n2, object name, object image, question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_in_order_with_images(int level, int num_blanks) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, count;
		String object_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object and creating its image 
		 */
		String object = objects_array[rand1];	    
		object_image = object.concat(".png");

		/**
		 * Returning the object name and the image of the object to the HashMap
		 */
		result.put("object", object);
		result.put("image", object_image);

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {
			n1 = 1;
			n2 = mg_giveRandomInteger(3, 5, random);
		} else if(level == 2) {
			n1 = 1;
			n2 = mg_giveRandomInteger(6, 10, random);
		} else {
			n1 = 11;
			n2 = mg_giveRandomInteger(15, 20, random);
		}

		/**
		 * Calculating the count for number of images to be displayed
		 */
		count = (n2 - n1) + 1;

		/**
		 * Creating an ArrayList for question and answer values
		 */
		ArrayList <String> question_arraylist = new ArrayList<>();
		ArrayList <Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Ensuring num_blanks is always less than count 
		 */
		if(num_blanks >= count) {
			num_blanks = count - 1;
		}

		/**
		 * Ensuring num_blanks is always equal to 1 if num_blanks becomes zero 
		 */
		if(num_blanks == 0) {
			num_blanks = 1;
		}

		/**
		 * Storing the values in the question and answer ArrayList
		 */
		for(int ii=n1; ii<=n2; ii++) {
			question_arraylist.add(Integer.toString(ii));
			answer_arraylist.add(ii);
		}

		/**
		 * Storing the input fields in the question ArrayList
		 */
		ArrayList<Integer> temp2 = new ArrayList<>();
		int temp1;
		do{
			temp1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);		
			if(!mg_containsInArray(temp2, temp1)) {
				temp2.add(temp1);
				question_arraylist.remove(temp1);
				question_arraylist.add(temp1, "::blank::");				
			}
		}while(temp2.size() <num_blanks);

		/**
		 * Storing the values of n1, n2, question ArrayList, and answer ArrayList in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer_array", answer_arraylist);
		result.put("question_array", question_arraylist);

		/**
		 * Return the HashMap with n1, n2, object name, object image, question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_counting_using_number_lines()
	 @description Displays image of the number line in the range of n1 to n2 and then randomly replaces index positions in the number line by an input field.  
	 @param level - int - Chooses a level. Values are 1, 2 or 3.
	 @param num_blanks - int - number of positions to be replaced by an input field. Values are 1 or 2.                        
	 @return HashMap (n1, n2, image for the number line, question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_using_number_lines(int level, int num_blanks) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, count;
		String image;

		num_blanks = 1;
		
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 5, random);
			n2 = n1 + 5;
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(6, 10, random);
			n2 = n1 + 5;
		} else {
			n1 = mg_giveRandomInteger(11, 15, random);
			n2 = n1 + 5;
		}

		/**
		 * Calculating the count for number of images to be displayed
		 */
		count = (n2 - n1) + 1;

		/**
		 * Creating image for the number line
		 */	    
		image = "number_line_".concat(Integer.toString(n1)).concat(".png");

		/**
		 * Returning the image name in the HashMap
		 */
		result.put("image", image);

		/**
		 * Ensuring num_blanks is always less than count 
		 */
		if(num_blanks >= count) {
			num_blanks = count - 1;
		}

		/**
		 * Ensuring num_blanks is always equal to 1 if num_blanks becomes zero 
		 */
		if(num_blanks == 0) {
			num_blanks = 1;
		}

		/**
		 * Creating an ArrayList for question and answer values
		 */
		ArrayList <String> question_arraylist = new ArrayList<>();
		ArrayList <Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing the values in the question and answer ArrayList
		 */
		for(int ii=n1; ii<=n2; ii++) {
			question_arraylist.add(Integer.toString(ii));
			answer_arraylist.add(ii);
		}

		/**
		 * Storing the input fields in the question ArrayList
		 */
		ArrayList<Integer> temp2 = new ArrayList<>();
		int temp1;
		do{
			temp1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);		
			if(!mg_containsInArray(temp2, temp1)) {
				temp2.add(temp1);
				question_arraylist.remove(temp1);
				question_arraylist.add(temp1, "::blank::");				
			}
		}while(temp2.size() <num_blanks);

		/**
		 * Storing the values of n1, n2, question ArrayList, and answer ArrayList in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with n1, n2, image for the number line, question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_putting_objects_on_the_frame()
	 @description Puts n1 number of objects on the frame.   
	 @param level - int - Chooses a level. Values are 1 or 2.                        
	 @return HashMap (n1, object name, object image)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_putting_objects_on_the_frame(int level) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String object_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random value for n1 
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
		} else {
			n1 = mg_giveRandomInteger(11, 20, random);
		}

		/**
		 * Creating an array of object names
		 */
		 String[] objects_array = {"apple", "ball", "bicycle", "book", "car", "diya", "mango", "orange", "eraser", "bulb"};
		
		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object and creating its image 
		 */
		String object;
		if(n1 == 1) {
			object = objects_array[rand1];
		} else {
			object = objects_array[rand1] + "s";
		}
			    
		object_image = objects_array[rand1].concat(".png");

		/**
		 * Returning the value of n1, object name and the image of the object to the HashMap
		 */
		result.put("number", n1);
		result.put("object", object);
		result.put("image", object_image);

		/**
		 * Return the HashMap with n1, object name, object image
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_counting_objects_from_frame()
	 @description Counts the number of objects shown in the frame.   
	 @param level - int - Chooses a level. Values are 1 or 2.                        
	 @return HashMap (object name, object image, answer)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_objects_from_frame(int level) {

		Map<String, Object> result = mg_get_counting_and_numbers_for_putting_objects_on_the_frame(level);

		/**
		 * Returning the value of object name, the image of the object, and count of the objects shown (n1) to the HashMap
		 */
		result.put("answer", result.get("number"));
		result.remove("number");

		/**
		 * Return the HashMap with object name, object image, answer
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_counting_up_and_down_from_image()
	 @description Gets the problem set data containing total number of objects left on adding or removing one object from the random number of objects.  
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (random number (n1), object name, object image, comparison value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_counting_up_and_down_from_image(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, answer;
		String object, object_image, comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple", "ball", "bicycle", "book", "car", "diya", "mango", "orange", "eraser", "bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object and its image
		 */
		object = objects_array[rand1];	    
		object_image = object.concat(".png");

		/**
		 * Returning the object name and object image
		 */
		result.put("object", object);
		result.put("image", object_image);

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 9, random); 	
		} else {
			n1 = mg_giveRandomInteger(10, 19, random);
		} 

		/**
		 * Creating an array for comparison value
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Storing the value of n1 and comparison value in the HashMap
		 */
		result.put("number", n1);
		result.put("comparison_value", comparison_value);

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {				/** if one object is added to the current number of objects */
			answer = n1 + 1;
		} else {			 							/** if one object is removed from the current number of objects */
			answer = n1 - 1;
		}

		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the upper limit and lower limit for the remaining mcq options
			 */
			int mcq_lower_limit, mcq_upper_limit;

			if(level == 1) {
				if((answer - 5) <= 3) {
					mcq_lower_limit = 3;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 10) {
					mcq_upper_limit = 10;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else {
				if((answer - 5) <= 11) {
					mcq_lower_limit = 11;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 20) {
					mcq_upper_limit = 20;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with random number (n1), object name, object image, comparison value, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_counting_forward_from_a_random_number()
	 @description Counts forward from n1.  
	 @param level - int - Chooses a level. Values are 1 or 2.                        
	 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_counting_forward_from_a_random_number(int level) {

		/**
		 * Declaring the variables
		 */
		int n1, count;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Generating random value for n1 
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 5, random);
		} else {
			n1 = mg_giveRandomInteger(6, 10, random);
		}

		/**
		 * Calculating the count for number
		 */
		count = 4;

		/**
		 * Creating ArrayLists for values of answer and question
		 */
		ArrayList <String> question_arraylist = new ArrayList<>();
		ArrayList <Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList
		 */
		question_arraylist.add(Integer.toString(n1));
		for(int ii=0; ii<count; ii++) {
			question_arraylist.add("::blank::");
		}

		/**
		 * Storing the values for answer ArrayList
		 */
		for(int ii=0; ii<=count; ii++) {
			answer_arraylist.add(n1 + ii);
		}

		/**
		 * Storing the values of question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("number", n1);
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList and answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_counting_backward_from_a_random_number()
	 @description Counts backward from n1.  
	 @param level - int - Chooses a level. Values are 1 or 2.                        
	 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_counting_backward_from_a_random_number(int level) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, count;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(5, 10, random);
			n2 = n1 - 4;
		} else {
			n1 = mg_giveRandomInteger(15, 20, random);
			n2 = n1 - 4;
		}

		/**
		 * Calculating the count for number
		 */
		count = (n1 - n2);

		/**
		 * Creating ArrayLists for values of answer and question
		 */
		ArrayList <String> question_arraylist = new ArrayList<>();
		ArrayList <Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList
		 */
		question_arraylist.add(Integer.toString(n1));
		for(int ii=0; ii<count; ii++) {
			question_arraylist.add("::blank::");
		}

		/**
		 * Storing the values for answer ArrayList
		 */
		for(int ii=0; ii<=count; ii++) {
			answer_arraylist.add(n1 - ii);
		}

		/**
		 * Storing the values of question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("number", n1);
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList and answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_number_before_or_after_a_random_number_with_number_lines()
	 @description Gets the problem set data containing number before or after a random number.  
	 @param level - int - Chooses a level. Values are 1 or 2.
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (n1, comparison value, image for the number line, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_number_before_or_after_a_random_number_with_number_lines(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, answer;
		String image, comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Generating random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 8, random);
		} else {
			int temp = mg_giveRandomInteger(0, 8, random);
			if(temp == 0) {
				n1 = mg_giveRandomInteger(11, 18, random);
			} else if(temp == 1) {
				n1 = mg_giveRandomInteger(21, 28, random);
			} else if(temp == 2) {
				n1 = mg_giveRandomInteger(31, 38, random);
			} else if(temp == 3) {
				n1 = mg_giveRandomInteger(41, 48, random);
			} else if(temp == 4) {
				n1 = mg_giveRandomInteger(51, 58, random);
			} else if(temp == 5) {
				n1 = mg_giveRandomInteger(61, 68, random);
			} else if(temp == 6) {
				n1 = mg_giveRandomInteger(71, 78, random);
			} else if(temp == 7) {
				n1 = mg_giveRandomInteger(81, 88, random);
			} else {
				n1 = mg_giveRandomInteger(91, 98, random);
			}
		}

		/**
		 * Creating image for the number line
		 */	    
		if(level == 1) {
			image = "forward_line_1.png";
		} else {
			if(n1 <= 19) {
				image = "forward_line_2.png";
			} else if(n1 <= 29) {
				image = "forward_line_3.png";
			} else if(n1 <= 39) {
				image = "forward_line_4.png";
			} else if(n1 <= 49) {
				image = "forward_line_5.png";
			} else if(n1 <= 59) {
				image = "forward_line_6.png";
			} else if(n1 <= 69) {
				image = "forward_line_7.png";
			} else if(n1 <= 79) {
				image = "forward_line_8.png";
			} else if(n1 <= 89) {
				image = "forward_line_9.png";
			} else {
				image = "forward_line_10.png";
			}
		}
		
		/**
		 * Returning the value of n1, image name in the HashMap
		 */
		result.put("number", n1);
		result.put("image", image);

		/**
		 * Creating an array for comparison value
		 */
		String[] comparison_array = {"before", "after"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Storing the comparison value in the HashMap
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "before") {				/** if the required number should be before the random number */
			answer = n1 - 1;
		} else {			 							/** if the required number should be after the random number */
			answer = n1 + 1;
		}

		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if(comparison_value == "before") {
				if(level == 1) {

					/**
					 * Generating remaining mcq options within the calculated range
					 */
					array = IntStream.rangeClosed(0, 7).toArray();
				} else {

					/**
					 * Calculating the upper limit and lower limit for the remaining mcq options
					 */
					int mcq_lower_limit, mcq_upper_limit;

					if((answer - 5) <= 10) {
						mcq_lower_limit = 10;  
					} else {
						mcq_lower_limit = answer - 5;
					}

					if((answer + 5) >= 97) {
						mcq_upper_limit = 97;  
					} else {
						mcq_upper_limit = answer + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range
					 */
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
				}
			} else {
				if(level == 1) {

					/**
					 * Generating remaining mcq options within the calculated range
					 */
					array = IntStream.rangeClosed(2, 9).toArray();
				} else {

					/**
					 * Calculating the upper limit and lower limit for the remaining mcq options
					 */
					int mcq_lower_limit, mcq_upper_limit;

					if((answer - 5) <= 12) {
						mcq_lower_limit = 12;  
					} else {
						mcq_lower_limit = answer - 5;
					}

					if((answer + 5) >= 99) {
						mcq_upper_limit = 99;  
					} else {
						mcq_upper_limit = answer + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range
					 */
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
				}
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, comparison value, image for the number line, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_number_in_between_two_numbers_with_number_lines()
	 @description Gets the problem set data containing number in between random number n1 and n1 + 2.  
	 @param level - int - Chooses a level. Values are 1 or 2.
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (n1, n1 + 2, image for the number line, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_number_in_between_two_numbers_with_number_lines(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n1_plus_2, answer;
		String image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Generating random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(0, 7, random);
		} else {
			int temp = mg_giveRandomInteger(0, 8, random);
			if(temp == 0) {
				n1 = mg_giveRandomInteger(8, 17, random);
			} else if(temp == 1) {
				n1 = mg_giveRandomInteger(18, 27, random);
			} else if(temp == 2) {
				n1 = mg_giveRandomInteger(28, 37, random);
			} else if(temp == 3) {
				n1 = mg_giveRandomInteger(38, 47, random);
			} else if(temp == 4) {
				n1 = mg_giveRandomInteger(48, 57, random);
			} else if(temp == 5) {
				n1 = mg_giveRandomInteger(58, 67, random);
			} else if(temp == 6) {
				n1 = mg_giveRandomInteger(68, 77, random);
			} else if(temp == 7) {
				n1 = mg_giveRandomInteger(78, 87, random);
			} else {
				n1 = mg_giveRandomInteger(88, 97, random);
			}
			
		}

		/**
		 * Calculating the value for n1 + 2
		 */
		n1_plus_2 = n1 + 2;

		/**
		 * Creating image for the number line
		 */	    
		if(level == 1) {
			image = "forward_line_1.png";
		} else {
			if(n1 <= 19) {
				image = "forward_line_2.png";
			} else if(n1 <= 29) {
				image = "forward_line_3.png";
			} else if(n1 <= 39) {
				image = "forward_line_4.png";
			} else if(n1 <= 49) {
				image = "forward_line_5.png";
			} else if(n1 <= 59) {
				image = "forward_line_6.png";
			} else if(n1 <= 69) {
				image = "forward_line_7.png";
			} else if(n1 <= 79) {
				image = "forward_line_8.png";
			} else if(n1 <= 89) {
				image = "forward_line_9.png";
			} else {
				image = "forward_line_10.png";
			}
		}

		/**
		 * Returning the value of n1, image name, and n1 + 2 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n1_plus_2);
		result.put("image", image);

		/**
		 * Calculating the answer
		 */				
		answer = n1 + 1;

		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0}; 

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(1, 8).toArray();
			} else {

				/**
				 * Calculating the upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((answer - 5) <= 10) {
					mcq_lower_limit = 10;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 98) {
					mcq_upper_limit = 98;  
				} else {
					mcq_upper_limit = answer + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, n1 + 2, image for the number line, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_filling_values_in_the_table()
	 @description Gets the problem set data containing values to be entered for input fields in the table.  
	 @param level - int - Chooses a level. Values are 1 or 2.               
	 @param rows - int - Number of rows in the table. Default value is 3.
	 @param columns - int - Number of columns in the table. Default value is 3.
	 @param num_blanks - int - Number of columns to be replaced by an input field in each row. Default value is 1.          
	 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_filling_values_in_the_table(int level, int rows, int columns, int num_blanks) {

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Creating ArrayLists for question, answer, to check that random numbers in first column are not the same, to hold the positions where input fields are to be placed   	    
		 */
		ArrayList<ArrayList<String>> question_arraylist = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> answer_arraylist = new ArrayList<ArrayList<String>>();
		ArrayList<Integer> n1_arrayList = new ArrayList<Integer>();
		ArrayList<Integer> n2_arrayList = new ArrayList<Integer>();

		boolean check_v = false;  	/** to check whether all the values in the first column are unique or not */ 
		int random_number;      		

		for(int ii = 0; ii < rows; ii++) {
			check_v = false;
			do{

				/**
				 * Generating values for random numbers in the first column 
				 */
				if(level == 1) {
					random_number = mg_giveRandomInteger(1, 8, random);
				} else {
					random_number = mg_giveRandomInteger(10, 98, random);
				}
				check_v = true;

				/**
				 * Ensuring that each value in the first column is unique
				 */
				for(int mm = 0 ; mm < answer_arraylist.size() ; mm++) {
					if(mg_containsInArray(n1_arrayList, random_number)) {
						check_v = false;
					}
				}

				if(check_v == true) {
					n1_arrayList.add(random_number);
				}
			} while ( check_v == false );

			/**
			 * Initializing the answer and question ArrayLists
			 */
			answer_arraylist.add(new ArrayList<String>());
			question_arraylist.add(new ArrayList<String>());

			/**
			 * Storing the random numbers in first column of the table
			 */
			answer_arraylist.get(ii).add(Integer.toString(random_number));
			question_arraylist.get(ii).add(Integer.toString(random_number));

			/**
			 * Calculating the random number + 1 and random number + 2 values for all the rows 
			 */
			for(int jj = 1 ; jj < columns ; jj++) {
				answer_arraylist.get(ii).add(Integer.toString(random_number + jj));
				question_arraylist.get(ii).add(Integer.toString(random_number + jj));
			}
		}

		/**
		 * Randomly inserting input field in each row of the table
		 */
		for(int ii = 0; ii < rows; ii++) {
			check_v = false;
			n2_arrayList = new ArrayList<Integer>();
			do{

				/**
				 * Generating random number for the column that needs to be replaced by an input field 
				 */
				random_number = mg_giveRandomInteger(0, columns - 1, random);
				check_v = true;

				/**
				 * Ensuring that the same column in the subsequent rows is not replaced by an input field
				 */
				if(!mg_containsInArray(n2_arrayList, random_number)) {
					n2_arrayList.add(random_number);
					check_v = false;
				}
			} while ( n2_arrayList.size() < num_blanks);

			/**
			 * Removing the value at randomly generated column number and replacing it by an input field  
			 */
			for(int jj = 0 ; jj < columns ; jj++) {
				if(mg_containsInArray(n2_arrayList, jj)) {
					question_arraylist.get(ii).remove(jj);
					question_arraylist.get(ii).add(jj, "::blank::");
				}
			}
		}

		/**
		 * Returning the values of answer and question ArrayList to the HashMap
		 */
		result.put("answer_array", answer_arraylist);
		result.put("question_array", question_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_word_to_digit_of_a_number()
	 @description Gets the problem set data containing digits of a number that is in words in the question  
	 @param level - int - Chooses a level. Values are 1, 2, 3, 4, 5, 6, 7, or 8.                   
	 @param mcq - boolean - Multiple choice options required true / false - default is false
	 @return HashMap (random number in words, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_word_to_digit_of_a_number(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String n1_in_words;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Generating a random value for n1 
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(11, 20, random);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(21, 100, random);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger(101, 1000, random);
		} else if(level == 5) {
			n1 = mg_giveRandomInteger(1001, 10000, random);
		} else if(level == 6) {
			n1 = mg_giveRandomInteger(10001, 100000, random);
		} else if(level == 7) {
			n1 = mg_giveRandomInteger(100001, 1000000, random);
		} else {
			n1 = mg_giveRandomInteger(1000001, 10000000, random);
		}

		/**
		 * Getting the equivalent value of n1 in words
		 */
		n1_in_words = convertNumberToWords(n1);

		/**
		 * Storing the values of n1_in_words and answer in the HashMap
		 */
		result.put("number_word", n1_in_words);
		result.put("answer", n1);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(n1);

			/**
			 * Creating an int array
			 */
			int[] array = {0}; 

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(1, 10).toArray();
			} else if(level == 2) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(11, 20).toArray();
			} else if(level == 3) {

				/**
				 * Calculating the upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((n1 - 5) <= 21) {
					mcq_lower_limit = 21;  
				} else {
					mcq_lower_limit = n1 - 5;
				}

				if((n1 + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = n1 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			} else if(level == 4) {

				/**
				 * Calculating the upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((n1 - 5) <= 101) {
					mcq_lower_limit = 101;  
				} else {
					mcq_lower_limit = n1 - 5;
				}

				if((n1 + 5) >= 1000) {
					mcq_upper_limit = 1000;  
				} else {
					mcq_upper_limit = n1 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			} else if(level == 5) {

				/**
				 * Calculating the upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((n1 - 5) <= 1001) {
					mcq_lower_limit = 1001;  
				} else {
					mcq_lower_limit = n1 - 5;
				}

				if((n1 + 5) >= 10000) {
					mcq_upper_limit = 10000;  
				} else {
					mcq_upper_limit = n1 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			} else if(level == 6) {

				/**
				 * Calculating the upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((n1 - 5) <= 10001) {
					mcq_lower_limit = 10001;  
				} else {
					mcq_lower_limit = n1 - 5;
				}

				if((n1 + 5) >= 100000) {
					mcq_upper_limit = 100000;  
				} else {
					mcq_upper_limit = n1 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			} else if(level == 7) {

				/**
				 * Calculating the upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((n1 - 5) <= 100001) {
					mcq_lower_limit = 100001;  
				} else {
					mcq_lower_limit = n1 - 5;
				}

				if((n1 + 5) >= 1000000) {
					mcq_upper_limit = 1000000;  
				} else {
					mcq_upper_limit = n1 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			} else {

				/**
				 * Calculating the upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((n1 - 5) <= 1000001) {
					mcq_lower_limit = 1000001;  
				} else {
					mcq_lower_limit = n1 - 5;
				}

				if((n1 + 5) >= 10000000) {
					mcq_upper_limit = 10000000;  
				} else {
					mcq_upper_limit = n1 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with random number in words, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	@name mg_get_counting_and_numbers_digit_to_word_of_a_number()
	@description Gets the problem set data containing number in words for the digits shown in the question 
	@param level - int - Chooses a level. Values are 1, 2, or 3.                   
	@param mcq - boolean - Multiple choice options required true / false - default is false
	@return HashMap (n1, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_digit_to_word_of_a_number(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, h1 = 0, t1 = 0, u1 = 0;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Generating a random value for n1 
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 9, random);
		} else if(level == 2) {
			t1 = 1;
			u1 = mg_giveRandomInteger(0, 9, random);
			n1 = (t1 * 10) + u1;
		} else if(level == 3) {
			t1 = mg_giveRandomInteger(2, 9, random);
			u1 = mg_giveRandomInteger(0, 9, random);
			n1 = (t1 * 10) + u1;
		} else {
			h1 = mg_giveRandomInteger(1, 9, random);
			t1 = mg_giveRandomInteger(0, 9, random);
			u1 = mg_giveRandomInteger(0, 9, random);
			n1 = (h1 * 100) + (t1 * 10) + u1;
		}

		/**
		 * Getting the equivalent value of n1 in words
		 */
		answer = convertNumberToWords(n1);

		/**
		 * Storing the values of n1 and answer in the HashMap
		 */
		result.put("number", n1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an ArrayList for storing wrong mcq options
			 */
			ArrayList<String> wrong_answer_set = new ArrayList<String>();

			if(level == 1) {

				/**
				 * Creating wrong mcq options
				 */
				String wrong_1 = convertNumberToWords(n1 - 2);
				if(n1 - 2 <= 0) 
					wrong_1 = convertNumberToWords(n1 + 5);
				
				String wrong_2 = convertNumberToWords(n1 - 1);
				if(n1 - 1 <= 0) 
					wrong_2 = convertNumberToWords(n1 + 6);
				String wrong_3 = convertNumberToWords(n1 + 1);
				String wrong_4 = convertNumberToWords(n1 + 2);
				String wrong_5 = convertNumberToWords(n1 + 3);
				String wrong_6 = convertNumberToWords(n1 + 4);
				String wrong_7 = convertNumberToWords(10 * n1);

				/**
				 * Storing the wrong options in ArrayList
				 */
				wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4, wrong_5, wrong_6, wrong_7));	
			} else if(level == 2 || level == 3) {

				/**
				 * Creating wrong mcq options
				 */
				String wrong_1 = convertNumberToWords(n1 - 2);
				if(n1 - 2 <= 0) 
					wrong_1 = convertNumberToWords(n1 + 5);
				
				String wrong_2 = convertNumberToWords(n1 - 1);
				if(n1 - 1 <= 0) 
					wrong_2 = convertNumberToWords(n1 + 6);
				String wrong_3 = convertNumberToWords(n1 + 1);
				String wrong_4 = convertNumberToWords(n1 + 2);
				String wrong_5 = convertNumberToWords(n1 + 3);
				String wrong_6 = convertNumberToWords(n1 + 4);

				/**
				 * Storing the wrong options in ArrayList
				 */
				wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4, wrong_5, wrong_6));	
			}  else {

				/**
				 * Creating wrong mcq options
				 */
				String wrong_1 = convertNumberToWords(n1 - 2);
				if(n1 - 2 <= 0) 
					wrong_1 = convertNumberToWords(n1 + 5);
				
				String wrong_2 = convertNumberToWords(n1 - 1);
				if(n1 - 1 <= 0) 
					wrong_2 = convertNumberToWords(n1 + 6);
				String wrong_3 = convertNumberToWords(n1 + 1);
				String wrong_4 = convertNumberToWords(n1 + 2);
				String wrong_5 = convertNumberToWords(n1 + 3);
				String wrong_6 = convertNumberToWords(n1 + 4);

				/**
				 * Storing the wrong options in ArrayList
				 */
				wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4, wrong_5, wrong_6));	
			}


			/**
			 * Shuffling the wrong mcq options
			 */
			Collections.shuffle(wrong_answer_set);

			/**
			 * Storing the values of wrong mcq options in the ArrayList
			 */
			mcq_option.add(wrong_answer_set.get(0));
			mcq_option.add(wrong_answer_set.get(1));
			mcq_option.add(wrong_answer_set.get(2));

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with n1, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_skip_counting_without_images()
	 @description Gets the problem set data containing answers for the input fields in the increasing patterns with constant difference.                           
	 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_skip_counting_without_images() {

		/**
		 * Declaring the variables
		 */
		int n, x, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random values for n and x
		 */
		n = mg_giveRandomInteger(1, 50, random);
		x = mg_giveRandomInteger(2, 5, random);

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		
		/**
		 * Storing values for question ArrayList and answer ArrayList
		 */
		for(int ii=0; ii<=5; ii++) {
			question_arraylist.add(Integer.toString(n + (ii * x)));
		}

		/**
		 * Generating random number for an input field
		 */
		int rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

		/**
		 * Replacing one value in the question ArrayList by an input field
		 */
		answer = Integer.parseInt(question_arraylist.get(rand1));
		question_arraylist.remove(rand1);
		question_arraylist.add(rand1, "::blank::");

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer", answer);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_counting_by_steps()
	 @description Counts forward from n1 in steps.
	 @param count - int - contains the total number of values to be calculated
	 @param num_blanks - int - Number of positions to be replaced by an input field                           
	 @return HashMap (n1, steps, question ArrayList, ArrayList containing answer for the blank positions)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_counting_by_steps(int count, int num_blanks) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String steps;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Creating arrays containing values of n1 and their corresponding steps  
		 */
		int[] n1_values = {2, 3, 4, 5, 10};
		String[] steps_values = {"twos", "threes", "fours", "fives", "tens"};

		/**
		 * Generating a random number for selecting values for n1 and steps 
		 */
		int rand1 = mg_giveRandomInteger(0, 4, random);

		/**
		 * Selecting values for n1 and steps 
		 */
		n1 = n1_values[rand1];
		steps = steps_values[rand1];

		/**
		 * Storing the values of n1 and steps in the HashMap
		 */
		result.put("number1", n1);
		result.put("steps", steps);

		/**
		 * Creating ArrayLists for question and answers  
		 */
		ArrayList <String> question_arraylist = new ArrayList<>();
		ArrayList <Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing the values for question and answers in the ArrayList
		 */
		for(int ii=1; ii<=count; ii++) {
			question_arraylist.add(Integer.toString(n1 * ii));
			answer_arraylist.add(n1 * ii);
		}

		/**
		 * Creating the question ArrayList with input fields
		 */
		int temp = count - num_blanks;
		for(int ii=temp; ii<count; ii++) {
			question_arraylist.remove(ii);
			question_arraylist.add(ii, "::blank::");
		}

		/**
		 * Storing the values of question ArrayList, and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with n1, steps, question ArrayList, ArrayList containing answer for the blank positions
		 */ 
		return result;    
	}

	/**
		     @name mg_get_counting_and_numbers_counting_by_steps_in_words()
			 @description Gets the number after a random number when counting in steps.
			 @param level - int - Chooses a level. Values are 1 or 2.     
			 @return HashMap (n1, steps, answer)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_counting_by_steps_in_words(int level) {

		/**
		 * Declaring the variables
		 */
		int n1, answer;
		String steps;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();  

		/**
		 * Creating arrays containing values of n1 and their corresponding steps  
		 */
		int[] n1_values = {2, 3, 4, 5, 10};
		String[] steps_values = {"twos", "threes", "fours", "fives", "tens"};

		/**
		 * Generating a random number for selecting values for n1 and steps 
		 */
		int rand1 = mg_giveRandomInteger(0, 4, random);

		/**
		 * Selecting values for n1 and steps 
		 */
		if(level == 1) {
			n1 = n1_values[rand1] * mg_giveRandomInteger(2, 9, random);
		} else {
			n1 = n1_values[rand1] * mg_giveRandomInteger(10, 19, random);
		}
		steps = steps_values[rand1];

		/**
		 * Storing the values of n1 and steps in the HashMap
		 */
		result.put("number", n1);
		result.put("steps", steps);

		/**
		 * Calculating the answer
		 */
		answer = n1 + n1_values[rand1];

		/**
		 * Storing the value of answer in the ArrayList
		 */
		result.put("answer", answer);

		/**
		 * Return the HashMap with n1, steps, answer
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_even_or_odd_number_of_objects_with_images()
	 @description Gets the problem set data identifying whether the number of objects shown are even or odd.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (random number (n1), object name, object image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_even_or_odd_number_of_objects_with_images(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String object, object_image, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"apple", "ball", "bicycle", "book", "car", "diya", "mango", "orange", "eraser", "bulb"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object and its image
		 */
		object = objects_array[rand1];	    
		object_image = object.concat(".png");

		/**
		 * Returning the object name and object image
		 */
		result.put("object", object);
		result.put("image", object_image);

		/**
		 * Generating a random value for n1
		 */
		n1 = mg_giveRandomInteger(1, 12, random); 	 

		/**
		 * Obtaining the answer
		 */
		if(n1 % 2 == 0) {
			answer = "Even";
		} else {
			answer = "Odd";
		}

		/**
		 * Storing the value of n1 and answer in the HashMap
		 */
		result.put("number", n1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of mcq options in the ArrayList
			 */
			mcq_option.add("Even");
			mcq_option.add("Odd");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with random number (n1), object name, object image, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_checking_whether_a_random_number_is_even_or_odd()
	 @description Gets the problem set data identifying whether the random number is even or odd.
	 @param level - int - Chooses a level. Values are 1, 2 or 3.   
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap (random number (n1), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_checking_whether_a_random_number_is_even_or_odd(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(0, 20, random); 	 
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(21, 100, random);
		} else {
			n1 = mg_giveRandomInteger(101, 1000, random);
		}

		/**
		 * Obtaining the answer
		 */
		if(n1 % 2 == 0) {
			answer = "Even";
		} else {
			answer = "Odd";
		}

		/**
		 * Storing the value of n1 and answer in the HashMap
		 */
		result.put("number", n1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of mcq options in the ArrayList
			 */
			mcq_option.add("Even");
			mcq_option.add("Odd");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with random number (n1), answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_even_or_odd_number_before_or_after_a_random_number()
	 @description Gets the problem set data containing even or odd number before or after a random number.    
	 @param level - int - Chooses a level. Values are 1, 2 or 3.
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (random number (n1), parity value (even or odd), comparison value (before or after), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_even_or_odd_number_before_or_after_a_random_number(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, answer;
		String parity_value, comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array for parity values
		 */
		String[] parity_array = {"even", "odd"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, parity_array.length - 1, random);

		/**
		 * Selecting a parity value
		 */
		parity_value = parity_array[rand1];

		/**
		 * Creating an array for comparison values
		 */
		String[] comparison_array = {"before", "after"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 20, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(21, 100, random);
		} else {
			n1 = mg_giveRandomInteger(101, 1000, random);
		}

		/**
		 * Calculating the answer
		 */
		if(comparison_value == "before") {
			if(parity_value == "even") {
				if(n1 % 2 == 0) {
					answer = n1 - 2;
				} else {
					answer = n1 - 1;
				}
			} else {
				if(n1 % 2 == 0) {
					answer = n1 - 1;
				} else {
					answer = n1 - 2;
				}
			}
		} else {
			if(parity_value == "odd") {
				if(n1 % 2 == 0) {
					answer = n1 + 1;
				} else {
					answer = n1 + 2;
				}
			} else {
				if(n1 % 2 == 0) {
					answer = n1 + 2;
				} else {
					answer = n1 + 1;
				}
			}
		}

		/**
		 * Storing the value of parity value, comparison value, n1, and answer in the HashMap
		 */
		result.put("parity_value", parity_value);
		result.put("comparison_value", comparison_value);
		result.put("number", n1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of answer in the ArrayList
			 */
			mcq_option.add(answer);
			mcq_option.add(answer - 1);
			mcq_option.add(answer + 1);
			mcq_option.add(answer + 2);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with random number (n1), parity value (even or odd), comparison value (before or after), answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_checking_whether_addition_of_two_numbers_is_odd_or_even()
	 @description Gets the problem set data identifying whether the result of addition of two numbers is even or odd.    
	 @param level - int - Chooses a level. Values are 1, 2 or 3.
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap (n1, n2, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_checking_whether_addition_of_two_numbers_is_odd_or_even(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 100, random);
			n2 = mg_giveRandomInteger(1, 100, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(101, 1000, random);
			n2 = mg_giveRandomInteger(101, 1000, random);
		} else {
			n1 = mg_giveRandomInteger(1001, 10000000, random);
			n2 = mg_giveRandomInteger(1001, 10000000, random);
		}

		/**
		 * Obtaining the answer
		 */
		int sum = n1 + n2;
		if(sum % 2 == 0) {
			answer = "Even";
		} else {
			answer = "Odd";
		}	    

		/**
		 * Storing the value of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of mcq options in the ArrayList
			 */
			mcq_option.add("Even");
			mcq_option.add("Odd");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, n2, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_checking_whether_subtraction_of_two_numbers_is_odd_or_even()
	 @description Gets the problem set data identifying whether the result of subtraction of two numbers is even or odd.    
	 @param level - int - Chooses a level. Values are 1, 2 or 3.
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap (n1, n2, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_checking_whether_subtraction_of_two_numbers_is_odd_or_even(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 100, random);
			n2 = mg_giveRandomInteger(1, n1 - 1, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(102, 1000, random);
			n2 = mg_giveRandomInteger(101, n1 - 1, random);
		} else {
			n1 = mg_giveRandomInteger(1002, 10000000, random);
			n2 = mg_giveRandomInteger(1001, n1 - 1, random);
		}

		/**
		 * Obtaining the answer
		 */
		int subtraction = n1 - n2;
		if(subtraction % 2 == 0) {
			answer = "Even";
		} else {
			answer = "Odd";
		}	    

		/**
		 * Storing the value of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of mcq options in the ArrayList
			 */
			mcq_option.add("Even");
			mcq_option.add("Odd");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, n2, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_checking_whether_multiplication_of_two_numbers_is_odd_or_even()
	 @description Gets the problem set data identifying whether the result of multiplication of two numbers is even or odd.    
	 @param level - int - Chooses a level. Values are 1, 2 or 3.
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap (n1, n2, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_checking_whether_multiplication_of_two_numbers_is_odd_or_even(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 20, random);
			n2 = mg_giveRandomInteger(1, 20, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(21, 100, random);
			n2 = mg_giveRandomInteger(21, 100, random);
		} else {
			n1 = mg_giveRandomInteger(101, 1000000, random);
			n2 = mg_giveRandomInteger(101, 1000000, random);
		}

		/**
		 * Obtaining the answer
		 */
		int multiplication = n1 * n2;
		if(multiplication % 2 == 0) {
			answer = "Even";
		} else {
			answer = "Odd";
		}	    

		/**
		 * Storing the value of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of mcq options in the ArrayList
			 */
			mcq_option.add("Even");
			mcq_option.add("Odd");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, n2, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_checking_whether_division_of_two_numbers_is_odd_or_even()
	 @description Gets the problem set data identifying whether the result of division of two numbers is even or odd.    
	 @param level - int - Chooses a level. Values are 1, 2 or 3.
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap (n3, n1, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_checking_whether_division_of_two_numbers_is_odd_or_even(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 20, random);
			n2 = mg_giveRandomInteger(1, 20, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(21, 100, random);
			n2 = mg_giveRandomInteger(21, 100, random);
		} else {
			n1 = mg_giveRandomInteger(101, 10000, random);
			n2 = mg_giveRandomInteger(101, 10000, random);
		}

		/**
		 * Calculating the value of n3
		 */
		n3 = n1 * n2;

		/**
		 * Obtaining the answer
		 */
		if(n2 % 2 == 0) {
			answer = "Even";
		} else {
			answer = "Odd";
		}	    

		/**
		 * Storing the value of n3, n1, and answer in the HashMap
		 */
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of mcq options in the ArrayList
			 */
			mcq_option.add("Even");
			mcq_option.add("Odd");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n3, n1, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_identifying_an_object()
	 @description Gets the problem set data identifying which object at the nth from left or right.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (question ArrayList, nth position number, direction value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_identifying_an_object(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n;
		String direction_value, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an ArrayList for storing images of objects
		 */
		ArrayList <String> object_images = new ArrayList<String>(Arrays.asList("apple", "ball", "bicycle", "book", "car", "diya", "mango", "orange", "eraser", "bulb"));

		/**
		 * Shuffling the stored images of objects
		 */
		Collections.shuffle(object_images);

		/**
		 * Creating an ArrayList for storing 10 images out of the above ArrayList
		 */
		ArrayList <String> question_arraylist = new ArrayList<>();

		/**
		 * Storing 10 images in the ArrayList and returning the question ArrayList to the HashMap
		 */
		for(int ii=0; ii<10; ii++) {
			question_arraylist.add(object_images.get(ii) + ".png");
		}
		result.put("question_array", question_arraylist);

		/**
		 * Generating a random number for nth position and storing its value in the HashMap
		 */
		n = mg_giveRandomInteger(1, 10, random);
		result.put("number", n);
		result.put("number_ordinal", mg_ordinal_type_2(n));

		/**
		 * Creating an array for direction values
		 */
		String[] direction_array = {"left", "right"};

		/**
		 * Generating a random number for selecting a direction value 
		 */
		int rand1 = mg_giveRandomInteger(0, direction_array.length - 1, random);

		/**
		 * Selecting a direction value and storing its value in the HashMap
		 */
		direction_value = direction_array[rand1];
		result.put("direction_value", direction_value);

		/**
		 * Obtaining the answer and storing its value in the HashMap
		 */
		int temp1;
		if(direction_value == "left") {
			answer = question_arraylist.get(n - 1);
			temp1 = n - 1; 
		} else {
			answer = question_arraylist.get(10 - n);
			temp1 = 10 - n;
		}
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an ArrayList for storing index positions of the remaining mcq options
			 */
			ArrayList <Integer> mcq_indexes = new ArrayList<>();
			mcq_indexes.add(temp1);

			/**
			 * Creating the remaining mcq options
			 */
			int temp;
			do{
				temp = mg_giveRandomInteger(0, 9, random);
				if(!mg_containsInArray(mcq_indexes, temp)) {
					mcq_indexes.add(temp);
				}
			} while (mcq_indexes.size() < 4 );

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(question_arraylist.get(mcq_indexes.get(0)));
			mcq_option.add(question_arraylist.get(mcq_indexes.get(1)));
			mcq_option.add(question_arraylist.get(mcq_indexes.get(2)));
			mcq_option.add(question_arraylist.get(mcq_indexes.get(3)));

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question ArrayList, nth position number, direction value, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_identifying_whether_number_is_a_cardinal_or_ordinal_number()
	 @description Gets the problem set data identifying whether the random number is a ordinal or cardinal number.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap (n1, n2, n3, n4, number type, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_identifying_whether_number_is_a_cardinal_or_ordinal_number(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4;
		String number_type;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n1, n2, n3, n4
		 */
		n1 = mg_giveRandomInteger(1, 100, random);
		do{
			n2 = mg_giveRandomInteger(1, 100, random);
		} while(n2 == n1);
		do{
			n3 = mg_giveRandomInteger(1, 100, random);
		} while(n3 == n2 || n3 == n1);
		do{
			n4 = mg_giveRandomInteger(1, 100, random);
		} while(n4 == n3 || n4 == n2 || n4 == n3);

		/**
		 * Creating an array for number types
		 */
		String[] number_type_array = {"an ordinal", "a cardinal"};

		/**
		 * Generating a random number for selecting a number type 
		 */
		int rand1 = mg_giveRandomInteger(0, number_type_array.length - 1, random);

		/**
		 * Selecting a number type and storing its value in the HashMap
		 */
		number_type = number_type_array[rand1];
		result.put("number_type", number_type);

		int rand2 = mg_giveRandomInteger(0, 1, random);

		String temp1, temp2, temp3, temp4 = null;
		if(number_type == "an ordinal") {
			if(rand2 == 0) {
				temp1 = mg_ordinal_type_1(n1);
				temp2 = convertNumberToWords(n2);
				temp3 = convertNumberToWords(n3);

				/**
				 * Storing the required values of n1, n2, n3, n4, and answer in the HashMap
				 */
				result.put("number1", temp1);
				result.put("number2", temp2);
				result.put("number3", temp3);
				result.put("number4", n4);
				result.put("answer", temp1);
			} else {
				temp1 = mg_ordinal_type_2(n1);
				temp2 = convertNumberToWords(n2);
				temp3 = convertNumberToWords(n3);

				/**
				 * Storing the required values of n1, n2, n3, n4, and answer in the HashMap
				 */
				result.put("number1", temp1);
				result.put("number2", temp2);
				result.put("number3", temp3);
				result.put("number4", n4);
				result.put("answer", temp1);
			}
		} else {
			if(rand2 == 0) {
				temp1 = convertNumberToWords(n1);
				temp2 = mg_ordinal_type_2(n2);
				temp3 = mg_ordinal_type_1(n3);
				temp4 = mg_ordinal_type_1(n4);

				/**
				 * Storing the required values of n1, n2, n3, n4, and answer in the HashMap
				 */
				result.put("number1", temp1);
				result.put("number2", temp2);
				result.put("number3", temp3);
				result.put("number4", temp4);
				result.put("answer", temp1);
			} else {
				temp1 = mg_ordinal_type_2(n2);
				temp2 = mg_ordinal_type_1(n3);
				temp3 = mg_ordinal_type_1(n4);

				/**
				 * Storing the required values of n1, n2, n3, n4, and answer in the HashMap
				 */
				result.put("number1", n1);
				result.put("number2", temp1);
				result.put("number3", temp2);
				result.put("number4", temp3);
				result.put("answer", n1);
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing mcq options inn the ArrayList
			 */
			if(number_type == "an ordinal") {
				if(rand2 == 0) {
					mcq_option.add(temp1);
					mcq_option.add(temp2);
					mcq_option.add(temp3);
					mcq_option.add(Integer.toString(n4));
				} else {
					mcq_option.add(temp1);
					mcq_option.add(temp2);
					mcq_option.add(temp3);
					mcq_option.add(Integer.toString(n4));
				}
			} else {
				if(rand2 == 0) {
					mcq_option.add(temp1);
					mcq_option.add(temp2);
					mcq_option.add(temp3);
					mcq_option.add(temp4);
				} else {
					mcq_option.add(temp1);
					mcq_option.add(temp2);
					mcq_option.add(temp3);
					mcq_option.add(Integer.toString(n1));
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, n2, n3, n4, number type, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_making_the_smallest_and_largest_number_from_given_digits()
	 @description Gets the problem set data containing the smallest and largest number that can be made from the given digits.
	 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.                            
	 @return HashMap (n1, n2, n3, n4, n5, comparison value, answer)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_making_the_smallest_and_largest_number_from_given_digits(int level) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4, n5, answer;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n1, n2, n3, n4, and n5
		 */
		n1 = mg_giveRandomInteger(1, 9, random);
		n2 = mg_giveRandomInteger(1, 9, random);
		n3 = mg_giveRandomInteger(1, 9, random);
		n4 = mg_giveRandomInteger(1, 9, random);
		n5 = mg_giveRandomInteger(1, 9, random);

		/**
		 * Creating an array for comparison values
		 */
		String[] comparison_array = {"smallest", "largest"};

		/**
		 * Generating a random number for selecting a comparison value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value and storing its value in the HashMap
		 */
		comparison_value = comparison_array[rand1];
		result.put("comparison_value", comparison_value);

		/**
		 * Creating an array for storing the random digits
		 */
		int[] a;
		int temp, count; 		/** temp is a temporary variable, while count contains the number of digits in the array */

		if(level == 1) {
			a = new int[] {n1, n2};
			count = 2;

			/**
			 * Storing the values of digits in the HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
		} else if(level == 2) {
			a = new int[] {n1, n2, n3};
			count = 3;

			/**
			 * Storing the values of digits in the HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number3", n3);
		} else if(level == 3) {
			a = new int[] {n1, n2, n3, n4};
			count = 4;

			/**
			 * Storing the values of digits in the HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number3", n3);
			result.put("number4", n4);
		} else {
			a = new int[] {n1, n2, n3, n4, n5};
			count = 5;

			/**
			 * Storing the values of digits in the HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number3", n3);
			result.put("number4", n4);
			result.put("number5", n5);
		}

		if(comparison_value == "smallest") { 			/** arranging all the digits in the array in ascending order */
			for (int ii = 0; ii < count; ii++) {
				for (int jj = ii + 1; jj < count; jj++) {
					if (a[ii] > a[jj]) {
						temp = a[ii];
						a[ii] = a[jj];
						a[jj] = temp;
					}
				}
			}
		} else {										/** arranging all the digits in the array in descending order */
			for (int ii = 0; ii < count; ii++) {
				for (int jj = ii + 1; jj < count; jj++) {
					if (a[ii] < a[jj]) {
						temp = a[ii];
						a[ii] = a[jj];
						a[jj] = temp;
					}
				}
			}
		}

		/**
		 * Calculating the answer
		 */
		if(level == 1) {
			answer = (a[0] * 10) + a[1];	
		} else if(level == 2) {
			answer = (a[0] * 100) + (a[1] * 10) + a[2];
		} else if(level == 3) {
			answer = (a[0] * 1000) + (a[1] * 100) + (a[2] * 10) + a[3];
		} else {
			answer = (a[0] * 10000) + (a[1] * 1000) + (a[2] * 100) + (a[3] * 10) + a[4];
		}

		/**
		 * Storing the value of answer in the HashMap	
		 */
		result.put("answer", answer);

		/**
		 * Return the HashMap with n1, n2, n3, n4, n5, comparison value, answer
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_arranging_in_order()
	 @description Gets the problem set data containing the numbers arranged in either ascending or descending order.
	 @param level - int - Chooses a level. Values are 1, 2 or 3.                            
	 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_arranging_in_order(int level) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, n4;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n1, n2, n3, and n4
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 20, random);
			do{
				n2 = mg_giveRandomInteger(1, 20, random);
			} while(n2 == n1);
			do{
				n3 = mg_giveRandomInteger(1, 20, random);
			} while(n3 == n1 || n3 == n2);
			do{
				n4 = mg_giveRandomInteger(1, 20, random);
			} while(n4 == n1 || n4 == n2 || n4 == n3);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 100, random);
			do{
				n2 = mg_giveRandomInteger(1, 100, random);
			} while(n2 == n1);
			do{
				n3 = mg_giveRandomInteger(1, 100, random);
			} while(n3 == n1 || n3 == n2);
			do{
				n4 = mg_giveRandomInteger(1, 100, random);
			} while(n4 == n1 || n4 == n2 || n4 == n3);
		} else {
			n1 = mg_giveRandomInteger(1, 1000, random);
			do{
				n2 = mg_giveRandomInteger(1, 1000, random);
			} while(n2 == n1);
			do{
				n3 = mg_giveRandomInteger(1, 1000, random);
			} while(n3 == n1 || n3 == n2);
			do{
				n4 = mg_giveRandomInteger(1, 1000, random);
			} while(n4 == n1 || n4 == n2 || n4 == n3);
		}

		/**
		 * Creating an array for comparison values
		 */
		String[] comparison_array = {"smallest to largest", "largest to smallest", "ascending", "descending"};

		/**
		 * Generating a random number for selecting a comparison value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value and storing its value in the HashMap
		 */
		comparison_value = comparison_array[rand1];
		result.put("comparison_value", comparison_value);

		/**
		 * Creating ArrayLists for question and answer values
		 */
		ArrayList <Integer> question_arraylist = new ArrayList<>();
		ArrayList <Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing the values of random numbers in the question ArrayList
		 */
		question_arraylist.add(n1);
		question_arraylist.add(n2);
		question_arraylist.add(n3);
		question_arraylist.add(n4);

		/**
		 * Storing the values of random numbers in the answer ArrayList
		 */
		answer_arraylist.add(n1);
		answer_arraylist.add(n2);
		answer_arraylist.add(n3);
		answer_arraylist.add(n4);

		if(comparison_value == "smallest to largest" || comparison_value == "ascending") { 			/** arranging all the numbers in the array in ascending order */
			Collections.sort(answer_arraylist);
		} else {										/** arranging all the numbers in the array in descending order */
			Collections.sort(answer_arraylist, Collections.reverseOrder());
		}

		/**
		 * Storing the values of question and answer ArrayLists in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);	    	      	       

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_counting_and_numbers_for_converting_roman_numerals_to_numbers()
	 @description Gets the problem set data containing the answer for the shown Roman numeral.
	 @param level - int - Chooses a level. Values are 1 or 2.
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                            
	 @return HashMap(Roman numeral, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_counting_and_numbers_for_arranging_in_order(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int answer;
		String roman_numeral;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array for storing Roman numerals
		 */
		String[] roman_numerals;
		if(level == 1) {
			roman_numerals = new String[] {"I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X"};
		} else {
			roman_numerals = new String[] {"XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX", "L", "C", "D", "M"};
		}

		/**
		 * Creating an array for storing equivalent values of the Roman numerals
		 */
		int[] numeral_values;
		if(level == 1) {
			numeral_values = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
		} else {
			numeral_values = new int[] {11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 50, 100, 500, 1000};
		}

		/**
		 * Generating a random number for selecting a Roman numeral and its equivalent numeric value
		 */
		int rand1 = mg_giveRandomInteger(0, roman_numerals.length - 1, random);

		/**
		 * Selecting the roman numeral and its corresponding numeric value i.e. answer     
		 */
		roman_numeral = roman_numerals[rand1];
		answer = numeral_values[rand1];

		/**
		 * Storing the values in the HashMap
		 */
		result.put("roman", roman_numeral);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an ArrayList for storing index positions of the remaining mcq options
			 */
			ArrayList <Integer> mcq_indexes = new ArrayList<>();
			mcq_indexes.add(rand1);

			/**
			 * Creating the remaining mcq options
			 */
			int temp;
			do{
				temp = mg_giveRandomInteger(0, 9, random);
				if(!mg_containsInArray(mcq_indexes, temp)) {
					mcq_indexes.add(temp);
				}
			} while (mcq_indexes.size() < 4 );

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(numeral_values[mcq_indexes.get(0)]);
			mcq_option.add(numeral_values[mcq_indexes.get(1)]);
			mcq_option.add(numeral_values[mcq_indexes.get(2)]);
			mcq_option.add(numeral_values[mcq_indexes.get(3)]);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with Roman numeral, answer, ArrayList of mcq options
		 */ 
		return result;    
	} 

	/**
    @name mg_get_decimal_convert_proper_fractions_into_decimal_numbers()
    @description Gets the problem set data for Convert Proper fractions into decimal numbers
    @param level - int - Level of the question - default is 1
    @return HashMap ( fraction (string), answer (float) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_proper_fractions_into_decimal_numbers(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		float answer;
		Map<String, Object> result = new HashMap<String, Object>();
		int c,b;

		/** Check the level */
		if( level == 2 ) {
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				c = 2;
			} else {
				c = 4;
			}
		} else if ( level == 3 ) {
			c = 5;
		} else {
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				c = 10;
			} else {
				c = 100;
			}
		}

		b = mg_giveRandomInteger( 1 , c - 1 , random );

		/** Answer calculation */
		answer = b / c;

		result.put("numerator", b );
		result.put("denominator", c );
		result.put("fraction", "$frac("+b+","+c+")" );
		result.put("answer", answer );

		/** Return the Hash map of fraction (string), answer (float) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_mixed_fractions_into_decimal_numbers()
	    @description Gets the problem set data for Convert Mixed fractions into decimal numbers
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( fraction (string), whole_number (int), answer (float) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_mixed_fractions_into_decimal_numbers(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		float answer;
		Map<String, Object> result = new HashMap<String, Object>();
		int c,b,whole_number;

		/** Check the level */
		if( level == 2 ) {
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				c = 2;
			} else {
				c = 4;
			}
			whole_number = mg_giveRandomInteger( 1, 100, random);
		} else if ( level == 3 ) {
			c = 5;
			whole_number = mg_giveRandomInteger( 1, 100, random);
		} else {
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				c = 10;
			} else {
				c = 100;
			}
			whole_number = mg_giveRandomInteger( 1, 10, random);
		}

		b = mg_giveRandomInteger( 1 , c - 1 , random );

		/** Answer calculation */
		answer = (b / c) * whole_number;

		result.put("numerator", b );
		result.put("denominator", c );
		result.put("whole_number", whole_number );
		result.put("fraction", "$frac("+whole_number+","+b+","+c+")" );
		result.put("answer", answer );

		/** Return the Hash map of fraction (string), whole_number (int), answer (float) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_improper_fractions_into_decimal_numbers()
	    @description Gets the problem set data for Convert improper fractions into decimal numbers
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( fraction (string), answer (float) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_improper_fractions_into_decimal_numbers(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		float answer;
		Map<String, Object> result = new HashMap<String, Object>();
		int c,b;

		/** Check the level And setting level parameters */
		if( level == 2 ) {
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				c = 10;
			} else {
				c = 100;
			}
			b = c * mg_giveRandomInteger( 1 , 9 , random ) + mg_giveRandomInteger( 1 , c - 1 , random ); 
		} else if ( level == 3 ) {
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				c = 2;
			} else {
				c = 4;
			}
			b = c * mg_giveRandomInteger( 1 , 9 , random ) + mg_giveRandomInteger( 1 , c - 1 , random );
		} else if ( level == 4 ) {
			c = 5;
			b = c * mg_giveRandomInteger( 1 , 9 , random ) + mg_giveRandomInteger( 1 , c - 1 , random );
		} else {
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				c = 10;
			} else {
				c = 100;
			}
			b = mg_giveRandomInteger( c + 1 , (2 * c) - 1 , random );
		}

		/** Answer calculation */
		answer = b / c;

		result.put("numerator", b );
		result.put("denominator", c );
		result.put("fraction", "$frac("+b+","+c+")");
		result.put("answer", answer );

		/** Return the Hash map of fraction (string), answer (float) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_fractions_in_words_to_decimal_numbers()
	    @description Gets the problem set data for Convert fraction in words to decimal numbers
	    @return HashMap ( number_string (string), answer (float) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_fractions_in_words_to_decimal_numbers() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		String number_string;
		double answer;
		ArrayList<String> fraction_words = new ArrayList<String>(Arrays.asList("a half", "a quarter", "three quarters"));
		Map<String, Object> result = new HashMap<String, Object>();
		int rand1 = mg_giveRandomInteger( 0, fraction_words.size() - 1, random);
		int rand2 = mg_giveRandomInteger( 1, 99, random);

		/** Fraction in words */
		number_string = mg_convert(rand2).concat(" and ").concat(fraction_words.get(rand1));

		/** Answer calculation */
		if( rand1 == 1 ) {
			answer = rand2 + 0.25;
		} else if ( rand1 == 2 ) {
			answer = rand2 + 0.75;
		} else {
			answer = rand2 + 0.5;
		}

		result.put("fraction", number_string );
		result.put("answer", answer );

		/** Return the Hash map of number_string (string), answer (float) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_decimal_number_into_fraction()
	    @description Gets the problem set data for Convert decimal numbers into fractions 
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( fraction (string), decimal (float), answer_whole_number (int) , answer_numerator (int) , answer_denominator (int) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_decimal_number_into_fraction(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double decimal;
		Map<String, Object> result = new HashMap<String, Object>();

		/** n1: Whole number ( used in mixed fraction ), n2: Numerator, n3: denominator */
		int n1,n2,n3;

		/** Check the level And setting level parameters */
		if( level == 2 ) {
			/** Denominator */
			n3 = 100;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 99 , random );

			/** Calculate the decimal value of the fraction */
			decimal = ((double) n2 ) / ((double) n3 );

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator", n3 );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );

		} else if ( level == 3 ) {
			/** Denominator */
			n3 = 10;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 9 , random );

			/** Whole number of the mixed fraction */
			n1 = mg_giveRandomInteger( 1 , 9 , random );

			/** Calculate the decimal value of the mixed fraction */
			decimal = ((double) n1) * ((double) n2 ) / ((double) n3 );

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator", n3 );
			result.put("whole_number", "::blank::" );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );
			result.put("answer_whole_number", n1 );

		} else if ( level == 4 ) {
			/** Denominator */
			n3 = 100;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 99 , random );

			/** Whole number of the mixed fraction */
			n1 = mg_giveRandomInteger( 1 , 9 , random );

			/** Calculate the decimal value of the mixed fraction */
			decimal = ((double) n1) * ((double) n2 ) / ((double) n3 );

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator", n3 );
			result.put("whole_number", "::blank::" );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );
			result.put("answer_whole_number", n1 );

		} else if ( level == 5 ) {

			/** if random number is 0 create question for fraction else create question for the mixed fraction */
			if( mg_giveRandomInteger( 0, 1, random) == 0 ) {
				/** Denominator */
				//n3 = mg_giveRandomInteger( 11 , 99 , random );

				/** Numerator */
				//n2 = mg_giveRandomInteger( 1 , n3 - 1 , random );
				n3 = 10;
				n2 = mg_giveRandomInteger( 1 , 9 , random );
				
				/** Calculate the decimal value of the fraction */
				decimal = ((double) n2 ) / ((double) n3 );

				/** Storing it in the result hash map */
				result.put("numerator", "::blank::" );
				result.put("denominator", "::blank::" );
				result.put("decimal", decimal );
				result.put("answer_numerator", n2 );
				result.put("answer_denominator", n3 );

			} else {
				/** Denominator */
				//n3 = mg_giveRandomInteger( 11 , 99 , random );

				/** Numerator */
				//n2 = mg_giveRandomInteger( 1 , n3 - 1 , random );
				n3 = 100;
				n2 = mg_giveRandomInteger( 1 , 99 , random );
				
				/** Whole number of the mixed fraction */
				n1 = mg_giveRandomInteger( 1 , 9 , random );

				/** Calculate the decimal value of the mixed fraction */
				decimal = ((double) n1) * ((double) n2 ) / ((double) n3 );

				/** Storing it in the result hash map */
				result.put("numerator", "::blank::" );
				result.put("denominator", "::blank::" );
				result.put("whole_number", "::blank::" );
				result.put("decimal", decimal );
				result.put("answer_numerator", n2 );
				result.put("answer_whole_number", n1 );
				result.put("answer_denominator", n3 );

			}

		} else {

			/** Denominator */
			n3 = 10;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 9 , random );

			/** Calculate the decimal value of the fraction */
			decimal = ((double) n2 ) / ((double) n3 );

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator",n3 );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );
		}

		/** Return the Hash map  */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_fractions_in_simplest_form()
	    @description Gets the problem set data for Convert to fractions in simplest form
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( fraction (string), decimal (float), answer_whole_number (int) , answer_numerator (int) , answer_denominator (int) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_fractions_in_simplest_form(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double decimal;
		Map<String, Object> result = new HashMap<String, Object>();

		/** n1: Whole number ( used in mixed fraction ), n2: Numerator, n3: denominator */
		int n1,n2,n3;

		/** Check the level And setting level parameters */
		if( level == 2 ) {
			/** Denominator */
			n3 = 100;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 99 , random );

			/** Calculate the decimal value of the fraction */
			decimal = ( ((double) n2 ) / ((double) n3 ) ) * 2;

			/** converting fraction into simplest form */
			for(int ii = 2 ; ii <= n2 ; ii++ ) {
				if(n3 % ii == 0 && n2 % ii == 0) {
					n3 = n3 / ii;
					n2 = n2 / ii;
					ii = 1;
				}
			}

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator", "::blank::" );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );
			result.put("answer_denominator", n3 );

		} else if ( level == 3 ) {
			/** Denominator */
			n3 = 10;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 9 , random );

			/** Whole number of the mixed fraction */
			n1 = mg_giveRandomInteger( 1 , 9 , random );

			/** Calculate the decimal value of the mixed fraction */
			decimal = ( ((double) n1) * ((double) n2 ) / ((double) n3 )) * 2;

			/** converting fraction into simplest form */
			for(int ii = 2 ; ii <= n2 ; ii++ ) {
				if(n3 % ii == 0 && n2 % ii == 0) {
					n3 = n3 / ii;
					n2 = n2 / ii;
					ii = 1;
				}
			}

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator", "::blank::" );
			result.put("whole_number", "::blank::" );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );
			result.put("answer_whole_number", n1 );
			result.put("answer_denominator", n3 );

		} else if ( level == 4 ) {
			/** Denominator */
			n3 = 100;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 99 , random );

			/** Whole number of the mixed fraction */
			n1 = mg_giveRandomInteger( 1 , 9 , random );

			/** Calculate the decimal value of the mixed fraction */
			decimal = ( ((double) n1) * ((double) n2 ) / ((double) n3 )) * 2;

			/** converting fraction into simplest form */
			for(int ii = 2 ; ii <= n2 ; ii++ ) {
				if(n3 % ii == 0 && n2 % ii == 0) {
					n3 = n3 / ii;
					n2 = n2 / ii;
					ii = 1;
				}
			}

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator", "::blank::" );
			result.put("whole_number", "::blank::" );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );
			result.put("answer_whole_number", n1 );
			result.put("answer_denominator", n3 );

		} else {

			/** Denominator */
			n3 = 10;

			/** Numerator */
			n2 = mg_giveRandomInteger( 1 , 9 , random );

			/** Calculate the decimal value of the fraction */
			decimal = ( ((double) n2 ) / ((double) n3 ) ) * 2;

			/** converting fraction into simplest form */
			for(int ii = 2 ; ii <= n2 ; ii++ ) {
				if(n3 % ii == 0 && n2 % ii == 0) {
					n3 = n3 / ii;
					n2 = n2 / ii;
					ii = 1;
				}
			}

			/** Storing it in the result hash map */
			result.put("numerator", "::blank::" );
			result.put("denominator", "::blank::" );
			result.put("decimal", decimal );
			result.put("answer_numerator", n2 );
			result.put("answer_denominator", n3 );

		}

		/** Return the Hash map of fraction (string), decimal (float), answer_whole_number (int) , answer_numerator (int) , answer_denominator (int) */
		return result;
	}

	/**
	    @name mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_less_than_1()
	    @description Gets the problem set data for understanding decimals expressed in words simple numbers ( less than 1 )
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( decimal_word (string), answer (double) )
	 */
	public static Map<String, Object> mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_less_than_1(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		String decimal_word;
		double answer;
		int random_number;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Check the level And setting level parameters */
		if( level == 2 ) {
			/** Generating random number  */
			random_number = mg_giveRandomInteger( 1 , 99 , random );

			/** Generating decimal in string   */
			decimal_word = Integer.toString(random_number).concat(" - hundredths");

			/** Generating answer */
			answer = ( (double)random_number ) / 100;
		} else {
			/** Generating random number  */
			random_number = mg_giveRandomInteger( 1 , 9 , random );

			/** Generating decimal in string   */
			decimal_word = Integer.toString(random_number).concat(" - tenths");

			/** Generating answer */
			answer = ( (double)random_number ) / 10;
		} 

		/** Storing values in the result hash map */
		result.put("fraction", decimal_word );
		result.put("answer", answer );

		/** Return the Hash map of decimal_word (string), answer (double) */
		return result;
	}

	/**
	    @name mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_more_than_1()
	    @description Gets the problem set data for understanding decimals expressed in words simple numbers ( more than 1 )
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( decimal_word (string), answer (double) )
	 */
	public static Map<String, Object> mg_get_decimal_understanding_decimals_expressed_in_words_simple_numbers_more_than_1(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		String decimal_word;
		double answer;
		int random_number, random_number1;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Check the level And setting level parameters */
		if( level == 2 ) {
			/** Generating random number  */
			random_number = mg_giveRandomInteger( 1 , 99 , random );
			random_number1 = mg_giveRandomInteger( 10 , 99 , random );

			/** Generating decimal in string   */
			decimal_word = Integer.toString(random_number1).concat(" and ").concat(Integer.toString(random_number)).concat(" - hundredths");

			/** Generating answer */
			answer = ((double) random_number1) * ( (double)random_number ) / 100;
		} else {
			/** Generating random number  */
			random_number = mg_giveRandomInteger( 1 , 9 , random );
			random_number1 = mg_giveRandomInteger( 1 , 9 , random );

			/** Generating decimal in string   */
			decimal_word = Integer.toString(random_number1).concat(" and ").concat(Integer.toString(random_number)).concat(" - tenths");

			/** Generating answer */
			answer = ((double) random_number1) * ( (double)random_number ) / 10;
		} 

		/** Storing values in the result hash map */
		result.put("fraction", decimal_word );
		result.put("answer", answer );

		/** Return the Hash map of decimal_word (string), answer (double) */
		return result;
	}

	/**
	    @name mg_get_decimal_place_values_in_decimal_numbers_type1()
	    @description Gets the problem set data for place value in decimal number type 1
	    @param none
	    @return HashMap ( decimal (string), answer (double), mcq_options (ArrayList) )
	 */
	public static Map<String, Object> mg_get_decimal_place_values_in_decimal_numbers_type1() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		String decimal, answer = null;
		ArrayList<String> mcq_options = new ArrayList<String>(Arrays.asList("Units", "Tens", "Hundreds","Tenths","Hundredths"));
		int random_number1, random_number2, random_number3;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		random_number1 = mg_giveRandomInteger( 0 , 999 , random );
		random_number2 = mg_giveRandomInteger( 1 , 99 , random );
		String random_number11 = Integer.toString(random_number1);
		String[] random_number111 = random_number11.split("");
		String random_number21 = Integer.toString(random_number2);
		String[] random_number211 = random_number21.split("");

		random_number3 = mg_giveRandomInteger(0, (random_number111.length - 1) + (random_number211.length ) , random);

		decimal = "";

		for(int i=0 ; i < random_number111.length ; i++){
			if(random_number3 == i){
				decimal = decimal.concat("<u>").concat(random_number111[i]).concat("</u>");
				if((random_number111.length == 3 && i == 0) ){
					answer = "Hundreds";
				} else if((random_number111.length == 2 && i == 0) || (random_number111.length == 3 && i == 1) ){
					answer = "Tens";
				} else if((random_number111.length == 1 && i == 0) || (random_number111.length == 3 && i == 2) || (random_number111.length == 2 && i == 1) ){
					answer = "Units";
				}
			} else {
				decimal = decimal.concat(random_number111[i]);
			}
		}

		decimal = decimal.concat(".");
		int ii = random_number111.length;

		for(int i=0 ; i < random_number211.length ; i++){
			if(random_number3 == (ii + i) ){
				decimal = decimal.concat("<u>").concat(random_number211[i]).concat("</u>");
				if(i == 0) {
					answer = "Tenths";
				} else if(i == 1){
					answer = "Hundredths";
				} 
			} else {
				decimal = decimal.concat(random_number211[i]);
			}
		}

		/** Shuffle MCQ Options */
		Collections.shuffle(mcq_options);

		/** Storing values in the result hash map */
		result.put("decimal", decimal );
		result.put("answer", answer );
		result.put("mcq_options", mcq_options );

		/** Return the Hash map of ( decimal (string), answer (double), mcq_options (ArrayList) */
		return result;
	}


	/**
	    @name mg_get_decimal_place_values_in_decimal_numbers_type2()
	    @description Gets the problem set data for place value in decimal number type 2
	    @param mcq - boolean - Multiple choice options required true / false - default is false
	    @return HashMap ( decimal (string), answer (integer), place (string),  mcq_options (ArrayList) )
	 */
	public static Map<String, Object> mg_get_decimal_place_values_in_decimal_numbers_type2(boolean mcq) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		String decimal, place = null;
		int random_number1, random_number2, random_number3, answer = 0;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		random_number1 = mg_giveRandomInteger( 0 , 999 , random );
		random_number2 = mg_giveRandomInteger( 1 , 99 , random );
		String random_number11 = Integer.toString(random_number1);
		String[] random_number111 = random_number11.split("");
		String random_number21 = Integer.toString(random_number2);
		String[] random_number211 = random_number21.split("");

		random_number3 = mg_giveRandomInteger(0, (random_number111.length - 1) + (random_number211.length ) , random);

		decimal = "";

		for(int i=0 ; i < random_number111.length ; i++){
			if(random_number3 == i){
				answer = Integer.parseInt(random_number111[i]); 
				if((random_number111.length == 3 && i == 0) ){
					place = "Hundreds";
				} else if((random_number111.length == 2 && i == 0) || (random_number111.length == 3 && i == 1) ){
					place = "Tens";
				} else if((random_number111.length == 1 && i == 0) || (random_number111.length == 3 && i == 2) || (random_number111.length == 2 && i == 1) ){
					place = "Units";
				}
			} 

			decimal = decimal.concat(random_number111[i]);
		}

		decimal = decimal.concat(".");
		int ii = random_number111.length;

		for(int i=0 ; i < random_number211.length ; i++){
			if(random_number3 == (ii + i) ){
				answer = Integer.parseInt(random_number211[i]);
				if(i == 0) {
					place = "Tenths";
				} else if(i == 1){
					place = "Hundredths";
				} 
			} 

			decimal = decimal.concat(random_number211[i]);
		}

		if(mcq) {
			ArrayList<Integer> mcq_options = new ArrayList<Integer>();

			mcq_options.add(answer);

			int[] array = IntStream.rangeClosed(0, 9).toArray();

			array = mg_shuffleInt(array); // shuffle data

			//generating unique values for mcq_option
			for (int u : array) {
				if (!mg_containsInArray(mcq_options, u) && mcq_options.size() < 4) {
					mcq_options.add(u);
				}
			}

			/** Shuffle MCQ Options */
			Collections.shuffle(mcq_options);

			result.put("mcq_options", mcq_options );
		}

		/** Storing values in the result hash map */
		result.put("decimal", decimal );
		result.put("answer", answer );
		result.put("place", place );

		/** Return the Hash map of decimal (string), answer (integer), place (string),  mcq_options (ArrayList) */
		return result;
	}

	/**
	    @name mg_get_decimal_place_values_in_decimal_numbers_type3()
	    @description Gets the problem set data for place value in decimal number type 3
	    @param mcq - boolean - Multiple choice options required true / false - default is false
	    @return HashMap ( decimal (string), answer (string), mcq_options (ArrayList) )
	 */
	public static Map<String, Object> mg_get_decimal_place_values_in_decimal_numbers_type3(boolean mcq) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		String decimal, answer = null;
		double multiplier = 1;
		int random_number1, random_number2, random_number3, type =1;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		random_number1 = mg_giveRandomInteger( 0 , 999 , random );
		random_number2 = mg_giveRandomInteger( 1 , 99 , random );
		String random_number11 = Integer.toString(random_number1);
		String[] random_number111 = random_number11.split("");
		String random_number21 = Integer.toString(random_number2);
		String[] random_number211 = random_number21.split("");

		random_number3 = mg_giveRandomInteger(0, (random_number111.length - 1) + (random_number211.length) , random);

		decimal = "";

		for(int i=0 ; i < random_number111.length ; i++){
			if(random_number3 == i){
				decimal = decimal.concat("<u>").concat(random_number111[i]).concat("</u>");
				if((random_number111.length == 3 && i == 0) ){
					answer = Integer.toString( Integer.parseInt(random_number111[i]) * 100  );
					multiplier = 100;
				} else if((random_number111.length == 2 && i == 0) || (random_number111.length == 3 && i == 1) ){
					answer = Integer.toString( Integer.parseInt(random_number111[i]) * 10  );
					multiplier = 10;
				} else if((random_number111.length == 1 && i == 0) || (random_number111.length == 3 && i == 2) || (random_number111.length == 2 && i == 1) ){
					answer = Integer.toString( Integer.parseInt(random_number111[i]) );
					multiplier = 1;
				}
				type = 1;
			} else {
				decimal = decimal.concat(random_number111[i]);
			}
		}

		decimal = decimal.concat(".");
		int ii = random_number111.length;

		for(int i=0 ; i < random_number211.length ; i++){
			if(random_number3 == (ii + i) ){
				decimal = decimal.concat("<u>").concat(random_number211[i]).concat("</u>");
				if(i == 0) {
					answer = Double.toString( Double.parseDouble(random_number211[i]) / 10 );
					multiplier = 0.1;
				} else if(i == 1){
					answer = Double.toString( Double.parseDouble(random_number211[i]) / 100 );
					multiplier = 0.01;
				} 
				type = 2;
			} else {
				decimal = decimal.concat(random_number211[i]);
			}
		}

		if(mcq) {
			ArrayList<String> mcq_options = new ArrayList<String>();

			mcq_options.add(answer);

			int[] array = IntStream.rangeClosed(0, 9).toArray();

			double temp;
			array = mg_shuffleInt(array); // shuffle data

			//generating unique values for mcq_option
			if(type == 1) {
				for (int u : array) {
					if (!mg_containsInArray(mcq_options, Integer.toString( u * (int)multiplier) ) && mcq_options.size() < 4) {
						mcq_options.add(Integer.toString( u * (int)multiplier));
					}
				}
			} else {
				for (int u : array) {
					temp = u * (double)multiplier;
					DecimalFormat df = new DecimalFormat("#.##");
					df.setRoundingMode(RoundingMode.FLOOR);
					temp = new Double(df.format(temp));
					if (!mg_containsInArray(mcq_options, Double.toString( temp )) && mcq_options.size() < 4) {
						mcq_options.add(Double.toString(temp));
					}
				}
			}

			/** Shuffle MCQ Options */
			Collections.shuffle(mcq_options);

			result.put("mcq_options", mcq_options );
		}

		/** Storing values in the result hash map */
		result.put("decimal", decimal );
		result.put("answer", answer );

		/** Return the Hash map of decimal (string), answer (string), mcq_options (ArrayList) */
		return result;
	}


	/**
	    @name mg_get_decimal_convert_decimal_money_into_rupees_and_paise()
	    @description Gets the problem set data for convert decimal money into rupees and paise
	    @param none
	    @return HashMap ( decimal (double), answer_rupees (integer), answer_paise (integer) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_decimal_money_into_rupees_and_paise() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double decimal; 
		int answer_rupees, answer_paise;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		answer_rupees = mg_giveRandomInteger( 0 , 99 , random );
		answer_paise = mg_giveRandomInteger( 1 , 99 , random );

		decimal = (double)answer_rupees + ((double)answer_paise / 100 );

		/** Storing values in the result hash map */
		result.put("decimal", decimal );
		result.put("answer_rupees", answer_rupees );
		result.put("answer_paise", answer_paise );

		/** Return the Hash map of decimal (double), answer_rupees (integer), answer_paise (integer) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_decimal_length_into_meters_and_centimeter()
	    @description Gets the problem set data for convert decimal length into meters and centimeter
	    @param none
	    @return HashMap ( decimal (double), answer_meters (integer), answer_cms (integer) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_decimal_length_into_meters_and_centimeter() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double decimal; 
		int answer_meters, answer_cms;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		answer_meters = mg_giveRandomInteger( 0 , 99 , random );
		answer_cms = mg_giveRandomInteger( 1 , 99 , random );

		decimal = (double)answer_meters + ((double)answer_cms / 100 );

		/** Storing values in the result hash map */
		result.put("decimal", decimal );
		result.put("answer_meters", answer_meters );
		result.put("answer_cms", answer_cms );

		/** Return the Hash map of decimal (double), answer_meters (integer), answer_cms (integer) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_decimal_length_into_centimeters_and_millimeters()
	    @description Gets the problem set data for Convert decimal length into centimeters and millimeters
	    @param none
	    @return HashMap ( decimal (double), answer_mm (integer), answer_cms (integer) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_decimal_length_into_centimeters_and_millimeters() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double decimal; 
		int answer_mm, answer_cms;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		answer_cms = mg_giveRandomInteger( 0 , 99 , random );
		answer_mm = mg_giveRandomInteger( 1 , 9 , random );

		decimal = (double)answer_cms + ((double)answer_mm / 10 );

		/** Storing values in the result hash map */
		result.put("decimal", decimal );
		result.put("answer_cms", answer_cms );
		result.put("answer_mm", answer_mm );

		/** Return the Hash map of decimal (double), answer_mm (integer), answer_cms (integer) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_money_into_decimal_form()
	    @description Gets the problem set data for Convert money into decimal form
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( answer (double), rupees (integer), paise (integer) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_money_into_decimal_form(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double answer; 
		int rupees, paise;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		if(level == 2) {
			paise = mg_giveRandomInteger( 1 , 9999 , random );
			answer = ((double)paise / 100 );
		} else {
			rupees = mg_giveRandomInteger( 1 , 99 , random );
			paise = mg_giveRandomInteger( 1 , 99 , random );
			answer = (double)rupees + ((double)paise / 100 );

			result.put("rupees", mg_convert(rupees) );
		}

		/** Storing values in the result hash map */
		result.put("answer", answer );
		result.put("paise", mg_convert(paise) );

		/** Return the Hash map of answer (double), rupees (integer), paise (integer) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_length_into_decimal_form_m_and_cm()
	    @description Gets the problem set data for Convert length into decimal form Â– m and cm
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( answer (double), meters (integer), cms (integer) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_length_into_decimal_form_m_and_cm(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double answer; 
		int meters, cms;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		if(level == 2) {
			cms = mg_giveRandomInteger( 1 , 9999 , random );

			answer = ((double)cms / 100 );
		} else {
			meters = mg_giveRandomInteger( 1 , 99 , random );
			cms = mg_giveRandomInteger( 1 , 99 , random );

			answer = (double)meters + ((double)cms / 100 );
			result.put("meters", mg_convert(meters) );
		}

		/** Storing values in the result hash map */
		result.put("answer", answer );
		result.put("centimeters", mg_convert(cms) );

		/** Return the Hash map of answer (double), meters (integer), cms (integer) */
		return result;
	}


	/**
	    @name mg_get_decimal_convert_length_into_decimal_form_cm_and_mm()
	    @description Gets the problem set data for Convert length into decimal form Â– cm and mm
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( answer (double), cm (integer), mm (integer) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_length_into_decimal_form_cm_and_mm(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double answer; 
		int cm, mm;
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		if(level == 2) {
			mm = mg_giveRandomInteger( 1 , 999 , random );

			answer = ((double)mm / 10 );
		} else {
			cm = mg_giveRandomInteger( 1 , 99 , random );
			mm = mg_giveRandomInteger( 1 , 9 , random );

			answer = (double)cm + ((double)mm / 10 );
			result.put("centimeters", cm );
		}

		/** Storing values in the result hash map */
		result.put("answer", answer );
		result.put("millimeters", mm );

		/** Return the Hash map of answer (double), cm (integer), mm (integer) */
		return result;
	}

	/**
	    @name mg_get_decimal_simple_add()
	    @description Gets the problem set data for simple add decimals
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( decimal1 (double), decimal2 (double), answer (double) )
	 */
	public static Map<String, Object> mg_get_decimal_simple_add(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double decimal1, decimal2, answer; 
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		if(level == 2) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
		} else if(level == 3) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
		} else if(level == 4) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
		} else if(level == 5) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 999 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 999 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
		} else {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 9 , random ) / 10 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 9 , random ) / 10 );
		}

		answer = decimal1 + decimal2;

		/** Storing values in the result hash map */
		result.put("answer", answer );
		result.put("number1", decimal1 );
		result.put("number2", decimal2 );

		/** Return the Hash map of decimal1 (double), decimal2 (double), answer (double) */
		return result;
	}

	/**
	    @name mg_get_decimal_simple_subtract()
	    @description Gets the problem set data for simple subtract decimals
	    @param level - int - Level of the question - default is 1
	    @return HashMap ( decimal1 (double), decimal2 (double), answer (double) )
	 */
	public static Map<String, Object> mg_get_decimal_simple_subtract(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double decimal1, decimal2, answer, temp; 
		Map<String, Object> result = new HashMap<String, Object>();

		/** Generating the random numbers */
		if(level == 2) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
		} else if(level == 3) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 99 , random ) / 100 );
		} else if(level == 4) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 99 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
		} else if(level == 5) {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 999 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 999 , random ) ) + ((double)mg_giveRandomInteger( 1 , 999 , random ) / 1000 );
		} else {
			decimal1 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 9 , random ) / 10 );
			decimal2 = ( (double)mg_giveRandomInteger( 0 , 9 , random ) ) + ((double)mg_giveRandomInteger( 1 , 9 , random ) / 10 );
		}

		if(decimal2 > decimal1) {
			temp = decimal2;
			decimal2 = decimal1;
			decimal1 = temp;
		}

		answer = decimal1 - decimal2;

		/** Storing values in the result hash map */
		result.put("answer", answer );
		result.put("number1", decimal1 );
		result.put("number2", decimal2 );

		/** Return the Hash map of decimal1 (double), decimal2 (double), answer (double) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_fraction_into_decimal_and_add ()
	    @description Gets the problem set data for Convert fraction into decimal and add 
	    @param none
	    @return HashMap ( fraction1 (string), fraction2 (string), answer (double), unit (string) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_fraction_into_decimal_and_add () {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double answer, decimal11, decimal21; 
		String decimal1, decimal2, unit; 
		Integer rand1, rand2; 
		Map<String, Object> result = new HashMap<String, Object>();

		ArrayList<String> units_all = new ArrayList<String>(Arrays.asList("rupees","meters","centimeters","millimeters"));
		unit = units_all.get(mg_giveRandomInteger( 0, units_all.size() - 1, random));

		/** Generating the random numbers */
		if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand1 = mg_giveRandomInteger( 1 , 99 , random );
			decimal11 = (double)rand1 + 0.5;
			decimal1 = mg_convert(rand1).concat(" and a half");
		} else if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand1 = mg_giveRandomInteger( 1 , 99 , random );
			decimal11 = (double)rand1 + 0.25;
			decimal1 = mg_convert(rand1).concat(" and a quarter");
		} else {
			rand1 = mg_giveRandomInteger( 1 , 99 , random );
			decimal11 = (double)rand1 + 0.75;
			decimal1 = mg_convert(rand1).concat(" and three quarters");
		} 

		if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand2 = mg_giveRandomInteger( 1 , 99 , random );
			decimal21 = (double)rand2 + 0.5;
			decimal2 = mg_convert(rand2).concat(" and a half");
		} else if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand2 = mg_giveRandomInteger( 1 , 99 , random );
			decimal21 = (double)rand2 + 0.25;
			decimal2 = mg_convert(rand2).concat(" and a quarter");
		} else {
			rand2 = mg_giveRandomInteger( 1 , 99 , random );
			decimal21 = (double)rand2 + 0.75;
			decimal2 = mg_convert(rand2).concat(" and three quarters");
		} 

		answer = decimal11 + decimal21;

		/** Storing values in the result hash map */
		result.put("answer", answer );
		result.put("decimal1", decimal1 );
		result.put("decimal2", decimal2 );
		result.put("unit", unit );

		/** Return the Hash map of decimal1 (double), decimal2 (double), answer (double), unit ( string) */
		return result;
	}

	/**
	    @name mg_get_decimal_convert_fraction_into_decimal_and_subtract ()
	    @description Gets the problem set data for Convert fraction into decimal and subtract 
	    @param none
	    @return HashMap ( fraction1 (string), fraction2 (string), answer (double), unit (string) )
	 */
	public static Map<String, Object> mg_get_decimal_convert_fraction_into_decimal_and_subtract () {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		double answer, decimal11, decimal21, temp1; 
		String decimal1, decimal2, temp, unit; 
		Integer rand1, rand2; 
		Map<String, Object> result = new HashMap<String, Object>();

		ArrayList<String> units_all = new ArrayList<String>(Arrays.asList("rupees","meters","centimeters","millimeters"));
		unit = units_all.get(mg_giveRandomInteger( 0, units_all.size() - 1, random));

		/** Generating the random numbers */
		if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand1 = mg_giveRandomInteger( 1 , 99 , random );
			decimal11 = (double)rand1 + 0.5;
			decimal1 = mg_convert(rand1).concat(" and a half");
		} else if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand1 = mg_giveRandomInteger( 1 , 99 , random );
			decimal11 = (double)rand1 + 0.25;
			decimal1 = mg_convert(rand1).concat(" and a quarter");
		} else {
			rand1 = mg_giveRandomInteger( 1 , 99 , random );
			decimal11 = (double)rand1 + 0.75;
			decimal1 = mg_convert(rand1).concat(" and three quarters");
		} 

		if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand2 = mg_giveRandomInteger( 1 , 99 , random );
			decimal21 = (double)rand2 + 0.5;
			decimal2 = mg_convert(rand2).concat(" and a half");
		} else if(mg_giveRandomInteger( 0 , 1 , random ) == 0) {
			rand2 = mg_giveRandomInteger( 1 , 99 , random );
			decimal21 = (double)rand2 + 0.25;
			decimal2 = mg_convert(rand2).concat(" and a quarter");
		} else {
			rand2 = mg_giveRandomInteger( 1 , 99 , random );
			decimal21 = (double)rand2 + 0.75;
			decimal2 = mg_convert(rand2).concat(" and three quarters");
		} 

		if(decimal21 > decimal11) {
			temp1 = decimal21;
			decimal21 = decimal11;
			decimal11 = temp1;

			temp = decimal2;
			decimal2 = decimal1;
			decimal1 = temp;
		}

		answer = decimal11 - decimal21;

		/** Storing values in the result hash map */
		result.put("answer", answer );
		result.put("decimal1", decimal1 );
		result.put("decimal2", decimal2 );
		result.put("unit", unit );

		/** Return the Hash map of decimal1 (double), decimal2 (double), answer (double) */
		return result;
	}

	/**
	    @name mg_get_division_of_two_numbers_with_images()
	    @description Gets the problem set data for division of 2 numbers 
	    @param level - int - Chooses a level. Values are 1 or 2.
	    @param mcq - boolean - Multiple choice options required true / false - default is false  
	    @return HashMap (first number(n3), second number(n1), answer(n2), an object name, a group name, image, image title, image url, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_of_two_numbers_with_images(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the values of n1 and n2
		 */
		if(level == 2) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);        
		} else {
			n1 = mg_giveRandomInteger(2, 5, random);
			n2 = mg_giveRandomInteger(2, 5, random);        
		}

		/**
		 * Calculating the value of n3
		 */
		n3 = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and n3 in the HashMap 
		 */
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("answer", n2);

		/**
		 * Array of groups 
		 */
		String[] group_array = {"boy", "girl", "lots"};

		/**
		 * Generating a random number for selecting a group 
		 */
		int random_index = mg_giveRandomInteger( 0, group_array.length - 1, random);

		/**
		 * Selecting a group  
		 */
		String group_name = group_array[random_index];

		/**
		 * Returning the group name to the HashMap  
		 */
		result.put("group_name", group_name);

		/**
		 * Array of objects
		 */
		String[] object_array = {"apple", "ball", "bicycle", "book", "car", "diya", "mango", "orange", "eraser", "bulb"};

		/**
		 * Generating a random number for selecting a random object
		 */
		random_index = mg_giveRandomInteger(0, object_array.length - 1, random);

		/**
		 * Selecting an object  
		 */
		String object_name = object_array[random_index];

		/**
		 * Returning the object name to the HashMap  
		 */
		result.put("object_name", object_name);

		/**
		 * Selecting a random image
		 */
		String image = object_name.concat(".png");

		/**
		 * Storing the values of image, image title, image url
		 */
		result.put("image", image);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			if(level == 2) {
				array = IntStream.rangeClosed(2, 10).toArray();
			} else {
				array = IntStream.rangeClosed(2, 5).toArray();
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with values of first number(n3), second number(n1), answer(n2), a group name, an object name, image, image title, image url, ArrayList of mcq options.
		 */ 
		return result;    
	}

	/**
	    @name mg_get_division_of_two_numbers_without_images_type_1()
	    @description Gets the problem set data for division of 2 numbers 
	    @param level - int - Chooses a level. Values are 1 or 2.
	    @param mcq - boolean - Multiple choice options required true / false - default is false  
	    @return HashMap (first number(n3), second number(n1), answer(n2), an object name, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_of_two_numbers_without_images(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the values of n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 5, random);
			n2 = mg_giveRandomInteger(2, 5, random);        
		} else {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);      
		}

		/**
		 * Calculating the value of n3
		 */
		n3 = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and n3 in the HashMap 
		 */
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("answer", n2);

		/**
		 * Array of objects
		 */
		String[] object_array = {"pencil", "eraser", "sharpner", "cycle", "apple", "orange", "pen", "book"};

		/**
		 * Generating a random number for selecting a random object
		 */
		int random_index = mg_giveRandomInteger(0, object_array.length - 1, random);

		/**
		 * Selecting an object  
		 */
		String object_name = object_array[random_index];

		/**
		 * Returning the object name to the HashMap  
		 */
		result.put("object_name", object_name);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer as an mcq option
			 */
			mcq_option.add(n2);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			if(level == 1) {
				array = IntStream.rangeClosed(2, 5).toArray();
			} else {
				array = IntStream.rangeClosed(2, 10).toArray();
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with values of first number(n3), second number(n1), answer(n2), an object name, ArrayList of mcq options.
		 */ 
		return result;    
	}

	/**
     @name mg_get_division_relating_division_and_multiplication_with_images()
     @description Gets the problem set data for division of 2 numbers
     @param mcq - boolean - Multiple choice options required true / false - default is false   
     @return HashMap (n3, n1, n2, n, answer, image name, image title, image url, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_relating_division_and_multiplication_with_images(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the values of n1 and n2
		 */
		n1 = mg_giveRandomInteger(2, 5, random);
		n2 = mg_giveRandomInteger(2, 5, random);        

		/**
		 * Calculating the value of n3
		 */
		n3 = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and n3 in the HashMap 
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("division_group", "yes");
		result.put("answer", n2);
		answer = n2;

		/**
		 * Array of images 
		 */
		String[] images = {"apple", "ball", "bicycle", "book", "car", "diya", "mango", "orange", "eraser", "bulb"};

		/**
		 * Generating a random number for selecting a random image 
		 */
		int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

		/**
		 * Selecting an image, concatenating the selected the image with the base url  
		 */
		String imagename = images[random_index].concat(".png");
		String imagetitle = images[random_index];

		/**
		 * Returning the image to the HashMap  
		 */
		result.put("image", imagename );
		result.put("image_title", imagetitle );		

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(2, 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with values of n3, n1, n2, n, answer, image name, image title, image url, ArrayList of mcq options
		 */ 
		return result;    
	}  

	/**
    @name mg_get_division_relating_division_and_multiplication_without_images()
    @description Gets the problem set data for division of 2 numbers
    @param level - int - Chooses a level. Values are 1 or 2.
    @param mcq - boolean - Multiple choice options required true / false - default is false   
    @return HashMap (n3, n1, n2, n, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_relating_division_and_multiplication_without_images(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the values of n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);        
		} else {
			n1 = mg_giveRandomInteger(2, 20, random);
			n2 = mg_giveRandomInteger(2, 20, random);     
		}

		/**
		 * Calculating the value of n3
		 */
		n3 = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and n3 in the HashMap 
		 */
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("number3", n2);
		result.put("answer", n2);
		answer = n2;

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(2, 10).toArray();

			} else {

				int mcq_lower_limit, mcq_upper_limit;

				/**
				 * Calculating the lower limit for remaining mcq options
				 */
				if((answer - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				/**
				 * Calculating the upper limit for remaining mcq options
				 */
				if((answer + 5) >= 20) {
					mcq_upper_limit = 20;  
				} else {
					mcq_upper_limit = answer + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			}

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with values of n3, n1, n2, n, answer, image name, image title, image url, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_division_of_two_numbers_with_rhs_blank()
	     @description Gets the problem set data for division of 2 numbers  
	     @param level - int - Chooses a level. Values are 1 or 2.
	     @return HashMap (first number(n3), second number(n1), third number(n2), first answer(n2), second answer(n1))
	 */
	public static Map<String, Object> mg_get_division_of_two_numbers_with_rhs_blank(int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the random values of n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);
		} else {
			n1 = mg_giveRandomInteger(2, 20, random);
			n2 = mg_giveRandomInteger(2, 20, random);
		}

		/**
		 * Calculating the value of n3.
		 */
		n3 = n1 * n2;

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n3, n1, n2, first answer, and second answer in the HashMap 
		 */
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("number3", n2);
		result.put("answer1", n2);
		result.put("answer2", n1);

		/**
		 * Return the HashMap with values of first number(n3), second number(n1), third number(n2), first answer(n2), second answer(n1).
		 */ 
		return result;    
	}

	/**
	    @name mg_get_division_of_two_numbers_with_no_remainder()
	    @description Gets the problem set data for division of 2 numbers  
	    @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.
	    @param mcq - boolean - Multiple choice options required true / false - default is false
	    @return HashMap (first number(n3), second number(n1), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_of_two_numbers_with_no_remainder(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the random values of n1 and n2
		 */
		if(level == 2) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 100, random);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 1000, random);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger(11, 30, random);
			n2 = mg_giveRandomInteger(11, 30, random);
		} else if(level == 5) {
			n1 = mg_giveRandomInteger(11, 50, random);
			n2 = mg_giveRandomInteger(11, 100, random);
		} else {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);
		}

		/**
		 * Calculating the value of n3.
		 */
		n3 = n1 * n2;

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n3, and answer in the HashMap 
		 */
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("answer", n2);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding the values of answer as mcq options in ArrayList 
			 */  
			mcq_option.add(n2);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if (level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(2, 10).toArray();

			} else if (level == 2) {

				if((n2 - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = n2 - 5;
				}

				if((n2 + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = n2 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			} else if (level == 3) {

				if((n2 - 5) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = n2 - 5;
				}

				if((n2 + 5) >= 1000) {
					mcq_upper_limit = 1000;  
				} else {
					mcq_upper_limit = n2 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			} else if (level == 4) {

				if((n2 - 5) <= 11) {
					mcq_lower_limit = 11;  
				} else {
					mcq_lower_limit = n2 - 5;
				}

				if((n2 + 5) >= 30) {
					mcq_upper_limit = 30;  
				} else {
					mcq_upper_limit = n2 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			} else {

				if((n2 - 5) <= 11) {
					mcq_lower_limit = 11;  
				} else {
					mcq_lower_limit = n2 - 5;
				}

				if((n2 + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = n2 + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			}

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with values of first number(n3), second number(n1), answer, ArrayList of mcq options.
		 */ 
		return result;    
	}

	/**
	    @name mg_get_division_of_two_numbers_with_remainder()
	    @description Gets the problem set data for division of 2 numbers  
	    @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.
	    @return HashMap (dividend(n3), divisor(n1), quotient(n2), remainder(r))
	 */
	public static Map<String, Object> mg_get_division_of_two_numbers_with_remainder(int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3, r;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the random values of n1 and n2 
		 */
		if(level == 2) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 100, random);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 1000, random);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger(11, 30, random);
			n2 = mg_giveRandomInteger(11, 30, random);
		} else if(level == 5) {
			n1 = mg_giveRandomInteger(11, 50, random);
			n2 = mg_giveRandomInteger(11, 100, random);
		} else {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);
		}

		/**
		 * Randomly generating the value of r
		 */
		r = mg_giveRandomInteger(1, n1 - 1, random);

		/**
		 * Calculating the value of n3.
		 */
		n3 = (n1 * n2) + r;

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n3, r, and answer in the HashMap 
		 */
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("quotient", n2);
		result.put("remainder", r);

		/**
		 * Return the HashMap with values of dividend(n3), divisor(n1), quotient(n2), remainder(r).
		 */ 
		return result;    
	}

	/*/**
	    @name mg_get_division_of_two_numbers_word_problems()
	    @description Gets the problem set data for division of 2 numbers
	    @param level - int - Chooses a level. Values are 1 or 2. 
	    @param mcq - boolean - Multiple choice options required true / false - default is false  
	    @return HashMap (dividend(n3), divisor(n1), answer(n2), remainder(r), name, object name, answer array, ArrayList of mcq options)
	 * /
	public static Map<String, Object> mg_get_division_of_two_numbers_word_problems(int level, boolean mcq) {

		/**
	 * Declaring the variables
	 * /
		int n1, n2, n3;

		/**
	 * Initializing the random generator
	 * /
		Random random = new Random(); 

		/**
	 * Generating first and second random number
	 * /
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);
		} else {
			n1 = mg_giveRandomInteger(11, 30, random);
			n2 = mg_giveRandomInteger(11, 30, random);
		}

		/**
	 * Calculating the value of n3
	 * /
		n3 = n1 * n2; 

		/**
	 * Creating the HashMap 
	 * /
		Map<String, Object> result = new HashMap<>();

		/**
	 * Storing the values of n1, n3, and answer in the HashMap 
	 * /
		result.put("number1", n3);
		result.put("number2", n1);
		result.put("answer", n2);

		/**
	 * Array of names 
	 * /
		String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Vijay", "Priya", "Neha", "Nisha", "Ravi"};

		/**
	 * Generating a random number for selecting a random name 
	 * /
		int random_index = mg_giveRandomInteger( 0, name_array.length - 1, random);

		/**
	 * selecting a name
	 * /
		String name = name_array[random_index];

		/**
	 * Storing the name in the HashMap  
	 * /
		result.put("name", name);

		/**
	 * Array of objects
	 * /
		String[] object_array = {"pencil", "eraser", "sharpner", "cycle", "apple", "orange", "pen", "book"};

		/**
	 * Generating a random number for selecting an object
	 * /
		random_index = mg_giveRandomInteger( 0, object_array.length - 1, random);

		/**
	 * Selecting an object  
	 * /
		String object_name = object_array[random_index];

		/**
	 * Storing the object name in the HashMap  
	 * /
		result.put("object_name", object_name);

		/**
	 * Creating the mcq options 
	 * /
		if(mcq == true) {

			/**
	 * Creating the ArrayList options 
	 * / 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
	 * Storing the value of answer in the ArrayList
	 * /
			mcq_option.add(n2);

			/**
	 * Creating an int array
	 * /
			int[] array = {0};

			/**
	 * Generating remaining mcq options within the calculated range
	 * /
			if(level == 1) {
				array = IntStream.rangeClosed(2, 10).toArray();
			} else {
				array = IntStream.rangeClosed(11, 30).toArray();
			}

			/**
	 * Shuffling the data
	 * /
			array = mg_shuffleInt(array); 

			/**
	 * Ensuring that no 2 options are the same
	 * /
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
	 * Shuffling the mcq options
	 * /
			Collections.shuffle(mcq_option);

			/**
	 * Storing the mcq options in the HashMap
	 * /
			result.put("mcq_options", mcq_option);
		}

		/**
	 * Return the HashMap with values of dividend(n3), divisor(n1), answer(n2), remainder(r), name, object name, answer array, ArrayList of mcq options
	 * / 
		return result;    
	}  */

	/**
	    @name mg_get_division_of_two_numbers_division_vocabulary()
	    @description Gets the problem set data for division of 2 numbers and returns dividend, divisor, quotient, and remainder of the division. 
	    @param mcq - boolean - Multiple choice options required true / false - default is false
	    @return HashMap (first number, second number, third number, remainder, answer array, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_of_two_numbers_division_vocabulary(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, r, n3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating the random values of n1, n2, and r
		 */
		n1 = mg_giveRandomInteger(2, 9, random);

		do{
			n2 = mg_giveRandomInteger(2, 9, random);
		}while(n2 == n1);

		do{
			r = mg_giveRandomInteger(0, n1 - 1, random);
		}while(r == n1 || r == n2);

		/**
		 * calculating the value of n3.
		 */
		n3 = (n1 * n2) + r; 

		/**
		 * Returning an array containing the values of dividend, divisor, quotient, remainder.
		 */
		String[] answer_array = {"divisor","quotient","dividend","remainder"};

		String object_name = answer_array[mg_giveRandomInteger(0, answer_array.length - 1, random)];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		result.put("divisor", n1);
		result.put("quotient", n2);
		result.put("dividend", n3);
		result.put("remainder", r);
		
		int answer;
		if(object_name.equals("divisor")) {
			answer = n1;
			result.put("divisor", "::blank::");
		} else if(object_name.equals("quotient")) {
			answer = n2;
			result.put("quotient", "::blank::");
		} else if(object_name.equals("dividend")) {
			answer = n3;
			result.put("dividend", "::blank::");
		} else {
			answer = r;
			result.put("remainder", "::blank::");
		}

		/**
		 * Storing the values of n1, n2, r, n3, and answer array in the HashMap 
		 */
		result.put("object_name", object_name);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding the values of n1, n2, r, and n3 as mcq options in ArrayList 
			 */ 
			mcq_option.add(n1); 
			mcq_option.add(n2);
			mcq_option.add(n3);
			mcq_option.add(r); 

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with values of first number(n1), second number(n2), third number(n3), remainder(r), answer array, ArrayList of mcq options.
		 */ 
		return result;    
	}

	/**
	    @name mg_get_division_of_two_numbers_with_dividend_zero()
	    @description Gets the problem set data for division of 2 numbers where the dividend is always zero
	    @param mcq - boolean - Multiple choice options required true / false - default is false 
	    @return HashMap (first number(n3), second number(n1), answer(n2), question_array, answer_array, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_of_two_numbers_with_dividend_zero(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating a random number for the divisor  
		 */
		n1 = mg_giveRandomInteger(2, 20, random);

		/** 
		 * Assigning zero to the dividend
		 */
		n3 = 0;

		/** 
		 * Calculating the answer
		 */
		answer = 0;  

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n3, n1, answer, question array, and answer array in the HashMap 
		 */
		if(mg_giveRandomInteger(0, 1, random) == 1) {
			result.put("number1", n1);
			result.put("number2", n3);
		} else {
			result.put("number1", n1);
			result.put("number2", n3);
		}

		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the HashMap 
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(2, 20).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with values of first number(n3), second number(n1), answer(n2), question_array, answer_array, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_division_for_basic_word_problems()
	 @description Gets the problem set data for division of 2 numbers.
	 @param level - int - Chooses a level. Values are 1 and 2.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_for_basic_word_problems(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1 and number2
		 */
		if(level == 1) {
			number1 = mg_giveRandomInteger(2, 10, random);
			number2 = mg_giveRandomInteger(2, 10, random);
		} else {
			number1 = mg_giveRandomInteger(11, 30, random);
			number2 = mg_giveRandomInteger(11, 30, random);
		}
		
		/**
		 * Obtaining the value of number3 i.e. the dividend
		 */
		number3 = number1 * number2;
				
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", number2);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 6, random);
		
		if(type == 2) {
			result.put("question", temp.get(0) + " has " + number3 + " " + temp.get(3) + ". If each child is to get " + number1 + " " + temp.get(3) + ", how many children will get the " + temp.get(3) + "?");
		} else if(type == 3) {
			result.put("question", "The teacher divided " + number3 + " " + temp.get(3) + " among " + number1 + " students. How many " + temp.get(3) + " does each student get?");
		} else if(type == 4) {
			result.put("question", "The teacher had " + number3 + " " + temp.get(3) + ". She gave " + number1 + " " + temp.get(3) + " to each student. How many students got the " + temp.get(3) + "?");
		} else if(type == 5) {
			result.put("question", temp.get(0) + " has " + number1 + " times more books than " + temp.get(1) + ". If " + temp.get(0) + " has " + number3 + " books, how many books does " + temp.get(1) + " have?");
		} else if(type == 6) {
			result.put("question", "One water bottle is enough to satisfy " + number1 + " thirsty people. There are " + number3 + " people. How many water bottles will they need to satisfy their thirst?");
		} else {
			result.put("question", temp.get(0) + " has " + number3 + " " + temp.get(3) + ". How many children will get the " + temp.get(3) + " if each child is given " + number1 + " " + temp.get(3) + "?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(number2);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
						
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(number2 - 5, number2 + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_division_for_daily_life_examples()
	 @description Gets the problem set data for division of 2 numbers based on daily life examples.
	 @param level - int - Chooses a level. Values are 1 and 2.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_for_daily_life_examples(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1 and number2
		 */
		if(level == 1) {
			number1 = mg_giveRandomInteger(10, 99, random);
			number2 = mg_giveRandomInteger(10, 99, random);
		} else {
			number1 = mg_giveRandomInteger(100, 999, random);
			number2 = mg_giveRandomInteger(10, 99, random);
		}
		
		/**
		 * Obtaining the value of number3 i.e. the dividend
		 */
		number3 = number1 * number2;
				
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", number2);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 12, random);
		
		if(type == 2) {
			result.put("question", "Father purchased " + number1 + " balloons from a fair. He wished to give those balloons equally to " + number3 + " children. How many balloons did each child get?");
		} else if(type == 3) {
			result.put("question", temp.get(0) + " saved Rs. " + number1 + " in a bank throughout the year. If " + temp.get(0) + " deposited the equal amount per month, how much money did " + temp.get(0) + " deposit each month?");
		} else if(type == 4) {
			result.put("question", "If the total cost of " + number1 + " " + temp.get(3) + " is Rs. " + number3 + " then what is the cost of one " + temp.get(3) + "?");
		} else if(type == 5) {
			result.put("question", "If " + number1 + " liters of milk are poured into " + number3 + " liters vessel. How many such vessels will be filled?");
		} else if(type == 6) {
			result.put("question", "If " + number1 + " children stand in " + number3 + " equal rows for drill, how many children will there be in each row?");
		} else if(type == 7) {
			result.put("question", "There are " + number1 + " beads. How many necklaces of " + number3 + " beads each can be made?");
		} else if(type == 8) {
			result.put("question", "How many bouquets can be made from " + number1 + " flowers with " + number3 + " flowers in each bouquet?");
		} else if(type == 9) {
			result.put("question", "If we put " + number1 + " biscuits in one packet. How many packets can be made from " + number3 + " biscuits?");
		} else if(type == 10) {
			result.put("question", "If a hostel has " + number1 + " students with " + number3 + " students in one room, in how many rooms are the students staying?");
		} else if(type == 11) {
			result.put("question", "If " + number1 + " sheets are required to make one notebook, how many notebooks at the most will " + number3 + " sheets make?");
		} else if(type == 12) {
			result.put("question", "A toy car needs " + number1 + " batteries to run. There are " + number3 + " batteries. How many cars can be run by using the available batteries?");
		} else {
			result.put("question", number1 + " people went out for dinner. The total bill came to Rs. " + number3 + ". They decided to equally contribute the bill, how much will each person have to pay?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(number2);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
						
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(number2 - 5, number2 + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_division_for_number_of_hours_to_travel_a_destination()
	 @description Gets the problem set data containing the number of hours required to travel a destination at a given speed.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_for_number_of_hours_to_travel_a_destination(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1 and number2
		 */	
		number1 = mg_giveRandomInteger(100, 999, random);
		number2 = mg_giveRandomInteger(10, 99, random);
		
		/**
		 * Obtaining the value of number3 i.e. the dividend
		 */
		number3 = number1 * number2;
		
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", number1);
		
		/**
		 * Returning the question to be displayed to the HashMap
		 */
		result.put("question", "How many hours will it take to travel " + number3 + " km at a speed of " + number2 + " km per hour?");
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(number1);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
						
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(number1 - 5, number1 + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_division_for_obtaining_quotient_by_dividing_two_smallest_random_digit_numbers()
	 @description Gets the problem set data containing quotient obtained by dividing two smallest random digit numbers.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_for_obtaining_quotient_by_dividing_two_smallest_random_digit_numbers(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, temp1, temp2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating arrays containing the smallest number and its corresponding number of digits
		 */
		int[] smallest_numbers = {1, 10, 100, 1000, 10000};
		
		/**
		 * Generating a random values for number1 and number2
		 */	
		number1 = mg_giveRandomInteger(2, 5, random);
		number2 = mg_giveRandomInteger(1, number1 - 1, random);
		
		/**
		 * Obtaining the dividend and divisor 
		 */
		temp1 = smallest_numbers[number1 - 1];
		temp2 = smallest_numbers[number2 - 1];
		
		/**
		 * Obtaining the answer
		 */
		answer = temp1 / temp2;
		
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Returning the question to be displayed to the HashMap
		 */
		result.put("question", "What will the quotient be when the smallest " + number1 + " digit number is divided by the smallest " + number2 + " digit number?");
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
						
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_division_for_obtaining_quotient_by_dividing_two_largest_random_digit_numbers()
	 @description Gets the problem set data containing quotient obtained by dividing two largest random digit numbers.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_division_for_obtaining_quotient_by_dividing_two_largest_random_digit_numbers(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, temp1, temp2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating arrays containing the largest number and its corresponding number of digits
		 */
		int[] largest_numbers = {9, 99, 999, 9999};
		
		/**
		 * Generating a random values for number1 and number2
		 */	
		number1 = mg_giveRandomInteger(2, 4, random);
		number2 = mg_giveRandomInteger(1, number1 - 1, random);
		
		/**
		 * Obtaining the dividend and divisor 
		 */
		temp1 = largest_numbers[number1 - 1];
		temp2 = largest_numbers[number2 - 1];
		
		/**
		 * Obtaining the answer
		 */
		answer = temp1 / temp2;
		
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Returning the question to be displayed to the HashMap
		 */
		result.put("question", "What will the quotient be when the largest " + number1 + " digit number is divided by the largest " + number2 + " digit number?");
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
						
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	 @name mg_get_fraction_identify_equals_fraction()
	 @description Gets the problem set data for identification of the fraction
	 @param level - int - Level of the question - default is 1
	 @param multiple_answer - boolean - Multiple answers or single answer
	 @param type - string - value can be equals / whole / halves / quarters - default type is quarters
	 @return HashMap (ArraList of answers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_fraction_identify_fraction(int level, boolean multiple_answer, String type) {
	
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		ArrayList<String> answer = new ArrayList<String>();
		ArrayList<String> mcq_option = new ArrayList<String>();
		ArrayList<String> answerset = new ArrayList<String>();
		ArrayList<String> optionset = new ArrayList<String>();
		ArrayList<String> equals = new ArrayList<String>(Arrays.asList("equals_1.png", "equals_2.png", "equals_3.png","equals_4.png", "equals_5.png", "equals_6.png","equals_7.png", "equals_8.png", "equals_9.png", "equals_10.png", "equals_11.png", "equals_12.png", "equals_13.png","equals_14.png", "equals_15.png", "equals_16.png","equals_17.png", "equals_18.png", "equals_19.png", "equals_20.png", "equals_21.png", "equals_22.png"));
		ArrayList<String> whole = new ArrayList<String>(Arrays.asList("whole_1.png", "whole_2.png", "whole_3.png","whole_4.png", "whole_5.png", "whole_6.png","whole_7.png", "whole_8.png", "whole_9.png", "whole_10.png", "whole_11.png", "whole_12.png", "whole_13.png","whole_14.png", "whole_15.png", "whole_16.png","whole_17.png"));
		ArrayList<String> halves = new ArrayList<String>(Arrays.asList("halves_1.png", "halves_2.png", "halves_3.png","halves_4.png", "halves_5.png", "halves_6.png","halves_7.png", "halves_8.png", "halves_9.png", "halves_10.png"));
		ArrayList<String> quarters = new ArrayList<String>(Arrays.asList("quarters_1.png", "quarters_2.png", "quarters_3.png","quarters_4.png", "quarters_5.png", "quarters_6.png","quarters_7.png", "quarters_8.png"));
		ArrayList<String> three_quarters = new ArrayList<String>(Arrays.asList("three_quarters_1.png", "three_quarters_2.png", "three_quarters_3.png","three_quarters_4.png", "three_quarters_5.png", "three_quarters_6.png","three_quarters_7.png", "three_quarters_8.png", "three_quarters_9.png", "three_quarters_10.png", "three_quarters_11.png","three_quarters_12.png", "three_quarters_13.png", "three_quarters_14.png","three_quarters_15.png"));
		ArrayList<String> not_equal_level_1 = new ArrayList<String>(Arrays.asList("not_equal_1.png", "not_equal_2.png", "not_equal_3.png","not_equal_4.png", "not_equal_5.png", "not_equal_6.png"));
		ArrayList<String> not_equal_level_2 = new ArrayList<String>(Arrays.asList("not_equal2_1.png", "not_equal2_2.png", "not_equal2_3.png","not_equal2_4.png", "not_equal2_5.png", "not_equal2_6.png","not_equal2_7.png", "not_equal2_8.png", "not_equal2_9.png", "not_equal2_10.png", "not_equal2_11.png", "not_equal2_12.png", "not_equal2_13.png", "not_equal2_14.png", "not_equal2_15.png", "not_equal2_16.png"));
		Map<String, Object> result = new HashMap<String, Object>();

		if(type == "random") {
			ArrayList<String> randomm = new ArrayList<String>(Arrays.asList("whole", "halves", "quarters", "three-quarters"));
			type = randomm.get(mg_giveRandomInteger( 0, randomm.size() -1, random));
		}

		if( type == "equals" ) {
			answerset = equals;
			if(level == 1) {
				optionset = not_equal_level_1;
			} else {
				optionset = not_equal_level_2;
			}	
		} else if ( type == "whole") {
			answerset = whole;
			optionset.addAll(halves);
			optionset.addAll(quarters);
		} else if ( type == "halves") {
			answerset = halves;
			optionset.addAll(whole);
			optionset.addAll(quarters);
		} else if ( type == "three-quarters") {
			answerset = three_quarters;
			optionset.addAll(halves);
			optionset.addAll(quarters);
		} else {
			answerset = quarters;
			optionset.addAll(whole);
			optionset.addAll(halves);
		}

		/** Check if the multiple answer is set or not */
		if(multiple_answer == true) {
			optionset.addAll(answerset);
		}

		/** Shuffle the set */
		Collections.shuffle(answerset);
		Collections.shuffle(optionset);

		int random_index = mg_giveRandomInteger( 0, answerset.size() -1, random);

		answer.add(answerset.get(random_index));
		mcq_option.add(answerset.get(random_index));

		for(String u : optionset) {
			if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
				mcq_option.add(u);
				if(u.toLowerCase().contains(type.toLowerCase())) {
					answer.add(u);
				}
			}
		}

		Collections.shuffle(mcq_option);

		result.put("answer", answer );
		result.put("type", type );
		result.put("mcq_options", mcq_option );

		/** Return the Hash map of answer arrayList and mcq arrayList */
		return result;
	}

	/**
	@name mg_get_fraction_identify_fraction_shaded_portion()
	@description Gets the problem set data for identification of the fraction with shaded portion
	@return HashMap (String answers, ArrayList of mcq options)
	*/
	public static Map<String, Object> mg_get_fraction_identify_fraction_shaded_portion() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		String answer, type, image;
		ArrayList<String> mcq_option = new ArrayList<String>();
		ArrayList<String> answerset = new ArrayList<String>();
		ArrayList<String> whole = new ArrayList<String>(Arrays.asList("whole_1.png", "whole_2.png", "whole_3.png","whole_4.png", "whole_5.png", "whole_6.png","whole_7.png", "whole_8.png", "whole_9.png", "whole_10.png", "whole_11.png", "whole_12.png", "whole_13.png","whole_14.png", "whole_15.png", "whole_16.png","whole_17.png"));
		ArrayList<String> halves = new ArrayList<String>(Arrays.asList("halves_1.png", "halves_2.png", "halves_3.png","halves_4.png", "halves_5.png", "halves_6.png","halves_7.png", "halves_8.png", "halves_9.png", "halves_10.png"));
		ArrayList<String> quarters = new ArrayList<String>(Arrays.asList("quarters_1.png", "quarters_2.png", "quarters_3.png","quarters_4.png", "quarters_5.png", "quarters_6.png","quarters_7.png", "quarters_8.png"));
		ArrayList<String> three_quarters = new ArrayList<String>(Arrays.asList("three_quarters_1.png", "three_quarters_2.png", "three_quarters_3.png","three_quarters_4.png", "three_quarters_5.png", "three_quarters_6.png","three_quarters_7.png", "three_quarters_8.png", "three_quarters_9.png", "three_quarters_10.png", "three_quarters_11.png","three_quarters_12.png", "three_quarters_13.png", "three_quarters_14.png","three_quarters_15.png"));
		ArrayList<String> typearray = new ArrayList<String>(Arrays.asList("whole", "half", "quarter", "three-quarters"));
		Map<String, Object> result = new HashMap<String, Object>();

		int random_index1 = mg_giveRandomInteger( 0, typearray.size() - 1, random);
		type = typearray.get(random_index1);

		if ( type.equals("whole")) {
			answerset = whole;
		} else if ( type.equals("half")) {
			answerset = halves;
		} else if ( type.equals("three-quarters")) {
			answerset = three_quarters;
		} else {
			answerset = quarters;
		}
		
		String object_name = "shaded";
		
		if(mg_giveRandomInteger( 0, 1, random) == 1) {
			object_name = "unshaded";
		}
		
		if(object_name.equals("unshaded") && type.equals("whole")) {
			object_name = "shaded";
		}
		
		answer = type;
		if(object_name.equals("unshaded")) {
			if ( type.equals("three-quarters")) {
				answer = "quarter";
			} else if ( type.equals("quarter"))  {
				answer = "three-quarters";
			}
		}
		
		/** Shuffle the set */
		Collections.shuffle(answerset);
		
		int random_index = mg_giveRandomInteger( 0, answerset.size() - 1, random);

		image = answerset.get(random_index);
		
		mcq_option.add("whole");
		mcq_option.add("half");
		mcq_option.add("quarter");
		mcq_option.add("three-quarters");
		
		Collections.shuffle(mcq_option);

		result.put("answer", answer );
		result.put("image", image );
		result.put("object_name", object_name );
		result.put("mcq_options", mcq_option );

		/** Return the Hash map of answer string and mcq arrayList */
		return result;

	}
	
	/**
	 @name mg_get_fraction_solve_fractions_word_problems_basic()
	 @description Gets the problem set data for identification of the fraction with shaded portion
	 @param level - int - Level of the question - default is 1
	 @return HashMap ( Int quantity, String Units, String portion, String answers, ArrayList of mcq options)        	
	 */
	public static Map<String, Object> mg_get_fraction_solve_fractions_word_problems_basic(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		int answer;
		String portion;
		String units;
		int quantity;

		if(level == 2) {
			quantity = 4 * mg_giveRandomInteger(1, 24, random);
		} else {
			quantity = 4 * mg_giveRandomInteger(1, 10, random);
		}

		ArrayList<Integer> mcq_option = new ArrayList<Integer>();
		ArrayList<String> portionarray = new ArrayList<String>(Arrays.asList("half", "quarter", "three-quarters"));
		ArrayList<String> unitsarray = new ArrayList<String>(Arrays.asList("rupees","meters","centimeters","millimeters","kilograms","liters","hours","minutes"));
		Map<String, Object> result = new HashMap<String, Object>();

		int random_index1 = mg_giveRandomInteger( 0, portionarray.size() - 1, random);
		portion = portionarray.get(random_index1);
		int random_index2 = mg_giveRandomInteger( 0, unitsarray.size() - 1, random);
		units = unitsarray.get(random_index2);

		if ( portion == "half") {
			answer = quantity / 2;
			mcq_option.add(answer);
			mcq_option.add(quantity);
			mcq_option.add(quantity / 4);
			mcq_option.add((int)(quantity * 0.75));
		} else if ( portion == "quarter") {
			answer = quantity / 4;
			mcq_option.add(answer);
			mcq_option.add(quantity);
			mcq_option.add(quantity / 2);
			mcq_option.add((int)(quantity * 0.75));
		} else {
			answer =  (int)(quantity * 0.75);
			mcq_option.add(answer);
			mcq_option.add(quantity);
			mcq_option.add(quantity / 2);
			mcq_option.add(quantity / 4);
		}

		Collections.shuffle(mcq_option);

		result.put("quantity", quantity );
		result.put("units", units );
		result.put("portion", portion );
		result.put("answer", answer );
		result.put("mcq_options", mcq_option );

		/** Return the Hash map of answer Int and mcq arrayList */
		return result;

	}

	/**
		 @name mg_get_fraction_convert_words_to_fractions()
		 @description Gets the problem set data for identification of the fraction with shaded portion
		 @param level - int - Level of the question - default is 1
		 @return HashMap (answer_numerator (Int), answer_denominator (Int) and fraction_word (String))        	
	 */
	public static Map<String, Object> mg_get_fraction_convert_words_to_fractions(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		int answer_numerator;
		int answer_denominator;
		String fraction_word;
		ArrayList<String> digit_word_string = new ArrayList<String>(Arrays.asList("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven",  "twelve", "thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"));
		ArrayList<String> digit_word_string_th = new ArrayList<String>(Arrays.asList("zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "nineth", "tenth", "eleventh",  "twelveth", "thirteenth","fourteenth","fifteenth","sixteenth","seventeenth","eighteenth","nineteenth"));

		if(level == 1) {
			ArrayList<String> level1set = new ArrayList<String>(Arrays.asList("half", "quarter", "three-quarters"));
			int random_index1 = mg_giveRandomInteger( 0, level1set.size() - 1, random);
			fraction_word = level1set.get(random_index1);
			if(fraction_word == "half") {
				answer_numerator = 1;
				answer_denominator = 2;
			} else if(fraction_word == "quarter") {
				answer_numerator = 1;
				answer_denominator = 4;
			} else {
				answer_numerator = 3;
				answer_denominator = 4;
			} 
		} else {
			answer_denominator = mg_giveRandomInteger( 2, 19, random);
			answer_numerator = mg_giveRandomInteger( 1, answer_denominator - 1, random);

			if(level == 3) {
				int rand3 = mg_giveRandomInteger( 0, 2, random);
				if(rand3 == 0) {
					fraction_word = digit_word_string.get(answer_numerator).concat(" upon ").concat(digit_word_string.get(answer_denominator));
				} else if(rand3 == 1) {
					fraction_word = digit_word_string.get(answer_numerator).concat(" over ").concat(digit_word_string.get(answer_denominator));
				} else {
					fraction_word = digit_word_string.get(answer_numerator).concat(" by ").concat(digit_word_string.get(answer_denominator));
				}
			} else {
				fraction_word = digit_word_string.get(answer_numerator).concat("-").concat(digit_word_string_th.get(answer_denominator));
			}	

		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("answer_numerator", answer_numerator );
		result.put("answer_denominator", answer_denominator );
		result.put("numerator", "::blank::" );
		result.put("denominator", "::blank::");
		result.put("fraction", fraction_word );

		/** Return the Hash map of answer_numerator (Int), answer_denominator (Int) and fraction_word (String) */
		return result;

	}

	/**
	 @name mg_get_fraction_convert_shaded_image_to_fractions()
	 @description Gets the problem set data for identification of the fraction with shaded portion
	 @return HashMap (answer_mixed (Int), answer_numerator (Int), answer_denominator (Int), image1 (String) [full rectangle image] and image2 (String) [partial image rectangle])        	
	 */
	public static Map<String, Object> mg_get_fraction_convert_shaded_image_to_fractions() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. */ 
		int answer_numerator;
		int answer_denominator;
		int answer_mixed = mg_giveRandomInteger(0, 5, random);
		String image1 = "";
		String image2;

		ArrayList<Integer> denominatorset = new ArrayList<Integer>(Arrays.asList(2,3,4,5,6,7,8,9,10));
		answer_denominator = denominatorset.get(mg_giveRandomInteger( 0, denominatorset.size() - 1, random));
		if(answer_denominator - 1 < 10) {
			answer_numerator = mg_giveRandomInteger( 1, answer_denominator - 1, random);
		} else {
			answer_numerator = mg_giveRandomInteger( 1, 10, random);
		}

		image2 = Integer.toString(answer_numerator).concat("_by_").concat(Integer.toString(answer_denominator)).concat("_rectangle.png");

		Map<String, Object> result = new HashMap<String, Object>();
		
		image1 = Integer.toString(answer_denominator)+"_by_"+Integer.toString(answer_denominator)+"_rectangle.png";

		result.put("answer_mixed", answer_mixed );
		result.put("answer_numerator", answer_numerator );
		result.put("answer_denominator", answer_denominator );
		result.put("whole_number", "::blank::" );
		result.put("numerator", "::blank::" );
		result.put("denominator", "::blank::" );
		result.put("image1", image1 );
		result.put("image2", image2 );

		/** Return the Hash map of answer_mixed (Int), answer_numerator (Int), answer_denominator (Int), image1 (String) [full rectangle image] and image2 (String) [partial image rectangle] */
		return result;
	}

	/**
	@name mg_get_fraction_from_a_mixed_group()
	@description Gets the problem set data for fraction for mixed group of shapes and color word problem
	@return HashMap (answer_numerator (Int), answer_denominator (Int), variable1 (string), variable2 (string), image1_num (int), image1 (string), image2_num (int) and image2 (String))
	*/
	public static Map<String, Object> mg_get_fraction_from_a_mixed_group() {

		/** Initialize random generator */
		Random random = new Random();
	
		/** Initializing variable.  What fraction of the variable1 are variable2 ?*/ 
		int answer_denominator, answer_numerator, image1_num, image2_num, rand1, rand2;
		String image1, image2, type, variable1, variable2, variable3; 
	
		answer_denominator = mg_giveRandomInteger( 2, 12, random);
		if(answer_denominator - 1 <= 10) {
			answer_numerator = mg_giveRandomInteger( 1, answer_denominator - 1, random);
		} else {
			answer_numerator = mg_giveRandomInteger( 1, 10, random);
		}
	
		image1_num = answer_numerator;
		image2_num = answer_denominator - answer_numerator;
	
		//ArrayList<String> colorset = new ArrayList<String>(Arrays.asList("red", "blue", "yellow","green", "black", "golden","silver", "orange", "purple", "brown"));
		ArrayList<String> shapeset = new ArrayList<String>(Arrays.asList("basketball", "leaf", "star"));
		ArrayList<String> typearray = new ArrayList<String>(Arrays.asList("color", "shape"));
	
		Map<String, Object> result = new HashMap<String, Object>();
	
		type = typearray.get(mg_giveRandomInteger( 0, typearray.size() - 1, random));
	
		if ( type == "color") {
			variable1 = shapeset.get(mg_giveRandomInteger( 0, shapeset.size() - 1, random)); 
			variable2 = "coloured"; 
			image1 = variable1.concat(".png");
			image2 = variable1.concat("_blank.png");
		} else {
			variable1 = "figures";
			rand1 = mg_giveRandomInteger( 0, shapeset.size() - 1, random);
			variable2 = shapeset.get(rand1); 
			image1 = variable2.concat(".png");
			do {
				rand2 = mg_giveRandomInteger(1,shapeset.size() - 1,random);
			} while (rand1 == rand2 );
			variable3 = shapeset.get(rand2); 
			image2 = variable3.concat(".png");
		} 

		result.put("answer_numerator", answer_numerator );
		result.put("answer_denominator", answer_denominator );
		result.put("variable1", variable1 );
		result.put("variable2", variable2 );
		result.put("image1_num", image1_num );
		result.put("image1", image1 );
		result.put("image2_num", image2_num );
		result.put("image2", image2 );
	
		/** Return the Hash map of answer_numerator (Int), answer_denominator (Int), variable1 (string), variable2 (string), image1_num (int), image1 (string), image2_num (int) and image2 (String) */
		return result;

	}

	/**
		 @name mg_get_fraction_relating_fractions_to_their_additive_multiplicative_components()
		 @description Gets the problem set data for fraction for Relating fractions to their additive, multiplicative components
		 @return HashMap (numerator (Int), denominator (Int), answer (string), mcq_option (Aratlist<string>))
	 */
	public static Map<String, Object> mg_get_fraction_relating_fractions_to_their_additive_multiplicative_components() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable.  What fraction of the variable1 are variable2 ?*/ 
		int denominator, numerator;
		String denominator_string, numerator_string, answer; 

		denominator = mg_giveRandomInteger( 2, 10, random);
		numerator = mg_giveRandomInteger( 1, denominator - 1, random);

		denominator_string = Integer.toString(denominator);
		numerator_string = Integer.toString(numerator);
		String denominator_string_plus1 = Integer.toString(denominator + 1);
		String denominator_string_minus1 = Integer.toString(denominator - 1);

		/** Generating bunch of correct and wrong answers */ 
		String frac_1_by_n2 = "$frac(1,".concat(denominator_string).concat(")");
		String frac_1_by_n1 = "$frac(1,".concat(numerator_string).concat(")");

		String correct_2 = numerator_string.concat(" x ").concat(frac_1_by_n2);
		String wrong_7 = denominator_string.concat(" x ").concat(frac_1_by_n1);
		String wrong_9 = denominator_string_plus1.concat(" x ").concat(frac_1_by_n1);
		String wrong_10 = denominator_string_minus1.concat(" x ").concat(frac_1_by_n1);
		String correct_3 = numerator_string.concat(" times ").concat(frac_1_by_n2);
		String wrong_8 = denominator_string.concat(" times ").concat(frac_1_by_n1);
		String wrong_11 = denominator_string_plus1.concat(" times ").concat(frac_1_by_n1);
		String wrong_12 = denominator_string_minus1.concat(" times ").concat(frac_1_by_n1);
		String correct_1 = frac_1_by_n2;
		String wrong_5 = frac_1_by_n1;
		for(int ii = 2 ; ii <= numerator ; ii++) {
			correct_1 = correct_1.concat(" + ").concat(frac_1_by_n2);
			if(ii < numerator) {
				wrong_5 = wrong_5.concat(" + ").concat(frac_1_by_n1);
			}
		}

		String wrong_3 = correct_1.concat(" + ").concat(frac_1_by_n2);
		String wrong_6 = wrong_5.concat(" + ").concat(frac_1_by_n1);
		String wrong_1 = frac_1_by_n2;
		String wrong_4 = frac_1_by_n1;
		for(int ii = 2 ; ii <= denominator ; ii++) {
			wrong_1 = wrong_1.concat(" + ").concat(frac_1_by_n2);
			wrong_4 = wrong_4.concat(" + ").concat(frac_1_by_n1);
		}

		ArrayList<String> correct_answer_set = new ArrayList<String>(Arrays.asList(correct_1, correct_2, correct_3));
		ArrayList<String> wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_3, wrong_4, wrong_5, wrong_6, wrong_7, wrong_8, wrong_9, wrong_10, wrong_11, wrong_12));

		answer = correct_answer_set.get(mg_giveRandomInteger( 0, correct_answer_set.size() - 1, random)); 

		ArrayList<String> mcq_option = new ArrayList<String>();
		mcq_option.add(answer);
		Collections.shuffle(wrong_answer_set);
		mcq_option.add(wrong_answer_set.get(0));
		mcq_option.add(wrong_answer_set.get(1));
		mcq_option.add(wrong_answer_set.get(2));
		Collections.shuffle(mcq_option);

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("numerator", numerator );
		result.put("denominator", denominator );
		result.put("fraction", "$frac("+numerator+","+denominator+")");
		result.put("answer", answer );
		result.put("mcq_options", mcq_option );

		/** Return the Hash map of numerator (Int), denominator (Int), answer (string), mcq_option (Aratlist<string>) */
		return result;

	}

	/**
	 @name mg_get_fraction_identify_numerator_and_denominator()
	 @description Gets the problem set data for fraction Identify numerator and denominator
	 @return HashMap (numerator (Int), denominator (Int), variable_object (string), answer (Int))
	 */
	public static Map<String, Object> mg_get_fraction_identify_numerator_and_denominator() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		int denominator, numerator, answer;
		String variable_object; 

		denominator = mg_giveRandomInteger( 2, 20, random);
		numerator = mg_giveRandomInteger( 1, denominator - 1, random);

		int rand1 = mg_giveRandomInteger( 0, 1, random); 

		Map<String, Object> result = new HashMap<String, Object>();
		
		if(rand1 == 0) {
			variable_object = "numerator";
			answer = numerator;
		} else {
			variable_object = "denominator";
			answer = denominator;
		}

		result.put("fraction", "$frac("+numerator+","+denominator+")" );
		result.put("numerator", numerator );
		result.put("denominator", denominator );
		result.put("answer", answer );
		result.put("variable_object", variable_object );

		/** Return the Hash map of numerator (Int), denominator (Int), variable_object (string), answer (Int) */
		return result;

	}

	/**
	 @name mg_get_fraction_text_to_mixed_fraction()
	 @description Gets the problem set data for fraction Identify numerator and denominator
	 @param level - int - Level of the question - default is 1
	 @return HashMap (answer_numerator (Int), answer_denominator (Int), answer_whole_number (int) and fraction_word (String)))
	 */
	public static Map<String, Object> mg_get_fraction_text_to_mixed_fraction(int level) {
		/** Initialize random generator */
		Random random = new Random();

		Map<String, Object> result = new HashMap<String, Object>();
		result = mg_get_fraction_convert_words_to_fractions(level);

		ArrayList<String> digit_word_string = new ArrayList<String>(Arrays.asList("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven",  "twelve", "thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twenty"));

		String fraction_word = result.get("fraction").toString();

		int whole_number = mg_giveRandomInteger( 1, 20, random);
		String word_fraction = digit_word_string.get(whole_number).concat(" and ").concat(fraction_word);

		result.put("fraction",word_fraction);
		result.put("whole_number", "::blank::");
		result.put("answer_whole_number",whole_number);

		/** Return the Hash map of numerator (Int), denominator (Int), answer_whole_number (Int), fraction_word (String) */
		return result;

	}

	/**
	 @name mg_get_fraction_improper_fraction_to_mixed_fraction()
	 @description Gets the problem set data for improper fraction to mixed fraction
	 @return HashMap (numerator (Int), denominator (Int), answer_denominator (Int), answer_numerator (Int), answer_whole_number (Int) and answer_numerator_by_denominator (double))
	 */
	public static Map<String, Object> mg_get_fraction_improper_fraction_to_mixed_fraction() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		int denominator, numerator, answer_denominator, answer_numerator, answer_whole_number;

		denominator = mg_giveRandomInteger( 2, 10, random);
		do {
			numerator = mg_giveRandomInteger(denominator + 1, 60,random);
		} while (numerator%denominator == 0 );

		answer_denominator = denominator;
		answer_whole_number = numerator / denominator;
		answer_numerator = numerator % denominator;

		for(int ii = 2 ; ii <= answer_numerator ; ii++ ) {
			if(answer_denominator % ii == 0 && answer_numerator % ii == 0) {
				answer_denominator = answer_denominator / ii;
				answer_numerator = answer_numerator / ii;
				ii = 2;
			}
		}


		Map<String, Object> result = new HashMap<String, Object>();

		result.put("numerator", "::blank::" );
		result.put("denominator","::blank::" );
		result.put("whole_number","::blank::" );
		result.put("fraction", "$frac("+numerator+","+denominator+")" );
		result.put("answer_denominator", answer_denominator );
		result.put("answer_numerator", answer_numerator );
		result.put("answer_whole_number", answer_whole_number );
		result.put("answer_numerator_by_denominator", (double)answer_numerator / answer_denominator );

		/** Return the Hash map of numerator (Int), denominator (Int), answer_denominator (Int), answer_numerator (Int), answer_whole_number (Int) and answer_numerator_by_denominator (double) */
		return result;

	}

	/**
			 @name mg_get_fraction_mixed_fraction_to_improper_fraction()
			 @description Gets the problem set data for mixed fraction to improper fraction
			 @return HashMap (numerator (Int), denominator (Int), answer_denominator (Int), answer_numerator (Int), whole_number (Int) and answer_numerator_by_denominator (double))
	 */
	public static Map<String, Object> mg_get_fraction_mixed_fraction_to_improper_fraction() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		int denominator, numerator, answer_denominator, answer_numerator, whole_number;

		whole_number = mg_giveRandomInteger( 1, 10, random);
		denominator = mg_giveRandomInteger( 2, 10, random);
		numerator = mg_giveRandomInteger(1, denominator - 1,random);

		answer_denominator = denominator;
		answer_numerator = (denominator * whole_number ) + numerator ;

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("numerator", "::blank::" );
		result.put("denominator", "::blank::" );
		result.put("fraction", "$frac("+whole_number+","+numerator+","+denominator+")" );
		result.put("answer_denominator", answer_denominator );
		result.put("answer_numerator", answer_numerator );
		result.put("answer_numerator_by_denominator", (double)answer_numerator / answer_denominator );

		/** Return the Hash map of numerator (Int), denominator (Int), answer_denominator (Int), answer_numerator (Int), whole_number (Int) and answer_numerator_by_denominator (double) */
		return result;
	}

	/**
			 @name mg_get_fraction_compare_fractions_with_1_as_numerator()
			 @description Gets the problem set data for compare fractions with 1 as numerator
			 @param level - int - Level of the question - default is 1
			 @return HashMap (variable (String), fraction1 (String), fraction2 (String), answer (String))
	 */
	public static Map<String, Object> mg_get_fraction_compare_fractions_with_1_as_numerator(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String variable, fraction1, fraction2, answer;

		int rand1 = mg_giveRandomInteger( 0, 1, random);
		int rand2, rand3;

		if(level == 2) {
			rand2 = mg_giveRandomInteger( 2, 100, random);
			do {
				rand3 = mg_giveRandomInteger(2, 100,random);
			} while (rand3 == rand2 );
		} else {
			rand2 = mg_giveRandomInteger( 2, 20, random);
			do {
				rand3 = mg_giveRandomInteger(2, 20,random);
			} while (rand3 == rand2 );
		}

		fraction1 = "$frac(1,".concat(Integer.toString(rand2)).concat(")");
		fraction2 = "$frac(1,".concat(Integer.toString(rand3)).concat(")");
		if(rand1 == 0) {
			variable = "smaller";
			if(rand2 < rand3) {
				answer = fraction2;
			} else {
				answer = fraction1;
			}
		} else {
			variable = "larger";
			if(rand2 < rand3) {
				answer = fraction1;
			} else {
				answer = fraction2;
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("variable", variable );
		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );
		
		ArrayList<String> mcq_option = new ArrayList<String>();
		mcq_option.add(fraction1);
		mcq_option.add(fraction2);
		Collections.shuffle(mcq_option);

		result.put("mcq_options", mcq_option );

		/** Return the Hash map of variable (String), fraction1 (String), fraction2 (String), answer (String) */
		return result;
	}

	/**
			 @name mg_get_fraction_compare_fractions_with_same_denominator()
			 @description Gets the problem set data for compare fractions with same denominator
			 @param level - int - Level of the question - default is 1
			 @return HashMap (variable (String), fraction1 (String), fraction2 (String), answer (String))
	 */
	public static Map<String, Object> mg_get_fraction_compare_fractions_with_same_denominator(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String variable, fraction1, fraction2, answer;
		int rand1, rand2;
		rand1 = mg_giveRandomInteger( 0, 1, random);

		if(level == 2) {
			rand2 = mg_giveRandomInteger( 4, 100, random);
		} else {
			rand2 = mg_giveRandomInteger( 4, 20, random);
		}

		int rand3, rand4;
		do {
			rand3 = mg_giveRandomInteger(1, rand2 - 1,random);
		} while (rand3 == rand2 );

		do {
			rand4 = mg_giveRandomInteger(1, rand2 - 1,random);
		} while (rand4 == rand2 || rand4 == rand3 );

		fraction1 = "$frac(".concat(Integer.toString(rand3)).concat(",").concat(Integer.toString(rand2)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(rand4)).concat(",").concat(Integer.toString(rand2)).concat(")");
		if(rand1 == 0) {
			variable = "smaller";
			if(rand3 < rand4) {
				answer = fraction1;
			} else {
				answer = fraction2;
			}
		} else {
			variable = "larger";
			if(rand3 < rand4) {
				answer = fraction2;
			} else {
				answer = fraction1;
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("variable", variable );
		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );
		
		ArrayList<String> mcq_option = new ArrayList<String>();
		mcq_option.add(fraction1);
		mcq_option.add(fraction2);
		Collections.shuffle(mcq_option);

		result.put("mcq_options", mcq_option );

		/** Return the Hash map of variable (String), fraction1 (String), fraction2 (String), answer (String) */
		return result;
	}

	/**
			 @name mg_get_fraction_compare_fractions_with_same_numerator()
			 @description Gets the problem set data for compare fractions with same numerator
			 @param level - int - Level of the question - default is 1
			 @return HashMap (variable (String), fraction1 (String), fraction2 (String), answer (String))
	 */
	public static Map<String, Object> mg_get_fraction_compare_fractions_with_same_numerator(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String variable, fraction1, fraction2, answer;

		int rand1 = mg_giveRandomInteger( 0, 1, random);
		int rand2,rand3,rand4;

		if(level == 2){
			rand3 = mg_giveRandomInteger(3, 100,random);
			do {
				rand4 = mg_giveRandomInteger(3, 100,random);
			} while (rand4 == rand3 );
		} else {
			rand3 = mg_giveRandomInteger(3, 20,random);
			do {
				rand4 = mg_giveRandomInteger(3, 20,random);
			} while (rand4 == rand3 );
		}

		if(rand3 < rand4 ) {
			rand2 = mg_giveRandomInteger(1, rand3 - 1,random);
		} else {
			rand2 = mg_giveRandomInteger(1, rand4 - 1,random);
		}

		fraction1 = "$frac(".concat(Integer.toString(rand2)).concat(",").concat(Integer.toString(rand3)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(rand2)).concat(",").concat(Integer.toString(rand4)).concat(")");
		if(rand1 == 0) {
			variable = "smaller";
			if((rand2 / rand3)  < (rand2 / rand4) ) {
				answer = fraction1;
			} else {
				answer = fraction2;
			}
		} else {
			variable = "larger";
			if((rand2 / rand3) < (rand2 / rand4)) {
				answer = fraction2;
			} else {
				answer = fraction1;
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("variable", variable );
		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );
		
		ArrayList<String> mcq_option = new ArrayList<String>();
		mcq_option.add(fraction1);
		mcq_option.add(fraction2);
		Collections.shuffle(mcq_option);

		result.put("mcq_options", mcq_option );

		/** Return the Hash map of variable (String), fraction1 (String), fraction2 (String), answer (String) */
		return result;
	}

	/**
			 @name mg_get_fraction_convert_unlike_fractions_into_like_fractions()
			 @description Gets the problem set data for convert unlike fractions into like fractions
			 @param level - int - Level of the question - default is 1
			 @return HashMap (fraction1 (String), fraction2 (String), answer_fraction1 (String), answer_fraction2 (String))
	 */
	public static Map<String, Object> mg_get_fraction_convert_unlike_fractions_into_like_fractions(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String fraction1, fraction2, answer_fraction1, answer_fraction2;

		int rand1, rand2, rand3, rand4, rand11, rand21, rand31, rand41;
		if(level == 2) {
			rand2 = mg_giveRandomInteger( 3, 20, random);
			do {
				rand4 = mg_giveRandomInteger(3, 20,random);
			} while (rand2 == rand4 );
		} else {
			rand2 = mg_giveRandomInteger( 3, 10, random);
			do {
				rand4 = mg_giveRandomInteger(3, 10,random);
			} while (rand2 == rand4 );
		}
		rand1 = mg_giveRandomInteger(1, rand2 - 1,random);
		rand3 = mg_giveRandomInteger(1, rand4 - 1,random);

		fraction1 = "$frac(".concat(Integer.toString(rand1)).concat(",").concat(Integer.toString(rand2)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(rand3)).concat(",").concat(Integer.toString(rand4)).concat(")");

		int lcd = mg_get_lcm(rand2,rand4);

		rand11 = rand1 * ( lcd / rand2 );
		rand21 = lcd;
		rand31 = rand3 * ( lcd / rand4 );
		rand41 = lcd;

		answer_fraction1 = "$frac(".concat(Integer.toString(rand11)).concat(",").concat(Integer.toString(rand21)).concat(")");
		answer_fraction2 = "$frac(".concat(Integer.toString(rand31)).concat(",").concat(Integer.toString(rand41)).concat(")");

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer_fraction1", answer_fraction1 );
		result.put("answer_fraction2", answer_fraction2 );

		/** Return the Hash map of fraction1 (String), fraction2 (String), answer_fraction1 (String), answer_fraction2 (String) */
		return result;
	}

	/**
			 @name mg_get_fraction_compare_unlike_fractions()
			 @description Gets the problem set data for compare unlike fractions 
			 @param level - int - Level of the question - default is 1
			 @return HashMap (variable (String), fraction1 (String), fraction2 (String), answer (String))
	 */
	public static Map<String, Object> mg_get_fraction_compare_unlike_fractions(int level) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String variable, fraction1, fraction2, answer;

		int rand1, rand2, rand3, rand4;
		if(level == 2) {
			rand2 = mg_giveRandomInteger( 3, 10, random);
			do {
				rand4 = mg_giveRandomInteger(3, 10,random);
			} while (rand2 == rand4 );
		} else {
			rand2 = mg_giveRandomInteger( 3, 20, random);
			do {
				rand4 = mg_giveRandomInteger(3, 20,random);
			} while (rand2 == rand4 );
		}

		rand1 = mg_giveRandomInteger(1, rand2 - 1,random);
		rand3 = mg_giveRandomInteger(1, rand4 - 1,random);

		fraction1 = "$frac(".concat(Integer.toString(rand1)).concat(",").concat(Integer.toString(rand2)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(rand3)).concat(",").concat(Integer.toString(rand4)).concat(")");

		int rand5 = mg_giveRandomInteger( 0, 1, random);

		if(rand5 == 0) {
			variable = "smaller";
			if((rand1 / rand2)  < (rand3 / rand4) ) {
				answer = fraction1;
			} else {
				answer = fraction2;
			}
		} else {
			variable = "larger";
			if((rand1 / rand2) < (rand3 / rand4)) {
				answer = fraction2;
			} else {
				answer = fraction1;
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("variable", variable );
		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );
		
		ArrayList<String> mcq_option = new ArrayList<String>();
		mcq_option.add(fraction1);
		mcq_option.add(fraction2);
		Collections.shuffle(mcq_option);

		result.put("mcq_options", mcq_option );

		/** Return the Hash map of variable (String), fraction1 (String), fraction2 (String), answer (String) */
		return result;
	}

	/**
			 @name mg_get_fraction_reduce_fractions_to_simplest_form()
			 @description Gets the problem set data to reduce fractions to simplest form
			 @return HashMap (numerator (int), denominator (int), answer_numerator (int), answer_denominator (int))
	 */
	public static Map<String, Object> mg_get_fraction_reduce_fractions_to_simplest_form() {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		int numerator, answer_numerator, denominator, answer_denominator;
		int rand = mg_giveRandomInteger( 2, 9, random);

		answer_denominator = mg_giveRandomInteger( 2, 9, random);
		answer_numerator = mg_giveRandomInteger( 1, answer_denominator - 1, random);

		numerator = answer_numerator * rand;
		denominator = answer_denominator * rand;

		for(int ii = 2 ; ii <= numerator ; ii++ ) {
			if(denominator % ii == 0 && numerator % ii == 0) {
				denominator = denominator / ii;
				numerator = numerator / ii;
				ii = 2;
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("numerator", numerator );
		result.put("denominator", denominator );
		result.put("fraction", "$frac("+numerator+","+denominator+")");
		result.put("answer_numerator", answer_numerator );
		result.put("answer_denominator", answer_denominator );

		/** Return the Hash map of numerator (int), denominator (int), answer_numerator (int), answer_denominator (int) */
		return result;
	}

	/**
		 @name mg_get_fraction_equivalent_fractions()
		 @description Gets the problem set data for equivalent fractions
		 @param multiple_answer - boolean - For multiple correct answers true / false - default is false
		 @return HashMap (fraction (string), answer (arraylist string), mcq_option (arraylist string))
	 */
	public static Map<String, Object> mg_get_fraction_equivalent_fractions(boolean multiple_answer) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		int numerator, numerator1, denominator, denominator1;
		String fraction, fraction1, fraction2;
		ArrayList<String> mcq_option = new ArrayList<String>();
		ArrayList<String> answer = new ArrayList<String>();

		int rand = mg_giveRandomInteger( 2, 9, random);
		denominator1 = mg_giveRandomInteger( 2, 9, random);
		numerator1 = mg_giveRandomInteger( 1, denominator1 - 1, random);

		numerator = numerator1 * rand;
		denominator = denominator1 * rand;

		for(int ii = 2 ; ii <= numerator ; ii++ ) {
			if(denominator % ii == 0 && numerator % ii == 0) {
				denominator = denominator / ii;
				numerator = numerator / ii;
				ii = 2;
			}
		}

		fraction1 = "$frac(".concat(Integer.toString(numerator)).concat(",").concat(Integer.toString(denominator)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(numerator1)).concat(",").concat(Integer.toString(denominator1)).concat(")");

		if(mg_giveRandomInteger( 0, 1, random) == 1) {
			fraction = fraction1;
			answer.add(fraction2);
			mcq_option.add(fraction2);
		} else {
			fraction = fraction2;
			answer.add(fraction1);
			mcq_option.add(fraction1);
		}

		ArrayList<String> correct_answer_set = new ArrayList<String>(Arrays.asList(
				"$frac(".concat(Integer.toString(numerator * 2)).concat(",").concat(Integer.toString(denominator * 2)).concat(")"),
				"$frac(".concat(Integer.toString(numerator * 3)).concat(",").concat(Integer.toString(denominator * 3)).concat(")"),
				"$frac(".concat(Integer.toString(numerator * 4)).concat(",").concat(Integer.toString(denominator * 4)).concat(")"),
				"$frac(".concat(Integer.toString(numerator * 5)).concat(",").concat(Integer.toString(denominator * 5)).concat(")"),
				"$frac(".concat(Integer.toString(numerator * 6)).concat(",").concat(Integer.toString(denominator * 6)).concat(")"),
				"$frac(".concat(Integer.toString(numerator * 7)).concat(",").concat(Integer.toString(denominator * 7)).concat(")"),
				"$frac(".concat(Integer.toString(numerator * 8)).concat(",").concat(Integer.toString(denominator * 8)).concat(")"),
				"$frac(".concat(Integer.toString(numerator * 9)).concat(",").concat(Integer.toString(denominator * 9)).concat(")")
				));

		String temp;
		int temp1;

		if(multiple_answer == true) {
			for(int ii = 0 ; ii < 3 ; ii++ ) {
				if(mg_giveRandomInteger( 0, 1, random) == 1) {
					temp = "";
					do {
						temp = correct_answer_set.get(mg_giveRandomInteger(1,correct_answer_set.size() - 1,random));
					} while ( mg_containsInArray(mcq_option,temp) );
					mcq_option.add(temp);
					answer.add(temp);
				} else {
					temp1 = mg_giveRandomInteger( 1, 4, random);
					if(temp1%4 == 0) {
						temp = "";
						do {
							temp = "$frac(".concat(Integer.toString(numerator * mg_giveRandomInteger( 2, 9, random))).concat(",").concat(Integer.toString(denominator)).concat(")");
						} while ( mg_containsInArray(mcq_option,temp) );
						mcq_option.add(temp);
					} else if(temp1%4 == 1) {
						temp = "";
						do {
							temp = "$frac(".concat(Integer.toString(numerator)).concat(",").concat(Integer.toString(denominator * mg_giveRandomInteger( 2, 9, random))).concat(")");
						} while ( mg_containsInArray(mcq_option,temp) );
						mcq_option.add(temp);
					} else if(temp1%4 == 2) {
						temp = "";
						do {
							temp = "$frac(".concat(Integer.toString(numerator + 1)).concat(",").concat(Integer.toString(denominator * mg_giveRandomInteger( 2, 9, random))).concat(")");
						} while ( mg_containsInArray(mcq_option,temp) );
						mcq_option.add(temp);
					} else if(temp1%4 == 3) {
						temp = "";
						do {
							temp = "$frac(".concat(Integer.toString(numerator * mg_giveRandomInteger( 2, 9, random))).concat(",").concat(Integer.toString(denominator + 1)).concat(")");
						} while ( mg_containsInArray(mcq_option,temp) );
						mcq_option.add(temp);
					} 
				}
			}
		} else {
			for(int ii = 0 ; ii < 3 ; ii++ ) {
				temp1 = mg_giveRandomInteger( 1, 4, random);
				if(temp1%4 == 0) {
					temp = "";
					do {
						temp = "$frac(".concat(Integer.toString(numerator * mg_giveRandomInteger( 2, 9, random))).concat(",").concat(Integer.toString(denominator)).concat(")");
					} while ( mg_containsInArray(mcq_option,temp) );
					mcq_option.add(temp);
				} else if(temp1%4 == 1) {
					temp = "";
					do {
						temp = "$frac(".concat(Integer.toString(numerator)).concat(",").concat(Integer.toString(denominator * mg_giveRandomInteger( 2, 9, random))).concat(")");
					} while ( mg_containsInArray(mcq_option,temp) );
					mcq_option.add(temp);
				} else if(temp1%4 == 2) {
					temp = "";
					do {
						temp = "$frac(".concat(Integer.toString(numerator + 1)).concat(",").concat(Integer.toString(denominator * mg_giveRandomInteger( 2, 9, random))).concat(")");
					} while ( mg_containsInArray(mcq_option,temp) );
					mcq_option.add(temp);
				} else if(temp1%4 == 3) {
					temp = "";
					do {
						temp = "$frac(".concat(Integer.toString(numerator * mg_giveRandomInteger( 2, 9, random))).concat(",").concat(Integer.toString(denominator + 1)).concat(")");
					} while ( mg_containsInArray(mcq_option,temp) );
					mcq_option.add(temp);
				} 
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("fraction", fraction );
		result.put("answer", answer );
		result.put("mcq_options", mcq_option );

		/** Return the Hash map of fraction (string), answer (arraylist string), mcq_option (arraylist string) */
		return result;
	}

	/**
			 @name mg_get_fraction_fill_in_the_missing_number()
			 @description Gets the problem set data to Fill in the missing number
			 @param mcq - boolean - mcq required or not true / false - default is false
			 @return HashMap (numerator (mixed), denominator (mixed), numerator1 (mixed), denominator1 (mixed), answer (int), mcq_option ( arraylist integer))
	 */
	public static Map<String, Object> mg_get_fraction_fill_in_the_missing_number (boolean mcq) {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		int numerator, numerator1, denominator, denominator1, answer;

		int rand = mg_giveRandomInteger( 2, 9, random);
		denominator1 = mg_giveRandomInteger( 2, 9, random);
		numerator1 = mg_giveRandomInteger( 1, denominator1 - 1, random);

		numerator = numerator1 * rand;
		denominator = denominator1 * rand;

		for(int ii = 2 ; ii <= numerator ; ii++ ) {
			if(denominator % ii == 0 && numerator % ii == 0) {
				denominator = denominator / ii;
				numerator = numerator / ii;
				ii = 2;
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("numerator", numerator );
		result.put("denominator", denominator );
		result.put("numerator1", numerator1 );
		result.put("denominator1", denominator1 );

		int temp1 = mg_giveRandomInteger( 1, 4, random);

		if(temp1 % 4 == 0) {
			answer = numerator;
			result.put("numerator", "::blank::" );
		} else if(temp1 % 4 == 1) {
			answer = denominator;
			result.put("denominator", "::blank::" );
		} else if(temp1 % 4 == 2) {
			answer = numerator1;
			result.put("numerator1", "::blank::" );
		} else {
			answer = denominator1;
			result.put("denominator1", "::blank::" );
		} 

		result.put("answer", answer );

		if(mcq == true) {
			ArrayList<Integer> mcq_option = new ArrayList<Integer>(); //creating arraylist
			mcq_option.add(answer); //adding object in arraylist

			int lower_limit, upper_limit;
			upper_limit = answer + 10;
			if(answer - 10 >= 2) {
				lower_limit = answer - 10;
			} else {
				lower_limit = 2;
			}

			int[] array = IntStream.rangeClosed(lower_limit, upper_limit).toArray();

			array = mg_shuffleInt(array); // shuffle data

			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			Collections.shuffle(mcq_option);

			result.put("mcq_options", mcq_option );
		} 

		/** Return the Hash map of numerator (mixed), denominator (mixed), numerator1 (mixed), denominator1 (mixed), answer (int), mcq_option ( arraylist integer) */
		return result;
	}

	/**
			 @name mg_get_fraction_addition_of_like_fraction()
			 @description Gets the problem set data for addition of like fractions
			 @return HashMap (fraction1 (string), fraction2 (string), answer (string))
	 */
	public static Map<String, Object> mg_get_fraction_addition_of_like_fraction () {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String fraction1, fraction2, answer;

		int r1, r2, r3;

		r3 = mg_giveRandomInteger( 3, 20, random);
		r1 = mg_giveRandomInteger( 1, r3 - 2, random);
		r2 = mg_giveRandomInteger( 1, r3 - r1 - 1, random);

		fraction1 = "$frac(".concat(Integer.toString(r1)).concat(",").concat(Integer.toString(r3)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(r2)).concat(",").concat(Integer.toString(r3)).concat(")");
		answer = "$frac(".concat(Integer.toString(r1 + r2)).concat(",").concat(Integer.toString(r3)).concat(")");

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );

		/** Return the Hash map of fraction1 (string), fraction2 (string), answer (string) */
		return result;
	}

	/**
			 @name mg_get_fraction_subtraction_of_like_fraction()
			 @description Gets the problem set data for subtraction of like fractions
			 @return HashMap (fraction1 (string), fraction2 (string), answer (string))
	 */
	public static Map<String, Object> mg_get_fraction_subtraction_of_like_fraction () {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String fraction1, fraction2, answer;

		int r1, r2, r3;

		r3 = mg_giveRandomInteger( 3, 20, random);
		r1 = mg_giveRandomInteger( 1, r3 - 1, random);
		r2 = mg_giveRandomInteger( 1, r1 - 1, random);

		fraction1 = "$frac(".concat(Integer.toString(r1)).concat(",").concat(Integer.toString(r3)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(r2)).concat(",").concat(Integer.toString(r3)).concat(")");
		answer = "$frac(".concat(Integer.toString(r1 - r2)).concat(",").concat(Integer.toString(r3)).concat(")");

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );

		/** Return the Hash map of fraction1 (string), fraction2 (string), answer (string) */
		return result;
	}

	/**
		 @name mg_get_fraction_addition_of_unlike_fraction()
		 @description Gets the problem set data for addition of unlike fractions
		 @return HashMap (fraction1 (string), fraction2 (string), answer (string))
	 */
	public static Map<String, Object> mg_get_fraction_addition_of_unlike_fraction () {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String fraction1, fraction2, answer;

		int r1, r2, r3, r4, r5, r6;

		r2 = mg_giveRandomInteger( 3, 20, random);
		do {
			r4 = mg_giveRandomInteger( 3, 20, random);
		} while ( r2 == r4 );
		r1 = mg_giveRandomInteger( 1, r2 - 1, random);
		r3 = mg_giveRandomInteger( 1, r4 - 1, random);

		int lcd = mg_get_lcm(r2,r4);

		r5 = (r1 * ( lcd / r2 )) + (r3 * ( lcd / r4 ));
		r6 = lcd;

		for(int ii = 2 ; ii <= r5 ; ii++ ) {
			if(r6 % ii == 0 && r5 % ii == 0) {
				r6 = r6 / ii;
				r5 = r5 / ii;
				ii = 2;
			}
		}

		fraction1 = "$frac(".concat(Integer.toString(r1)).concat(",").concat(Integer.toString(r2)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(r3)).concat(",").concat(Integer.toString(r4)).concat(")");
		answer = "$frac(".concat(Integer.toString(r5)).concat(",").concat(Integer.toString(r6)).concat(")");

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );

		/** Return the Hash map of fraction1 (string), fraction2 (string), answer (string) */
		return result;
	}

	/**
		 @name mg_get_fraction_subtraction_of_unlike_fraction()
		 @description Gets the problem set data for subtraction of unlike fractions
		 @return HashMap (fraction1 (string), fraction2 (string), answer (string))
	 */
	public static Map<String, Object> mg_get_fraction_subtraction_of_unlike_fraction () {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		String fraction1, fraction2, answer;

		int r1, r2, r3, r4, r5, r6;

		r2 = mg_giveRandomInteger( 3, 20, random);
		do {
			r4 = mg_giveRandomInteger( 3, 20, random);
		} while ( r2 == r4 );
		r1 = mg_giveRandomInteger( 1, r2 - 1, random);
		r3 = mg_giveRandomInteger( 1, r4 - 1, random);

		if(r1/r2 < r3/r4) {
			int temp;
			temp = r1;
			r1 = r3;
			r3 = temp;
			temp = r2;
			r2 = r4;
			r4 = temp;
		}

		int lcd = mg_get_lcm(r2,r4);

		r5 = (r1 * ( lcd / r2 )) - (r3 * ( lcd / r4 ));
		r6 = lcd;

		for(int ii = 2 ; ii <= r5 ; ii++ ) {
			if(r6 % ii == 0 && r5 % ii == 0) {
				r6 = r6 / ii;
				r5 = r5 / ii;
				ii = 2;
			}
		}

		fraction1 = "$frac(".concat(Integer.toString(r1)).concat(",").concat(Integer.toString(r2)).concat(")");
		fraction2 = "$frac(".concat(Integer.toString(r3)).concat(",").concat(Integer.toString(r4)).concat(")");
		answer = "$frac(".concat(Integer.toString(r5)).concat(",").concat(Integer.toString(r6)).concat(")");

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("fraction1", fraction1 );
		result.put("fraction2", fraction2 );
		result.put("answer", answer );

		/** Return the Hash map of fraction1 (string), fraction2 (string), answer (string) */
		return result;
	}

	/**
			 @name mg_get_fraction_multiple_of_a_fraction()
			 @description Gets the problem set data for multiple of a fraction
			 @return HashMap (numerator (int), denominator (int), multiplier (int), answer_numerator (int), answer_denominator (int))
	 */
	public static Map<String, Object> mg_get_fraction_multiple_of_a_fraction () {
		/** Initialize random generator */
		Random random = new Random();

		/** Initializing variable. ?*/ 
		int multiplier, numerator, denominator, answer_numerator, answer_denominator;

		denominator = mg_giveRandomInteger( 3, 15, random);
		numerator = mg_giveRandomInteger( 1, denominator - 1, random);
		multiplier = mg_giveRandomInteger( 2, 10, random);

		answer_numerator = multiplier * numerator;
		answer_denominator = denominator;

		for(int ii = 2 ; ii <= answer_numerator ; ii++ ) {
			if(answer_numerator % ii == 0 && answer_denominator % ii == 0) {
				answer_denominator = answer_denominator / ii;
				answer_numerator = answer_numerator / ii;
				ii = 2;
			}
		}

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("numerator", numerator );
		result.put("denominator", denominator );
		result.put("multiplier", multiplier );
		result.put("answer_numerator", answer_numerator );
		result.put("answer_denominator", answer_denominator );

		/** Return the Hash map of numerator (int), denominator (int), multiplier (int), answer_numerator (int), answer_denominator (int)  */
		return result;
	}

	/**
     @name mg_get_fraction_for_understanding_the_fraction()
	 @description Gets the problem set data containing answer i.e. fraction of an object in the total quantity.     
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_fraction_for_understanding_the_fraction(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2;
		String answer;
		
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1 and number2
		 */	
		number1 = mg_giveRandomInteger(2, 9, random);
		number2 = mg_giveRandomInteger(2, 9, random);
		
		/**
		 * Calculating the sum of number1 and number2
		 */
		int temp1 = number1 + number2;

		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 5, random);
		
		if(type == 2) {
			result.put("question", "Garden has " + number1 + " red roses and " + number2 + " pink roses. What fractions of roses are red?");
			
			/**
			 * Calculating the answer
			 */
			answer = "$frac(" + Integer.toString(number1) + "," + Integer.toString(temp1)+")";
			result.put("numerator", "::blank::");
			result.put("denominator", "::blank::");
		} else if(type == 3) {
			result.put("question", "In a school, " + number1 + " children have black hairs and " + number2 + " children have brown hairs. What fractions of children have brown hairs?");
			
			/**
			 * Calculating the answer
			 */
			answer = Integer.toString(number2) + "," + Integer.toString(temp1)+")";
			result.put("numerator", "::blank::");
			result.put("denominator", "::blank::");
		} else if(type == 4) {
			result.put("question", "There are " + number1 + " pigs, " + number2 + " cows at the farm. What fractions of the cows are at the farm?");
			
			/**
			 * Calculating the answer
			 */
			answer = "$frac(" + Integer.toString(number2) + "," + Integer.toString(temp1)+")";
			result.put("numerator", "::blank::");
			result.put("denominator", "::blank::");
		} else if(type == 5) {
			result.put("question", "In a birthday party, " + number1 + " balloons have green colour and " + number2 + " balloons have yellow colour. What fractions of the balloons have yellow colour?");
			
			/**
			 * Calculating the answer
			 */
			answer = "$frac(" + Integer.toString(number2)  + "," +  Integer.toString(temp1)+")";
			result.put("numerator", "::blank::");
			result.put("denominator", "::blank::");
		} else {
			result.put("question", "Mother used " + number1 + " spoons of sugar to make tea and " + number2 + " spoons for coffee. What fraction of sugar is used for coffee?");
			
			/**
			 * Calculating the answer
			 */
			answer = "$frac(" + Integer.toString(number2)  + "," +  Integer.toString(temp1)+")";
			result.put("numerator", "::blank::");
			result.put("denominator", "::blank::");
		}
	
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
						
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			int rand1;
			do{
				rand1 = mg_giveRandomInteger(2, 9, random);
				if(!mcq_option.contains("$frac(" + Integer.toString(rand1) + "," + Integer.toString(temp1)+ ")" )) {
					mcq_option.add("$frac(" + Integer.toString(rand1) + "," + Integer.toString(temp1)+ ")");
				}
			} while(mcq_option.size() < 4);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	@name mg_get_fraction_for_meaning_of_part_or_share()
	@description Gets the problem set data containing answer i.e. fraction of an object left after removing a part from the entire object.     
	@param mcq - boolean - Multiple choice options required true / false - default is false.                        
	@return HashMap(question, answer, ArrayList of mcq options)
	*/
	public static Map<String, Object> mg_get_fraction_for_meaning_of_part_or_share(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, temp1;
		String fraction, answer;
		
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1 and number2
		 */	
		number2 = mg_giveRandomInteger(2, 9, random);
		number1 = mg_giveRandomInteger(1, Math.min(number2 - 1, 9), random);
		
		/** converting fraction into simplest form */
		for(int ii = 2 ; ii <= number1 ; ii++ ) {
			if(number2 % ii == 0 && number1 % ii == 0) {
				number2 = number2 / ii;
				number1 = number1 / ii;
				ii = 1;
			}
		}
		
		/**
		 * Obtaining the fraction i.e. part or share of the object removed
		 */
		fraction = Integer.toString(number1).concat("/").concat(Integer.toString(number2));
		
		/**
		 * Calculating the numerator and denominator of required fraction
		 */
		temp1 = number2 - number1;
		
		/** converting fraction into simplest form */
		for(int ii = 2 ; ii <= temp1 ; ii++ ) {
			if(number2 % ii == 0 && temp1 % ii == 0) {
				number2 = number2 / ii;
				temp1 = temp1 / ii;
				ii = 1;
			}
		}
		
		/**
		 * Obtaining the answer
		 */
		answer = "$frac(" + Integer.toString(temp1) + "," + Integer.toString(number2) + ")";

		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
		result.put("numerator", "::blank::");
		result.put("denominator", "::blank::");
		
		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 4, random);
		
		if(type == 2) {
			result.put("question", temp.get(0) + " spent " + fraction + " of money and saved the rest. What fraction of money did " + temp.get(0) + " save?");
		} else if(type == 3) {
			result.put("question", temp.get(0) + " baked a cake. " + temp.get(12) + " ate " + fraction + " of cake and gave rest to the neighbor. What fraction of cake did " + temp.get(0) + " give to the neighbor?");
		} else if(type == 4) {
			result.put("question", temp.get(0) + " and " + temp.get(1) + " shared some cookies. " + temp.get(0) + " ate " + fraction + " of cookies and gave rest to the " + temp.get(1) + ". What fraction of cookies did " + temp.get(0) + " give to the " + temp.get(1) + "?");
		} else {
			result.put("question", temp.get(0) + " and " + temp.get(1) + " ordered a pizza to share. " + temp.get(0) + " ate " + fraction + " pizza. What fraction of pizza was left for " + temp.get(1) + "?");
		}
							
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			int rand1;
			do{
				rand1 = mg_giveRandomInteger(1, 9, random);
				if(!mcq_option.contains("$frac(" + Integer.toString(rand1) + "," + Integer.toString(number2)+ ")" )){
					mcq_option.add("$frac(" + Integer.toString(rand1) + "," + Integer.toString(number2)+ ")");
				}
			} while(mcq_option.size() < 4);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}
	
	/**
     @name mg_get_fraction_for_whole_and_fraction_word()
	 @description Gets the problem set data containing answer i.e. fraction of an object.
	 @param level - int - Chooses a level. Values are 1 or 2.     
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_fraction_for_whole_and_fraction_word(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, fraction_value, answer;
		String fraction_word;
		
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating a random value for number1
		 */
		if(level == 1) {
			number1 = 4 * mg_giveRandomInteger(1, 9, random);
		} else {
			number1 = 4 * mg_giveRandomInteger(10, 100, random);
		}
		
		/**
		 * Creating an array containing values for fraction words  
		 */
		String[] fraction_words = {"half", "quarter", "three-quarter"};
		
		/**
		 * Creating an array containing values corresponding to fraction word value 
		 */
		int[] fraction_values = {50, 25, 75};
		
		/**
		 * Generating a random number for selecting a value from the above arrays 
		 */
		int rand1 = mg_giveRandomInteger(0, fraction_words.length - 1, random);
		
		/**
		 * Selecting a value
		 */
		fraction_word = fraction_words[rand1];
		fraction_value = fraction_values[rand1];
		
		/**
		 * Calculating the answer
		 */
		answer = (fraction_value * number1) / 100;
		
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 5, random);
		
		if(type == 2) {
			result.put("question", "There are " + number1 + " " + temp.get(9) + ". " + toTitleCase(fraction_word) + " of them are ripe. How many " + temp.get(9) + " are ripe?\n\n::blank::");
		} else if(type == 3) {
			result.put("question", "There are " + number1 + " children. " + toTitleCase(fraction_word) + " of them are boys. How many children are boys?\n\n::blank::");
		} else if(type == 4) {
			result.put("question", "There are " + number1 + " stars. " + toTitleCase(fraction_word) + " of them are red. How many stars are red?\n\n::blank::");
		} else if(type == 5) {
			result.put("question", "There are " + number1 + " children on the ground. " + toTitleCase(fraction_word) + " of them are playing cricket. How many children are playing cricket?\n\n::blank::");
		} else {
			if(fraction_word == "half") {
				result.put("question", temp.get(0) + " saves " + number1 + " rupees per week. How many rupees will " + temp.get(0) + " save in " + fraction_word + " a week?\n\n::blank::");
			} else {
				result.put("question", temp.get(0) + " saves " + number1 + " rupees per week. How many rupees will " + temp.get(0) + " save in " + fraction_word + " of a week?\n\n::blank::");
			}
		}
							
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

			if(level == 1) {   			
				if((answer - 5) <= 1) {
					mcq_lower_limit = 1;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 27) {
					mcq_upper_limit = 27;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else {   			
				if((answer - 5) <= 10) {
					mcq_lower_limit = 10;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 300) {
					mcq_upper_limit = 300;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	@name mg_get_fraction_in_word_and_whole_number()
	@description Gets the problem set data containing answer i.e. fraction of an object.     
	@param mcq - boolean - Multiple choice options required true / false - default is false.                        
	@return HashMap(question, answer, ArrayList of mcq options)
	*/
	public static Map<String, Object> mg_get_fraction_in_word_and_whole_number(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, number4;
		String fraction, colour;
		
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2, number3
		 */
		number2 = mg_giveRandomInteger(2, 10, random);
		number1 = mg_giveRandomInteger(1, number2 - 1, random);
		
		/** converting fraction into simplest form */
		for(int ii = 2 ; ii <= number1 ; ii++ ) {
			if(number2 % ii == 0 && number1 % ii == 0) {
				number2 = number2 / ii;
				number1 = number1 / ii;
				ii = 1;
			}
		}
		
		number3 = mg_giveRandomInteger(1, 10, random);
		number3 *= number1;
		
		/**
		 * Calculating the value of number4
		 */
		number4 = (number3 * number2) / number1;

		/**
		 * Obtaining the value of fraction  
		 */
		fraction = "$frac(" + Integer.toString(number1) + "," + Integer.toString(number2) + ")";
		
		/**
		 * Creating an array containing the values for colours 
		 */
		String[] colour_values = {"red", "blue", "yellow", "green", "silver", "white", "black", "pink", "orange", "grey"};
		
		/**
		 * Selecting a random value from the above array
		 */
		int rand1 = mg_giveRandomInteger(0, colour_values.length - 1, random);
		
		/**
		 * Selecting a value
		 */
		colour = colour_values[rand1];
		
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", number3);
		
		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 19, random);
		
		if(type == 2) {
			result.put("question", "There are " + number4 + " chocolates in the box and " + fraction + " of them contain nuts. How many chocolates contain nuts?");
		} else if(type == 3) {
			result.put("question", "There were " + number4 + " friends and " + fraction + " of them were girls. How many girls were there?");
		} else if(type == 4) {
			result.put("question", number4 + " friends went to the ice-cream shop. " + fraction + " of them ordered coconut ice-cream. How many ordered coconut ice-cream?");
		} else if(type == 5) {
			result.put("question", number4 + " friends went to the snacks shop. " + fraction + " of them ate vada-pav. How many did eat the vada-pav?");
		} else if(type == 6) {
			result.put("question", "There are " + number4 + " " + temp.get(9) + ". " + fraction + " of them are ripe. How many " + temp.get(9) + " are ripe?");
		} else if(type == 7) {
			result.put("question", "There are " + number4 + " children. " + fraction + " of them are boys. How many children are boys?");
		} else if(type == 8) {
			result.put("question", "There are " + number4 + " stars. " + fraction + " of them are red. How many stars are red?");
		} else if(type == 9) {
			result.put("question", "There are " + number4 + " children on the ground. " + fraction + " of them are playing cricket. How many children are playing cricket?");
		} else if(type == 10) {
			result.put("question", temp.get(0) + " made " + number4 + " paper boat and " + fraction + " of them sailed in the river. How many paper boats did " + temp.get(0) + " sail?");
		} else if(type == 11) {
			result.put("question", "There were " + number4 + " cups and " + fraction + " of them were plastic cup. How many plastic cups were there?");
		} else if(type == 12) {
			result.put("question", "There were " + number4 + " pillow cover and " + fraction + " of them had flower print. How many pillow had flower print?");
		} else if(type == 13) {
			result.put("question", temp.get(0) + " had " + number4 + " shirts and " + fraction + " of them were of red colour. How many shirts had red colour?");
		} else if(type == 14) {
			result.put("question", "A shop has " + number4 + " bags and " + fraction + " of them were of black colour. How many bags were of black colour?");
		} else if(type == 15) {
			result.put("question", "A mobile shop has " + number4 + " mobiles. " + fraction + " of them were Samsung. How many Samsung mobiles were in the shop?");
		} else if(type == 16) {
			result.put("question", "Amar shoe shop had " + number4 + " shoes. " + fraction + " of them were sport shoes. How many sport shoes were in the shop?");
		} else if(type == 17) {
			result.put("question", "School management Committee has " + number4 + " members. " + fraction + " of them were women. How many women were in the committee?");
		} else if(type == 18) {
			result.put("question", "A teacher training had " + number4 + " participants. " + fraction + " of them were Science teacher. How many science teachers were in the training?");
		} else if(type == 19) {
			result.put("question", "Mansi hotel had " + number4 + " water bottles. " + fraction + " of them were transparent. How many bottles were transparent?");
		} else {
			result.put("question", fraction + " of the " + number4 + " cars in the park are " + colour + ". How many " + colour + " cars are there in the car park?");
		}
							
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(number3);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0; 	
			
			if((number3 - 20) <= 1) {
				mcq_lower_limit = 1;  
			} else {
				mcq_lower_limit = number3 - 20;
			}

			mcq_upper_limit = number3 + 20;
			
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	@name mg_get_fraction_for_addition_of_two_fractions()
	@description Gets the problem set data containing addition of 2 fractions.
	@param level - int - Chooses a level. Values are 1 or 2.     
	@param mcq - boolean - Multiple choice options required true / false - default is false.                        
	@return HashMap(question, answer, ArrayList of mcq options)
	*/
	public static Map<String, Object> mg_get_fraction_for_addition_of_two_fractions(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, number4;
		String fraction1, fraction2, answer;
		
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2, number3, number4
		 */
		if(level == 1) {
			number2 = mg_giveRandomInteger(3, 10, random);
			number1 = mg_giveRandomInteger(1, number2 - 1, random);
			number4 = number2;
			number3 = mg_giveRandomInteger(1, number4 - 1, random);
		} else {
			number2 = mg_giveRandomInteger(3, 10, random);
			number1 = mg_giveRandomInteger(1, number2 - 1, random);
			
			do{
				number4 = mg_giveRandomInteger(3, 10, random);
			} while(number2 == number4);
			
			number3 = mg_giveRandomInteger(1, number4 - 1, random);
		}

		
		/**
		 * Obtaining fraction1 and fraction2
		 */
		fraction1 = Integer.toString(number1).concat("/").concat(Integer.toString(number2));
		fraction2 = Integer.toString(number3).concat("/").concat(Integer.toString(number4));
		
		/**
		 * Calculating the answer  
		 */
		int temp1, temp2 = 0;
		if(level == 1) {
			temp1 = number1 + number3;
			answer = Integer.toString(temp1).concat("/").concat(Integer.toString(number2));
		} else {
			temp1 = (number1 * number4) + (number3 * number2);
			temp2 = number2 * number4;
			answer = Integer.toString(temp1).concat("/").concat(Integer.toString(temp2));
		}
				
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Creating an array containing name of vegetables
		 */
		String[] vegetable_options = {"corns", "lady fingers", "onions", "mushrooms", "potatoes", "cabbages", "cauliflowers", "pumpkins", "carrots", "peas"};

		ArrayList<String> temp3 = new ArrayList<>();
		int rand2;
		do{
			rand2 = mg_giveRandomInteger(0, vegetable_options.length - 1, random);
			if(!temp3.contains(vegetable_options[rand2])){
				temp3.add(vegetable_options[rand2]);
			}
		} while(temp3.size() < 2);

		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 21, random);
		
		if(type == 2) {
			result.put("question", temp.get(0) + " planted " + fraction1 + " rows of " + temp3.get(0) + " and " + fraction2 + " rows of the " + temp3.get(1) + ". How many rows of vegetables did " + temp.get(0) + " plant altogether?");
		} else if(type == 3) {
			result.put("question", temp.get(0) + " ate " + fraction1 + " of a pizza, while " + temp.get(1) + " ate " + fraction2 + " of a pizza. In total, how much pizza did these two eat?");
		} else if(type == 4) {
			result.put("question", temp.get(0) + " drank " + fraction1 + " of a cup of milk at breakfast and " + fraction2 + " of a cup of milk at dinner. In total, how many cups of milk did " + temp.get(0) + " drink today?");
		} else if(type == 5) {
			result.put("question", temp.get(0) + " picked " + fraction1 + " of a bucket of " + temp.get(9) + ", and " + temp.get(1) + " picked " + fraction2 + " of a bucket of " + temp.get(10) + ". How many buckets total did they pick?");
		} else if(type == 6) {
			result.put("question", temp.get(0) + " completed " + fraction1 + " of Saturday's crossword and " + fraction2 + " of Monday's crossword. In total, what fraction of these crosswords did " + temp.get(0) + " finish?");
		} else if(type == 7) {
			result.put("question", "A recipe called for " + fraction1 + " cup of chopped onions and " + fraction2 + " cup of diced onions. In total, how many cups of onions did the recipe call for?");
		} else if(type == 8) {
			result.put("question", temp.get(0) + " picked " + fraction1 + " buckets of bananas, and " + temp.get(1) + " picked " + fraction2 + " buckets of bananas. How many buckets of bananas did they pick together?");
		} else if(type == 9) {
			result.put("question", "A company donated " + fraction1 + " rupees of their profit to school library and " + fraction2 + " rupees for animal shelter. What fraction of their profit did they donate?");
		} else if(type == 10) {
			result.put("question", temp.get(0) + " went to the market for buying vegetables. " + temp.get(12) + " bought " + fraction1 + " kg tomato and " + fraction2 + " kg potato. How many kg of vegetable did " + temp.get(0) + " buy?");
		} else if(type == 11) {
			result.put("question", temp.get(0) + " made a purple colour by mixing " + fraction1 + " liter of red colour and " + fraction2 + " liter of blue colour. How many liter of purple colour was made by " + temp.get(0) + "?");
		} else if(type == 12) {
			result.put("question", temp.get(0) + " had some chocolates. " + temp.get(12) + " shared " + fraction1 + " of chocolates with " + temp.get(13) + " brother and " + fraction2 + " of chocolates with friends. What fraction of chocolates did " + temp.get(0) + " share?");
		} else if(type == 13) {
			result.put("question", "A shop has " + fraction1 + " red colour marble and " + fraction2 + " green colour marble. How many marbles does the shop have?");
		} else if(type == 14) {
			result.put("question", temp.get(0) + " had some money. " + temp.get(12) + " spent " + fraction1 + " on food and " + fraction2 + " on travel. How much money did " + temp.get(0) + " spent in all?");
		} else if(type == 15) {
			result.put("question", "A club had a cotton sale. They sold " + fraction1 + " shirts on Monday and " + fraction2 + " shirts on Tuesday. How many shirts did they sell in two days?");
		} else if(type == 16) {
			result.put("question", "A restaurant owner purchased some eggs. Chef used " + fraction1 + " of them to make omelet and " + fraction2 + " of them to make cake. How many eggs did the Chef use?");
		} else if(type == 17) {
			result.put("question", temp.get(0) + " bought a bag of marbles. " + fraction1 + " marbles were red and " + fraction2 + " marbles were green. How many marbles were in the bag?");
		} else if(type == 18) {
			result.put("question", temp.get(0) + " read " + fraction1 + " pages of a book on Saturday and " + fraction2 + " of pages on Sunday. How many pages did " + temp.get(0) + " read in total?");
		} else if(type == 19) {
			result.put("question", temp.get(0) + " gave " + fraction1 + " apple to " + temp.get(1) + " and " + fraction2 + " of apple to " + temp.get(2) + ". How much of apple did " + temp.get(0) + " give away?");
		} else if(type == 20) {
			result.put("question", temp.get(0) + " went for a long walk. " + temp.get(12) + " walked for " + fraction1 + " meter and sat down for a rest. Then " + temp.get(12).toLowerCase() + " walked " + fraction2 + " meter. How far did " + temp.get(0) + " walk altogether?");
		} else {
			result.put("question", "Mother gave " + fraction1 + " of one guava to " + temp.get(0) + " and " + fraction2 + " of the guava to " + temp.get(1) + ". What part of the guava did she give them altogether?");
		}
							
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			int rand1;
			
			if(level == 1) {
				do{
					rand1 = mg_giveRandomInteger(2, 18, random);
					if(!mcq_option.contains(Integer.toString(rand1).concat("/").concat(Integer.toString(number2)))){
						mcq_option.add(Integer.toString(rand1).concat("/").concat(Integer.toString(number2)));
					}
				} while(mcq_option.size() < 4);
			} else {
				do{
					rand1 = mg_giveRandomInteger(7, 161, random);
					if(!mcq_option.contains(Integer.toString(rand1).concat("/").concat(Integer.toString(temp2)))){
						mcq_option.add(Integer.toString(rand1).concat("/").concat(Integer.toString(temp2)));
					}
				} while(mcq_option.size() < 4);
			}
			
			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}
	
	/**
     @name mg_get_fraction_for_subtraction_of_two_fractions()
	 @description Gets the problem set data containing subtraction of 2 fractions.
	 @param level - int - Chooses a level. Values are 1 or 2.     
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_fraction_for_subtraction_of_two_fractions(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, number4;
		String fraction1, fraction2, answer;
		
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2, number3, number4
		 */
		if(level == 1) {
			do{
				number2 = mg_giveRandomInteger(3, 10, random);
				number4 = number2;
				number1 = mg_giveRandomInteger(1, number2 - 1, random);
				number3 = mg_giveRandomInteger(1, number4 - 1, random);
			} while((double)number1/number2 < (double)number3/number4 || (double)number1/number2 == (double)number3/number4);
		} else {
			do{
				number2 = mg_giveRandomInteger(3, 10, random);
				number1 = mg_giveRandomInteger(1, number2 - 1, random);
			
				do{
					number4 = mg_giveRandomInteger(3, 10, random);
				} while(number2 == number4);
			
				number3 = mg_giveRandomInteger(1, number4 - 1, random);
			} while((double)number1/number2 < (double)number3/number4 || (double)number1/number2 == (double)number3/number4);
		}
		
		/**
		 * Obtaining fraction1 and fraction2
		 */
		fraction1 = Integer.toString(number1).concat("/").concat(Integer.toString(number2));
		fraction2 = Integer.toString(number3).concat("/").concat(Integer.toString(number4));
		
		/**
		 * Calculating the answer  
		 */
		int temp1, temp2 = 0;
		if(level == 1) {
			temp1 = number1 - number3;
			answer = Integer.toString(temp1).concat("/").concat(Integer.toString(number2));
		} else {
			temp1 = (number1 * number4) - (number3 * number2);
			temp2 = number2 * number4;
			answer = Integer.toString(temp1).concat("/").concat(Integer.toString(temp2));
		}
				
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 18, random);
		
		if(type == 2) {
			result.put("question", temp.get(0) + " is " + fraction1 + " ft tall, whereas " + temp.get(1) + " is " + fraction2 + " ft tall. How much taller in feet is " + temp.get(0) + " than " + temp.get(1) + "?");
		} else if(type == 3) {
			result.put("question", temp.get(0) + " was told to practice playing piano for " + fraction1 + " hours per day. " + temp.get(0) + " has already played " + fraction2 + " hours today. How many hours does " + temp.get(0) + " still need to practice today?");
		} else if(type == 4) {
			result.put("question", temp.get(0) + " has " + fraction1 + " books left to read for school. " + temp.get(0) + " read " + fraction2 + " books on Tuesday. How many more books does " + temp.get(0) + " have to read?");
		} else if(type == 5) {
			result.put("question", temp.get(0) + " has " + fraction1 + " centimeter of ribbon. " + temp.get(12) + " gave " + fraction2 + " centimeter to " + temp.get(1) + ". How much ribbon is with " + temp.get(0) + " now?");
		} else if(type == 6) {
			result.put("question", temp.get(0) + " is allowed to play video games for " + fraction1 + " hours each day. " + temp.get(12) + " has already played for " + fraction2 + " hours today. What fraction of an hour does " + temp.get(0) + " have left to play video games today?");
		} else if(type == 7) {
			result.put("question", temp.get(0) + " has " + fraction1 + " candies. " + temp.get(12) + " gave " + fraction2 + " candies to friends. How many candies does " + temp.get(12).toLowerCase() + " have now?");
		} else if(type == 8) {
			result.put("question", temp.get(0) + " had " + fraction1 + " rupees. " + temp.get(12) + " spent " + fraction2 + " rupees on the jacket. How much rupees did " + temp.get(0) + " have left?");
		} else if(type == 9) {
			result.put("question", "A club had a cotton sale. They had " + fraction1 + " shirts in total. They sold " + fraction2 + " shirts throughout the sale. How many shirts are left with them?");
		} else if(type == 10) {
			result.put("question", "A restaurant purchased " + fraction1 + " eggs. They used " + fraction2 + " of eggs to make omelet. How many eggs do they have now?");
		} else if(type == 11) {
			result.put("question", temp.get(0) + " bought " + fraction1 + " marbles. " + fraction2 + " marbles were red and the rest were green. How many marbles were green?");
		} else if(type == 12) {
			result.put("question", "A book has " + fraction1 + " pages in total. " + temp.get(0) + " read " + fraction2 + " of the pages. How many pages are yet to be read?");
		} else if(type == 13) {
			result.put("question", temp.get(0) + " walks " + fraction1 + " km to school. " + temp.get(1) + " walks " + fraction2 + " km to school. How much farther does " + temp.get(0) + " walks than " + temp.get(1) + "?");
		} else if(type == 14) {
			result.put("question", "A school had " + fraction1 + " sq. meter of ground. Students decided to use " + fraction2 + " sq. meter of the ground for basketball and the rest for kabaddi. How much ground did the students decide for kabaddi?");
		} else if(type == 15) {
			result.put("question", temp.get(0) + " made two types of cake. " + temp.get(12) + " used " + fraction1 + " cups of sugar for one recipe and " + fraction2 + " cups of sugar for other. How much sugar did " + temp.get(12).toLowerCase() + " use more for first recipe?");
		} else if(type == 16) {
			result.put("question", temp.get(0) + " completes the task in " + fraction1 + " minutes and " + temp.get(1) + " completes the same task in " + fraction2 + " minutes. How much time " + temp.get(0) + " takes more than " + temp.get(1) + " to complete the task?");
		} else if(type == 17) {
			result.put("question", "A bottle has " + fraction1 + " liters of orange juice. If you pour " + fraction2 + " liter in a glass, how much is left in the bottle?");
		} else if(type == 18) {
			result.put("question", "A rope has " + fraction1 + " meter length. " + fraction2 + " of the rope is used for measurement. How long rope is not used for measurement?");
		} else {
			result.put("question", temp.get(0) + " wants to complete " + fraction1 + " crosswords today. " + temp.get(0) + " has already done " + fraction2 + " crosswords. What fraction of crosswords does " + temp.get(0) + " have left to finish?");
		}
							
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			int rand1;
			
			if(level == 1) {
				do{
					rand1 = mg_giveRandomInteger(1, 8, random);
					if(!mcq_option.contains(Integer.toString(rand1).concat("/").concat(Integer.toString(number2)))){
						mcq_option.add(Integer.toString(rand1).concat("/").concat(Integer.toString(number2)));
					}
				} while(mcq_option.size() < 4);
			} else {
				do{
					rand1 = mg_giveRandomInteger(1, 71, random);
					if(!mcq_option.contains(Integer.toString(rand1).concat("/").concat(Integer.toString(temp2)))){
						mcq_option.add(Integer.toString(rand1).concat("/").concat(Integer.toString(temp2)));
					}
				} while(mcq_option.size() < 4);
			}
			
			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
 	 @name mg_get_geometry_choose_similar_shape()
 	 @description Gets the problem set data for similar shape.
 	 @return HashMap (shape, image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_choose_similar_shape() {

		/**
		 * Initializing the variables
		 */
		String shape, shape_image, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList for storing shapes 
		 */
		ArrayList<String> shape_options = new ArrayList<String>(Arrays.asList("circle", "square", "rectangle", "triangle", "cone"));

		/**
		 * Creating ArrayLists containing day-to-day objects related to shapes in the above array
		 */
		ArrayList<String> circle_object_options = new ArrayList<String>(Arrays.asList("bowling_ball", "clock", "compass", "disc", "pizza", "sun"));
		ArrayList<String> square_object_options = new ArrayList<String>(Arrays.asList("carpet", "handkerchief", "sandwich", "sign_board", "square_clock", "square_monitor"));
		ArrayList<String> rectangle_object_options = new ArrayList<String>(Arrays.asList("black_board", "calculator", "camera", "comb", "credit_card", "envelope", "writing_pad"));
		ArrayList<String> cone_object_options = new ArrayList<String>(Arrays.asList("conch", "ice_cream", "megaphone", "trumpet"));
		ArrayList<String> triangle_object_options = new ArrayList<String>(Arrays.asList("bread_pakoda", "diamond", "flag", "hanger", "triangular_sandwich", "watermelon"));
		ArrayList<String> options_set = new ArrayList<String>();

		/** 
		 * Selecting a random shape 
		 */
		shape =  shape_options.get(mg_giveRandomInteger( 0, shape_options.size() - 1, random));
		shape_image = shape + ".png";

		/** 
		 * Obtaining answer and wrong mcq options
		 */
		if(shape == "circle") {
			answer = circle_object_options.get(mg_giveRandomInteger( 0, circle_object_options.size() - 1, random)) + ".png";
			options_set.addAll(square_object_options);
			options_set.addAll(cone_object_options);
			options_set.addAll(triangle_object_options);
		} else if (shape == "square") {
			answer = square_object_options.get(mg_giveRandomInteger( 0, square_object_options.size() - 1, random)) + ".png";
			options_set.addAll(circle_object_options);
			options_set.addAll(rectangle_object_options);
			options_set.addAll(triangle_object_options);
		} else if (shape == "rectangle") {
			answer = rectangle_object_options.get(mg_giveRandomInteger( 0, rectangle_object_options.size() - 1, random)) + ".png";
			options_set.addAll(circle_object_options);
			options_set.addAll(square_object_options);
			options_set.addAll(triangle_object_options);
		} else if (shape == "cone") {
			answer = cone_object_options.get(mg_giveRandomInteger( 0, cone_object_options.size() - 1, random)) + ".png";
			options_set.addAll(circle_object_options);
			options_set.addAll(square_object_options);
			options_set.addAll(triangle_object_options);
		} else {
			answer = triangle_object_options.get(mg_giveRandomInteger( 0, triangle_object_options.size() - 1, random)) + ".png";
			options_set.addAll(cone_object_options);
			options_set.addAll(square_object_options);
			options_set.addAll(rectangle_object_options);
		}

		/**
		 * Creating the ArrayList for mcq options
		 */
		ArrayList<String> mcq_options = new ArrayList<String>();

		/**
		 * Storing the answer in the ArrayList 
		 */
		mcq_options.add(answer);

		/**
		 * Shuffling the wrong mcq options
		 */
		Collections.shuffle(options_set);

		/**
		 * Storing the wrong mcq options in the mcq_option ArrayList
		 */
		mcq_options.add(options_set.get(0) + ".png");
		mcq_options.add(options_set.get(1) + ".png");
		mcq_options.add(options_set.get(2) + ".png");

		/**
		 * Shuffling the mcq options
		 */
		Collections.shuffle(mcq_options);

		/** 
		 * Storing the shape, its image, mcq options, and answer in the HashMap 
		 */
		result.put("shape", shape);
		result.put("image", shape_image);
		result.put("mcq_options", mcq_options);
		result.put("answer", answer);

		/** 
		 * Return the HashMap with shape, image, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
 	 @name mg_get_geometry_for_identifying_geometrical_shapes()
 	 @description Gets the problem set data for identifying the shown geometrical shape
 	 @param mcq - boolean - Multiple choice options required true / false - default is false
 	 @return HashMap (image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_identifying_geometrical_shapes(boolean mcq) {

		/**
		 * Initializing the variables
		 */
		String image, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList for storing images of shapes 
		 */
		String[] shape_images = {"circle.png", "square.png", "rectangle.png", "triangle.png"};

		/**
		 * Generating a random number for selecting a random number from the above array
		 */
		int rand1 = mg_giveRandomInteger(0, shape_images.length - 1, random);

		/**
		 * Selecting a random image
		 */
		image = shape_images[rand1];

		/**
		 * Splitting the above image to obtain the shape of an object
		 */
		String[] temp1 = image.split("\\.");

		/**
		 * Obtaining the answer
		 */
		answer = temp1[0];

		/**
		 * Storing the image and answer in the HashMap
		 */
		result.put("image", image);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an ArrayList for storing wrong mcq options
			 */
			ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("triangle", "circle", "rectangle", "square"));

			/**
			 * Generating index positions for wrong mcq options and storing the wrong options apart from the answer in the mcq_option ArrayList 
			 */
			int rand2;
			do{
				rand2 = mg_giveRandomInteger(0, wrong_mcq_options.size() - 1, random);
				if(!mcq_option.contains(wrong_mcq_options.get(rand2))){
					mcq_option.add(wrong_mcq_options.get(rand2));
				}
			} while(mcq_option.size() < 4);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/** 
		 * Return the HashMap with image, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
	 	 @name mg_get_geometry_for_edges_or_corners_or_faces_of_objects_with_image()
	 	 @description Gets the problem set data containing the number of edges or corners or faces of the shown object. 
	 	 @param mcq - boolean - Multiple choice options required true / false - default is false
	 	 @return HashMap (image of object, object name, parameter value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_edges_or_corners_or_faces_of_objects_with_image(boolean mcq) {

		/**
		 * Initializing the variables
		 */
		int rand1, rand2, answer;
		String object, image, parameter_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList for storing objects 
		 */
		ArrayList<String> object_options = new ArrayList<String>(Arrays.asList("ice", "die", "ball", "cuboid", "cube", "square", "rectangle", "triangle", "pyramid"));

		/**
		 * Creating an ArrayList containing number of edges corresponding to the object in the object_options ArrayList 
		 */
		ArrayList<Integer> edge_options = new ArrayList<Integer>(Arrays.asList(12, 12, 0, 12, 12, 4, 4, 3, 8));

		/**
		 * Creating an ArrayList containing number of corners corresponding to the object in the object_options ArrayList 
		 */
		ArrayList<Integer> corner_options = new ArrayList<Integer>(Arrays.asList(8, 8, 0, 8, 8, 4, 4, 3, 5));

		/**
		 * Creating an ArrayList containing number of faces corresponding to the object in the object_options ArrayList 
		 */
		ArrayList<Integer> faces_options = new ArrayList<Integer>(Arrays.asList(6, 6, 0, 6, 6, 2, 2, 2, 5));

		/**
		 * Generating a random number for selecting values from the above ArrayLists
		 */
		rand1 = mg_giveRandomInteger(0, object_options.size() - 1, random);

		/**
		 * Selecting the object name from the object_options ArrayList
		 */
		object = object_options.get(rand1);

		/**
		 * Creating an image for the selected object
		 */
		image = object.concat(".png");

		/**
		 * Creating an ArrayList containing parameter values
		 */
		ArrayList<String> parameter_values = new ArrayList<>(Arrays.asList("edges", "corners", "faces"));

		/**
		 * Generating a random number for selecting a parameter value
		 */
		rand2 = mg_giveRandomInteger(0, parameter_values.size() - 1, random);

		/**
		 * Selecting a parameter value
		 */
		parameter_value = parameter_values.get(rand2);

		/**
		 * Obtaining the answer
		 */
		if(parameter_value.equals("edges")){
			answer = edge_options.get(rand1);
		} else if(parameter_value.equals("corners")) {
			answer = corner_options.get(rand1);
		} else {
			answer = faces_options.get(rand1);
		}

		/**
		 * Storing the image, object, parameter value, answer in the HashMap
		 */
		result.put("image", image);
		result.put("object", object);
		result.put("parameter_value", parameter_value);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 3) <= 0) {
				mcq_lower_limit = 0;  
			} else {
				mcq_lower_limit = answer - 3;
			}

			if((answer + 3) >= 12) {
				mcq_upper_limit = 12;  
			} else {
				mcq_upper_limit = answer + 3;
			}

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}   		

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/** 
		 * Return the HashMap with image of object, parameter value, object name, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
	 	@name mg_get_geometry_for_edges_or_corners_or_faces_of_objects_without_image()
	 	@description Gets the problem set data containing the number of edges or corners or faces of the given object name. 
	 	@param mcq - boolean - Multiple choice options required true / false - default is false
	 	@return HashMap (object name, parameter value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_edges_or_corners_or_faces_of_objects_without_image(boolean mcq) {

		Map<String, Object> result = mg_get_geometry_for_edges_or_corners_or_faces_of_objects_with_image(mcq);
		result.remove("image");

		/** 
		 * Return the HashMap with parameter value, object name, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
	 	@name mg_get_geometry_for_vertices_or_sides_of_objects()
	 	@description Gets the problem set data containing the number of vertices or sides of the shown object. 
	 	@param mcq - boolean - Multiple choice options required true / false - default is false
	 	@return HashMap (image of object, object name, parameter value, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_vertices_or_sides_of_objects(boolean mcq) {

		/**
		 * Initializing the variables
		 */
		int rand1, rand2, answer;
		String object, image, parameter_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList for storing objects 
		 */
		ArrayList<String> object_options = new ArrayList<String>(Arrays.asList("ice", "die", "ball", "cuboid", "cube", "square", "rectangle", "triangle", "pyramid"));

		/**
		 * Creating an ArrayList containing number of vertices corresponding to the object in the object_options ArrayList 
		 */
		ArrayList<Integer> vertices_options = new ArrayList<Integer>(Arrays.asList(12, 12, 0, 12, 12, 4, 4, 3, 5));

		/**
		 * Creating an ArrayList containing number of sides corresponding to the object in the object_options ArrayList 
		 */
		ArrayList<Integer> sides_options = new ArrayList<Integer>(Arrays.asList(12, 12, 0, 12, 12, 4, 4, 3, 8));

		/**
		 * Generating a random number for selecting values from the above ArrayLists
		 */
		rand1 = mg_giveRandomInteger(0, object_options.size() - 1, random);

		/**
		 * Selecting the object name from the object_options ArrayList
		 */
		object = object_options.get(rand1);

		/**
		 * Creating an image for the selected object
		 */
		image = object.concat(".png");

		/**
		 * Creating an ArrayList containing parameter values
		 */
		ArrayList<String> parameter_values = new ArrayList<>(Arrays.asList("vertices", "sides"));

		/**
		 * Generating a random number for selecting a parameter value
		 */
		rand2 = mg_giveRandomInteger(0, parameter_values.size() - 1, random);

		/**
		 * Selecting a parameter value
		 */
		parameter_value = parameter_values.get(rand2);

		/**
		 * Obtaining the answer
		 */
		if(parameter_value.equals("vertices")){
			answer = vertices_options.get(rand1);
		} else {
			answer = sides_options.get(rand1);
		}

		/**
		 * Storing the image, object, parameter value, answer in the HashMap
		 */
		result.put("image", image);
		result.put("object", object);
		result.put("parameter_value", parameter_value);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if((answer - 3) <= 0) {
				mcq_lower_limit = 0;  
			} else {
				mcq_lower_limit = answer - 3;
			}

			if((answer + 3) >= 12) {
				mcq_upper_limit = 12;  
			} else {
				mcq_upper_limit = answer + 3;
			}

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}   		

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/** 
		 * Return the HashMap with image of object, parameter value, object name, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
 	 @name mg_get_geometry_for_identifying_whether_the_object_slides_or_rolls()
 	 @description Gets the problem set data identifying whether the given object slides or rolls. 
 	 @param mcq - boolean - Multiple choice options required true / false - default is false
 	 @return HashMap (image of object, object name, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_identifying_whether_the_object_slides_or_rolls(boolean mcq) {

		/**
		 * Initializing the variables
		 */
		String object, image, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList for storing objects 
		 */
		ArrayList<String> object_options = new ArrayList<String>(Arrays.asList("barrel", "bead", "book", "box", "cricket ball", "cylindrical stone", "juice pack", "orange", "pencil", "rugby ball", "sleigh", "tyre", "wooden block"));

		/**
		 * Creating an ArrayList containing answer for the above object 
		 */
		ArrayList<String> state_options = new ArrayList<String>(Arrays.asList("Roll", "Roll", "Slide", "Slide", "Roll", "Roll", "Slide", "Roll", "Roll", "Roll", "Slide", "Roll", "Slide"));

		/**
		 * Generating a random number for selecting a value from object_options ArrayList
		 */
		int rand1 = mg_giveRandomInteger(0, object_options.size() - 1, random);

		/**
		 * Selecting the object name from the object_options ArrayList
		 */
		object = object_options.get(rand1);

		/**
		 * Creating an image for the selected object
		 */
		String temp[] = object.split(" ");
		image = temp[0];
		for(int ii=1; ii<=temp.length - 1; ii++) {
			image = image.concat("_").concat(temp[ii]);
		}
		image = image.concat(".png");

		/**
		 * Obtaining the answer
		 */
		answer = state_options.get(rand1);

		/**
		 * Storing the image, object, answer in the HashMap
		 */
		result.put("image", image);
		result.put("object", object);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Roll");
			mcq_option.add("Slide");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/** 
		 * Return the HashMap with image of object, object name, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
 	@name mg_get_geometry_for_identifying_the_type_of_line()
 	@description Gets the problem set data identifying the type of line. 
 	@param mcq - boolean - Multiple choice options required true / false - default is false
 	@return HashMap (image of line, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_identifying_the_type_of_line(boolean mcq) {

		/**
		 * Initializing the variables
		 */
		String image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList for storing types of lines 
		 */
		ArrayList<String> line_types = new ArrayList<String>(Arrays.asList("A_curved_line_1.png", "A_curved_line_2.png", "A_curved_line_3.png", "A_curved_line_4.png", "A_curved_line_5.png", "A_horizontal_line_0.png", "A_vertical_line_0.png", "A_slanting_line_1.png", "A_slanting_line_2.png", "A_slanting_line_3.png", "A_slanting_line_4.png", "A_slanting_line_5.png"));

		/**
		 * Generating a random number for selecting value from the above ArrayList
		 */
		int rand1 = mg_giveRandomInteger(0, line_types.size() - 1, random);

		/**
		 * Selecting an value i.e. answer from the line_types ArrayList 
		 */
		image = line_types.get(rand1);

		String[] temp = image.split("\\.");
		String temp1 = temp[0];
		String[] temp2 = temp1.split("_");
		String temp3 = temp2[0];
		for(int ii=1; ii<=temp2.length - 2; ii++) {
			temp3 = temp3.concat(" ").concat(temp2[ii]);
		}
		
		/**
		 * Storing the image and answer in the HashMap
		 */
		result.put("image", image);
		result.put("answer", temp3);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("A vertical line");
			mcq_option.add("A horizontal line");
			mcq_option.add("A slanting line");
			mcq_option.add("A curved line");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/** 
		 * Return the HashMap with image of line, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
	 	@name mg_get_geometry_for_identifying_length_of_line()
	 	@description Gets the problem set data identifying length of line. 
	 	@param level - int - Chooses a level. Values are 1 or 2.
	 	@param mcq - boolean - Multiple choice options required true / false - default is false
	 	@return HashMap (image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_identifying_length_of_line(int level, boolean mcq) {

		/**
		 * Initializing the variables
		 */
		int rand1;
		String image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Generating a random number for obtaining the length of line
		 */
		rand1 = mg_giveRandomInteger(3, 10, random);

		/**
		 * Obtaining the image from the answer
		 */
		if(level == 1) {
			image = "line_starting_from_0_".concat(Integer.toString(rand1)).concat(".png");
		} else {
			image = "line_starting_from_random_".concat(Integer.toString(rand1)).concat(".png");
		}

		/**
		 * Storing the image and answer in the HashMap
		 */
		result.put("image", image);
		result.put("answer", rand1);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the answer in the ArrayList
			 */
			mcq_option.add(rand1);

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit, mcq_upper_limit;

			if((rand1 - 5) <= 3) {
				mcq_lower_limit = 3;
			} else {
				mcq_lower_limit = rand1 - 5;
			}

			if((rand1 + 5) >= 15) {
				mcq_upper_limit = 15;
			} else {
				mcq_upper_limit = rand1 + 5;
			}

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 mcq options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/** 
		 * Return the HashMap with image, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
	 	@name mg_get_geometry_for_identifying_symmetry_about_dotted_line()
	 	@description Gets the problem set data identifying whether the shown figure is symmetrical or not. 
	 	@param mcq - boolean - Multiple choice options required true / false - default is false
	 	@return HashMap (image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_identifying_symmetry_about_dotted_line(boolean mcq) {

		/**
		 * Initializing the variables
		 */
		int rand1;
		String image, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList containing images
		 */
		ArrayList<String> image_options = new ArrayList<>(Arrays.asList("M_dotted.png", "O_dotted.png", "3_dotted.png", "A_dotted.png", "B_dotted.png", "C_dotted.png", "D_dotted.png", "1_dotted.png", "2_dotted.png", "4_dotted.png", "circle_dotted.png", "square_dotted.png", "rectangle_dotted.png", "cone_dotted.png", "isoceles_triangle_dotted.png"));

		/**
		 * ArrayList containing answer for the above images
		 */
		ArrayList<String> answer_options = new ArrayList<>(Arrays.asList("Yes", "Yes", "Yes", "Yes", "Yes", "Yes", "No", "No", "No", "No", "Yes", "Yes", "No", "No", "No"));

		/**
		 * Generating a random number for selecting an image from the above ArrayList
		 */
		rand1 = mg_giveRandomInteger(0, image_options.size() - 1, random);

		/**
		 * Selecting an image
		 */
		image = image_options.get(rand1);

		/**
		 * Obtaining the answer
		 */
		answer = answer_options.get(rand1);

		/**
		 * Storing the image and answer in the HashMap
		 */
		result.put("image", image);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Yes");
			mcq_option.add("No");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/** 
		 * Return the HashMap with image, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
	 	@name mg_get_geometry_for_identifying_symmetry_about_any_line()
	 	@description Gets the problem set data identifying whether the shown figure is symmetrical or not when cut about any line. 
	 	@param mcq - boolean - Multiple choice options required true / false - default is false
	 	@return HashMap (image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_geometry_for_identifying_symmetry_about_any_line(boolean mcq) {

		/**
		 * Initializing the variables
		 */
		int rand1;
		String image, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<String, Object>();

		/**
		 * Creating an ArrayList containing images
		 */
		ArrayList<String> image_options = new ArrayList<>(Arrays.asList("M_dotted_random.png", "O_dotted_random.png", "3_dotted_random.png", "A_dotted_random.png", "B_dotted_random.png", "C_dotted_random.png", "D_dotted_random.png", "1_dotted_random.png", "2_dotted_random.png", "4_dotted_random.png", "circle_dotted_random.png", "square_dotted_random.png", "rectangle_dotted_random.png", "cone_dotted_random.png", "isoceles_triangle_dotted_random.png"));

		/**
		 * ArrayList containing answer for the above images
		 */
		ArrayList<String> answer_options = new ArrayList<>(Arrays.asList("No", "No", "No", "No", "No", "No", "No", "No", "No", "No", "Yes", "No", "No", "No", "No"));

		/**
		 * Generating a random number for selecting an image from the above ArrayList
		 */
		rand1 = mg_giveRandomInteger(0, image_options.size() - 1, random);

		/**
		 * Selecting an image
		 */
		image = image_options.get(rand1);

		/**
		 * Obtaining the answer
		 */
		answer = answer_options.get(rand1);

		/**
		 * Storing the image and answer in the HashMap
		 */
		result.put("image", image);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Yes");
			mcq_option.add("No");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/** 
		 * Return the HashMap with image, answer, ArrayList of mcq options 
		 */
		return result;
	}

	/**
     @name mg_get_measurement_comparison_among_2_objects()
	 @description Gets the problem set data for identifying which object is longer/shorter, lighter/heavier, wider/narrower or tall/short compared to the other object  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image1, image2, name of the object, comparison value (longer/shorter, lighter/heavier, wider/narrower, tall/short), answer image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparison_among_2_objects(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1, rand2, rand3;
		String comparison_value, image1, image2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of object names
		 */
		rand1 = mg_giveRandomInteger(0, 3, random);
		
		String[] object1_array, object2_array, comparison_values;
		
		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(rand1 == 0) {
			
			/**
			 * Creating an array with longer objects
			 */
			object1_array = new String[]{"bat_longer.png", "rope_longer.png", "scale_longer.png", "wood_longer.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with shorter objects
			 */
			object2_array = new String[]{"bat_shorter.png", "rope_shorter.png", "scale_shorter.png", "wood_shorter.png"};
			
			/**
			 * Returning image1 and image2
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"longer", "shorter"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image1.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", temp3[0]);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp3[temp3.length - 1])) {
				result.put("answer", image1);
			} else {
				result.put("answer", image2);
			}
		} else if(rand1 == 1) {
			
			/**
			 * Creating an array with heavier objects
			 */
			object1_array = new String[]{"bag_heavier.png", "ball_heavier.png", "barell_heavier.png", "bike_heavier.png", "box_heavier.png", "doll_heavier.png", "elephant_heavier.png", "fish_heavier.png", "juice_pack_heavier.png", "orange_heavier.png", "peacock_heavier.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with lighter objects
			 */
			object2_array = new String[]{"bag_lighter.png", "ball_lighter.png", "barell_lighter.png", "bike_lighter.png", "box_lighter.png", "doll_lighter.png", "elephant_lighter.png", "fish_lighter.png", "juice_pack_lighter.png", "orange_lighter.png", "peacock_lighter.png"};
			
			/**
			 * Returning image1 and image2
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"lighter", "heavier"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image1.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			String temp4 = temp3[temp3.length - 1];
			String object_name = image1.replace("_heavier.png", "");
			object_name = object_name.replace("_", " ");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", object_name);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp4)) {
				result.put("answer", image1);
			} else {
				result.put("answer", image2);
			}
		} else if(rand1 == 2) {
			
			/**
			 * Creating an array with taller objects
			 */
			object1_array = new String[]{"fan_taller.png", "pole_taller.png", "tree_taller.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with shorter objects
			 */
			object2_array = new String[]{"fan_shorter.png", "pole_shorter.png", "tree_shorter.png"};
			
			/**
			 * Returning image1 and image2
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"taller", "shorter"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image1.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", temp3[0]);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp3[1])) {
				result.put("answer", image1);
			} else {
				result.put("answer", image2);
			}
		} else {
			
			/**
			 * Creating an array with wider objects
			 */
			object1_array = new String[]{"bottle_wider.png", "mat_wider.png", "mobile_wider.png", "road_wider.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with shorter objects
			 */
			object2_array = new String[]{"bottle_narrower.png", "mat_narrower.png", "mobile_narrower.png", "road_narrower.png"};
			
			/**
			 * Returning image1 and image2
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"wider", "narrower"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image1.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", temp3[0]);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp3[1])) {
				result.put("answer", image1);
			} else {
				result.put("answer", image2);
			}
		}
		
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(image1);
			mcq_option.add(image2);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image1, image2, name of the object, comparison value (longer/shorter, lighter/heavier, wider/narrower, tall/short), answer image, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_measurement_comparison_among_3_objects()
	 @description Gets the problem set data for identifying which object is longest/shortest, lightest/heaviest, widest/narrowest or tallest/shortest compared to the other 2 objects  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image1, image2, image3, name of the object, comparison value (longest/shortest, lightest/heaviest, widest/narrowest, tallest/shortest), answer image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparison_among_3_objects(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1, rand2, rand3;
		String comparison_value, image1, image2, image3;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of object names
		 */
		rand1 = mg_giveRandomInteger(0, 3, random);
		
		String[] object1_array, object2_array, object3_array, comparison_values;
		
		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(rand1 == 0) {
			
			/**
			 * Creating an array with longer objects
			 */
			object1_array = new String[]{"bat_longer.png", "rope_longer.png", "scale_longer.png", "wood_longer.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with shorter objects
			 */
			object2_array = new String[]{"bat_shortest.png", "rope_shortest.png", "scale_shortest.png", "wood_shortest.png"};
			
			/**
			 * Creating an array with longest objects
			 */
			object3_array = new String[]{"bat_longest.png", "rope_longest.png", "scale_longest.png", "wood_longest.png"};
			
			/**
			 * Returning image1, image2, image3
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			image3 = object3_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"longest", "shortest"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image2.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", temp3[0]);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("image3", image3);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp3[temp3.length - 1])) {
				result.put("answer", image2);
			} else {
				result.put("answer", image3);
			}
		} else if(rand1 == 1) {
			
			/**
			 * Creating an array with heavier objects
			 */
			object1_array = new String[]{"bag_heavier.png", "ball_heavier.png", "barell_heavier.png", "bike_heavier.png", "box_heavier.png", "doll_heavier.png", "elephant_heavier.png", "fish_heavier.png", "juice_pack_heavier.png", "orange_heavier.png", "peacock_heavier.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with lightest objects
			 */
			object2_array = new String[]{"bag_lightest.png", "ball_lightest.png", "barell_lightest.png", "bike_lightest.png", "box_lightest.png", "doll_lightest.png", "elephant_lightest.png", "fish_lightest.png", "juice_pack_lightest.png", "orange_lightest.png", "peacock_lightest.png"};
			
			/**
			 * Creating an array with heaviest objects
			 */
			object3_array = new String[]{"bag_heaviest.png", "ball_heaviest.png", "barell_heaviest.png", "bike_heaviest.png", "box_heaviest.png", "doll_heaviest.png", "elephant_heaviest.png", "fish_heaviest.png", "juice_pack_heaviest.png", "orange_heaviest.png", "peacock_heaviest.png"};
			
			/**
			 * Returning image1 and image2
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			image3 = object3_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"lightest", "heaviest"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image2.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			String temp4 = temp3[temp3.length - 1];
			String object_name = image2.replace("_lightest.png", "");
			object_name = object_name.replace("_", " ");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", object_name);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("image3", image3);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp4)) {
				result.put("answer", image2);
			} else {
				result.put("answer", image3);
			}
		} else if(rand1 == 2) {
			
			/**
			 * Creating an array with taller objects
			 */
			object1_array = new String[]{"fan_taller.png", "pole_taller.png", "tree_taller.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with shortest objects
			 */
			object2_array = new String[]{"fan_shortest.png", "pole_shortest.png", "tree_shortest.png"};
			
			/**
			 * Creating an array with tallest objects
			 */
			object3_array = new String[]{"fan_tallest.png", "pole_tallest.png", "tree_tallest.png"};
			
			/**
			 * Returning image1, image2, image3
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			image3 = object3_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"tallest", "shortest"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image2.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", temp3[0]);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("image3", image3);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp3[1])) {
				result.put("answer", image2);
			} else {
				result.put("answer", image3);
			}
		} else {
			
			/**
			 * Creating an array with wider objects
			 */
			object1_array = new String[]{"bottle_wider.png", "mat_wider.png", "mobile_wider.png", "road_wider.png"};
			
			/**
			 * Generating a random number for selecting objects 
			 */
			rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
			
			/**
			 * Creating an array with narrowest objects
			 */
			object2_array = new String[]{"bottle_narrowest.png", "mat_narrowest.png", "mobile_narrowest.png", "road_narrowest.png"};

			/**
			 * Creating an array with widest objects
			 */
			object3_array = new String[]{"bottle_widest.png", "mat_widest.png", "mobile_widest.png", "road_widest.png"};

			/**
			 * Returning image1, image2, image3
			 */
			image1 = object1_array[rand2];
			image2 = object2_array[rand2];
			image3 = object3_array[rand2];
			
			/**
			 * Creating an array for comparison values
			 */
			comparison_values = new String[]{"widest", "narrowest"};
			
			/**
			 * Selecting random comprison values
			 */
			rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
			
			/**
			 * Selecting a comparison value
			 */
			comparison_value = comparison_values[rand3];
			
			/**
			 * Obtaining the object name
			 */
			String[] temp1 = image2.split("\\.");
			String temp2 = temp1[0];
			String[] temp3 = temp2.split("_");
			
			/**
			 * Returning the values to the HashMap
			 */
			result.put("object", temp3[0]);
			result.put("image1", image1);
			result.put("image2", image2);
			result.put("image3", image3);
			result.put("comparison_value", comparison_value);
			
			if(comparison_value.equals(temp3[1])) {
				result.put("answer", image2);
			} else {
				result.put("answer", image3);
			}
		}
		
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(image1);
			mcq_option.add(image2);
			mcq_option.add(image3);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image1, image2, name of the object, comparison value (longer/shorter, lighter/heavier, wider/narrower, tall/short), answer image, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_measurement_comparison_among_2_objects_based_on_size()
	 @description Gets the problem set data for identifying which object is smaller or bigger/larger compared to the other object  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image1, image2, name of the object, comparison value (smaller or bigger/larger), answer image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparison_among_2_objects_based_on_size(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand2, rand3;
		String comparison_value, image1, image2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();
		
		String[] object1_array, object2_array, comparison_values;
		
		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Creating an array with longer objects
		 */
		object1_array = new String[]{"bag_larger.png", "ball_larger.png", "barrel_larger.png", "box_larger.png", "doll_larger.png", "elephant_larger.png", "fish_larger.png", "juice_pack_larger.png", "orange_larger.png",  "peacock_larger.png", "phone_larger.png", "pig_larger.png", "rabbit_larger.png", "tiffin_larger.png", "toy_larger.png", "tv_larger.png", "vegetable_larger.png", "water_drum_larger.png"};
		
		/**
		 * Generating a random number for selecting objects 
		 */
		rand2 = mg_giveRandomInteger(0, object1_array.length - 1, random);
		
		/**
		 * Creating an array with shorter objects
		 */
		object2_array = new String[]{"bag_smaller.png", "ball_smaller.png", "barrel_smaller.png", "box_smaller.png", "doll_smaller.png", "elephant_smaller.png", "fish_smaller.png", "juice_pack_smaller.png", "orange_smaller.png",  "peacock_smaller.png", "phone_smaller.png", "pig_smaller.png", "rabbit_smaller.png", "tiffin_smaller.png", "toy_smaller.png", "tv_smaller.png", "vegetable_smaller.png", "water_drum_smaller.png"};
		
		/**
		 * Returning image1 and image2
		 */
		image1 = object1_array[rand2];
		image2 = object2_array[rand2];
		
		/**
		 * Creating an array for comparison values
		 */
		comparison_values = new String[]{"larger", "smaller", "bigger"};
		
		/**
		 * Selecting random comprison values
		 */
		rand3 = mg_giveRandomInteger(0, comparison_values.length - 1, random);
		
		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_values[rand3];
		
		/**
		 * Obtaining the object name
		 */
		String[] temp1 = image2.split("\\.");
		String temp2 = temp1[0];
		String[] temp3 = temp2.split("_");
		String temp4 = temp3[temp3.length - 1];
		String object_name = image2.replace("_smaller.png", "");
		object_name = object_name.replace("_", " ");
		
		/**
		 * Returning the values to the HashMap
		 */
		result.put("object", object_name);
		result.put("image1", image1);
		result.put("image2", image2);
		result.put("comparison_value", comparison_value);
		
		if(comparison_value.equals(temp4)) {
			result.put("answer", image2);
		} else {
			result.put("answer", image1);
		}
	
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(image1);
			mcq_option.add(image2);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image1, image2, name of the object, comparison value (longer/shorter, lighter/heavier, wider/narrower, tall/short), answer image, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_measurement_comparison_among_2_objects_based_on_capacity()
	 @description Gets the problem set data for identifying which object holds more or less quantity than the other object  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image1, image2, name of the object, comparison value (more or less), answer image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparison_among_2_objects_based_on_capacity(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String image1, image2, comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of object names with bigger sizes
		 */
		String[] objects_larger_array = {"bag_more.png", "barrel_more.png", "bottle_more.png", "bucket_more.png", "cardboard_box_more.png", "sack_more.png", "tiffin_more.png", "trolley_cart_more.png", "water_drum_more.png"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_larger_array.length - 1, random);

		/**
		 * Creating an array of object names with smaller sizes
		 */
		String[] objects_smaller_array = {"bag_less.png", "barrel_less.png", "bottle_less.png", "bucket_less.png", "cardboard_box_less.png", "sack_less.png", "tiffin_less.png", "trolley_cart_less.png", "water_drum_less.png"};

		/**
		 * Selecting objects
		 */
		image1 = objects_larger_array[rand1];
		image2 = objects_smaller_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Returning the object name
		 */
		String[] temp = image1.split("_");
		String temp1 = temp[0];
		for(int ii=1; ii<=temp.length - 2; ii++) {
			temp1 = temp1.concat(" ").concat(temp[ii]);
		}
		result.put("object", temp1); 

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Storing image1, image2, comparison value in the HashMap 
		 */
		result.put("image1", image1);
		result.put("image2", image2);
		result.put("comparison_value", comparison_value);

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {
			result.put("answer", image1);
		} else {
			result.put("answer", image2);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(image1);
			mcq_option.add(image2);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image1, image2, name of the object, comparison value (more or less), answer image, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_measurement_comparison_among_4_objects_based_on_mass()
	 @description Gets the problem set data for identifying which object has the most mass compared to the other 3 objects  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (images of weighing stones, answer image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparison_among_4_objects_based_on_mass(boolean mcq) {

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of object names
		 */
		String[] weights_array = {"1000_grams.png", "500_grams.png", "100_grams.png", "200_grams.png", "50_grams.png", "10000_grams.png", "5000_grams.png", "20000_grams.png"};

		/**
		 * Shuffling the array
		 */
		weights_array = mg_shuffleString(weights_array);

		/**
		 * Generating a random number for selecting a random object name 
		 */
		ArrayList<String> temp = new ArrayList<>();
		int high = 0;
		String high_image = "";
		int rand1 = mg_giveRandomInteger(0, weights_array.length - 1, random);
		do{
			rand1 = mg_giveRandomInteger(0, weights_array.length - 1, random);
			if(!temp.contains(weights_array[rand1])){
				temp.add(weights_array[rand1]);
				if(Integer.parseInt(weights_array[rand1].replace("_grams.png", "")) > high ) {
					high = Integer.parseInt(weights_array[rand1].replace("_grams.png", ""));
					high_image = weights_array[rand1];
				}
			}
		} while(temp.size() < 4);

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the images, answer in the HashMap
		 */
		result.put("image1", temp.get(0));
		result.put("image2", temp.get(1));
		result.put("image3", temp.get(2));
		result.put("image4", temp.get(3));
		result.put("answer", high_image);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(temp.get(0));
			mcq_option.add(temp.get(1));
			mcq_option.add(temp.get(2));
			mcq_option.add(temp.get(3));

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with images of weighing stones, answer image, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_measurement_measuring_objects_using_measuring_tools()
	 @description Gets the problem set data for identifying which measuring tool to be used for a particular object  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (name of the object, unit of measure, answer image, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_measuring_objects_using_measuring_tools(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1;
		String object, unit_of_measure, answer_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array = {"boy", "girl", "vegetable", "fruit", "sugar", "lunch", "dinner", "table", "towel", "saree", "door", "window", "boy", "girl", "milk", "water", "body", "oil"};
		String[] units_of_measure_array = {"weight", "weight", "weight", "weight", "weight", "time", "time", "length", "length", "length", "height", "height", "height", "height", "temperature", "temperature", "temperature", "temperature"};
		String[] measuring_tools_image_array = {"weighing_machine.png", "weighing_machine.png", "scale.png", "scale.png", "scale.png", "clock.png", "clock.png", "measuring_tape.png", "measuring_tape.png", "measuring_tape.png", "measuring_tape.png", "measuring_tape.png", "measuring_tape.png", "measuring_tape.png", "thermometer.png", "thermometer.png","thermometer.png","thermometer.png"};

		/**
		 * Generating a random number for selecting a random object name, unit of measure, and the measuring tool to be used 
		 */
		rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object
		 */
		object = objects_array[rand1];
		unit_of_measure = units_of_measure_array[rand1];
		answer_image = measuring_tools_image_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Returning the object name
		 */
		result.put("object", object);
		result.put("unit_of_measure", unit_of_measure);
		result.put("answer", answer_image);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer_image);

			/**
			 * Creating an array containing all possible images for the wrong mcq options
			 */
			String[] all_possibility = {"weighing_machine.png", "scale.png", "clock.png", "measuring_tape.png", "thermometer.png"};

			/**
			 * Selecting an image
			 */
			all_possibility = mg_shuffleString(all_possibility);

			/**
			 * Ensuring that no 2 mcq options are the same
			 */
			for(int i = 0; i < all_possibility.length; i++) {
				if(!mg_containsInArray(mcq_option, all_possibility[i]) && mcq_option.size() < 4) {
					mcq_option.add(all_possibility[i]);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with name of the object, unit of measure, answer image, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_measurement_measuring_length_using_a_centimeter_ruler()
	 @description Gets the problem set data containing the length of an object in cm 
	 @param level - int - Chooses a level. Values are 1 or 2. 
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (name of the object, image of the object and the ruler, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_measuring_length_using_a_centimeter_ruler(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String object, object_and_ruler_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of object names
		 */
		String[] objects_array;
		if(level == 1) {
			objects_array = new String[]{"0_bottle_5.png", "0_crayon_10.png", "0_eraser_3.png", "0_pen_10.png", "0_pencil_7.png", "0_pencil_9.png", "0_rope_8.png", "0_sketch_pen_4.png", "0_spoon_6.png", "0_spoon_9.png"};
		} else {
			objects_array = new String[]{"random_bottle_5.png", "random_crayon_10.png", "random_eraser_3.png", "random_pen_10.png", "random_pencil_7.png", "random_pencil_9.png", "random_rope_8.png", "random_sketch_pen_4.png", "random_spoon_6.png", "random_spoon_9.png"};
		}
		
		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object
		 */
		String[] temp1 = objects_array[rand1].split("\\.");
		String[] temp2 = temp1[0].split("_");
		String answer = temp2[temp2.length - 1];
		object = temp2[1];
		for(int ii=2; ii<=temp2.length - 2; ii++) {
			object = object.concat(" ").concat(temp2[ii]);
		}
		object_and_ruler_image = objects_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Returning the object name and object with ruler image
		 */
		result.put("object", object);
		result.put("image", object_and_ruler_image);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the answer in the ArrayList
			 */
			mcq_option.add(Integer.parseInt(answer));

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit, mcq_upper_limit;

			if(Integer.parseInt(answer) - 5 <= 1) {
				mcq_lower_limit = 1;
			} else {
				mcq_lower_limit = Integer.parseInt(answer) - 5;
			}

			if(Integer.parseInt(answer) + 5 >= 15) {
				mcq_upper_limit = 15;
			} else {
				mcq_upper_limit = Integer.parseInt(answer) + 5;
			}

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 mcq options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with name of the object, image of the object and the ruler, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_measurement_using_appropriate_measuring_units()
	 @description Gets the problem set data containing better estimate for the type of measurement of a object 
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (type of measurement, name of the object, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_using_appropriate_measuring_units(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int random_number_1;
		String object, type_of_measurement, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Array of object names, type of measurement, and unit of measurement. 
		 */
		String[] objects_array = {"eraser", "pen", "pencil", "ladder", "orange", "apple", "mango", "chocolate", "water bottle"};
		String[] types_of_measurement = {"length", "length", "length", "length", "weight", "weight", "weight", "weight", "volume"};   
		String[] units_of_measurement = {"centimeters", "centimeters", "centimeters", "meters", "grams", "grams", "grams", "grams", "milliliters"};

		/**
		 * Generating a random number for selecting a random object name, its type of measurement, and its unit of measurement 
		 */
		int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Generating a random number for the size of the object
		 */
		random_number_1 = mg_giveRandomInteger(1, 30, random);

		/**
		 * Selecting an object, its type of measurement
		 */
		object = objects_array[rand1];
		type_of_measurement = types_of_measurement[rand1];

		/**
		 * Obtaining the answer
		 */
		answer = Integer.toString(random_number_1).concat(" ").concat(units_of_measurement[rand1]);

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Returning the object name, its type of measurement, and answer
		 */
		result.put("object", object);
		result.put("type_of_measurement", type_of_measurement);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating an array containing wrong units of measure for the wrong mcq options
			 */
			String[] wrong_units_of_measurement = {"meters", "meters", "meters", "centimeters", "kilograms", "kilograms", "kilograms", "kilograms", "liters"};

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(answer);
			mcq_option.add(Integer.toString(random_number_1).concat(" ").concat(wrong_units_of_measurement[rand1]));			

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with type of measurement, name of the object, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_comparing_metric_units_of_length_mm_and_cm()
			 @description Gets the problem set data identifying which number is more / less than the other 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (comparison value, first number, second number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparing_metric_units_of_length_mm_and_cm(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int random_number_1, temp;
		double random_number_2;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing comparison value in the HashMap 
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Generating values for the first and second random number
		 */	    
		if(level == 1) {
			random_number_1 = mg_giveRandomInteger(1, 100, random);
			random_number_2 = mg_giveRandomDouble(0.1, 10.0, random);
		} else {
			random_number_1 = mg_giveRandomInteger(100, 1000, random);
			random_number_2 = mg_giveRandomDouble(10.0, 100.0, random);
		}

		/** 
		 * Limiting the double value to 1 decimal place
		 */
		int temp1 = (int) (random_number_2 * 10);					
		random_number_2 = (double) temp1 / 10; 

		/**
		 * Converting the value in mm to cm
		 */
		temp = (int) (random_number_2 * 10);

		/**
		 * Storing the values of n1 and n2 in HashMap 
		 */
		result.put("n1_unit1", Integer.toString(random_number_1).concat(" mm"));
		result.put("n2_unit2", Double.toString(random_number_2).concat(" cm"));

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {
			if(random_number_1 > temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" mm"));
			} else if(random_number_1 == temp) {
				result.put("answer", "Neither, they are equal");
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" cm"));
			}
		} else if(comparison_value == "less") {
			if(random_number_1 < temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" mm"));
			} else if(random_number_1 == temp){
				result.put("answer", "Neither, they are equal");
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" cm"));
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(Integer.toString(random_number_1).concat(" mm"));
			mcq_option.add(Double.toString(random_number_2).concat(" cm"));
			mcq_option.add("Neither, they are equal");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with comparison value, first number, second number, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_comparing_metric_units_of_length_cm_and_m()
			 @description Gets the problem set data identifying which number is more / less than the other 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (comparison value, first number, second number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparing_metric_units_of_length_cm_and_m(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int random_number_1, temp;
		double random_number_2;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing comparison value in the HashMap 
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Generating values for the first and second random number
		 */	    
		if(level == 1) {
			random_number_1 = mg_giveRandomInteger(1, 1000, random);
			random_number_2 = mg_giveRandomDouble(0.01, 10.00, random);
		} else {
			random_number_1 = mg_giveRandomInteger(1000, 10000, random);
			random_number_2 = mg_giveRandomDouble(10.00, 100.00, random);
		}

		/**
		 * Limiting the double value to 2 decimal place
		 */
		int temp1 = (int) (random_number_2 * 100);	   
		random_number_2 = (double) temp1 / 100; 

		/**
		 * Converting the value in m to cm
		 */
		temp = (int) (random_number_2 * 100);

		/**
		 * Storing the values of n1 and n2 in HashMap 
		 */
		result.put("n1_unit1", Integer.toString(random_number_1).concat(" cm"));
		result.put("n2_unit2", Double.toString(random_number_2).concat(" m"));

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {
			if(random_number_1 > temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" cm"));
			} else if(random_number_1 == temp) {
				result.put("answer", "Neither, they are equal");	
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" m"));
			}
		} else if(comparison_value == "less") {
			if(random_number_1 < temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" cm"));
			} else if(random_number_1 == temp){
				result.put("answer", "Neither, they are equal");
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" m"));
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(Integer.toString(random_number_1).concat(" cm"));
			mcq_option.add(Double.toString(random_number_2).concat(" m"));
			mcq_option.add("Neither, they are equal");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with comparison value, first number, second number, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_comparing_metric_units_of_length_m_and_km()
			 @description Gets the problem set data identifying which number is more / less than the other 
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (comparison value, first number, second number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparing_metric_units_of_length_m_and_km(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int random_number_1, temp;
		double random_number_2;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing comparison value in the HashMap 
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Generating values for first and second random number
		 */	    
		random_number_1 = 10 * mg_giveRandomInteger(10, 1000, random);
		random_number_2 = mg_giveRandomDouble(0.10, 10.00, random);

		/** 
		 * Limiting the double value to 2 decimal place
		 */
		int temp1 = (int) (random_number_2 * 100);	   
		random_number_2 = (double) temp1 / 100; 

		/**
		 * Converting the value in km to m
		 */
		temp = (int) (random_number_2 * 1000);

		/**
		 * Storing the values of n1 and n2 in HashMap 
		 */
		result.put("n1_unit1", Integer.toString(random_number_1).concat(" m"));
		result.put("n2_unit2", Double.toString(random_number_2).concat(" km"));

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {
			if(random_number_1 > temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" m"));
			} else if(random_number_1 == temp) {
				result.put("answer", "Neither, they are equal");
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" km"));
			}
		} else {
			if(random_number_1 < temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" m"));
			} else if(random_number_1 == temp){
				result.put("answer", "Neither, they are equal");
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" km"));
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(Integer.toString(random_number_1).concat(" m"));
			mcq_option.add(Double.toString(random_number_2).concat(" km"));
			mcq_option.add("Neither, they are equal");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with comparison value, first number, second number, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_comparing_metric_units_of_length_cm_and_km()
			 @description Gets the problem set data identifying which number is more / less than the other 
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (comparison value, first number, second number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparing_metric_units_of_length_cm_and_km(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int random_number_1, temp;
		double random_number_2;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing comparison value in the HashMap 
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Generating values for first and second random number
		 */	    
		random_number_1 = 100 * mg_giveRandomInteger(100, 10000, random);
		random_number_2 = mg_giveRandomDouble(0.100, 10.000, random);

		/** 
		 * Limiting the double value to 3 decimal place
		 */
		int temp1 = (int) (random_number_2 * 1000);	   
		random_number_2 = (double) temp1 / 1000; 

		/**
		 * Converting the value in km to cm
		 */
		temp = (int) (random_number_2 * 100000);

		/**
		 * Storing the values of n1 and n2 in HashMap 
		 */
		result.put("n1_unit1", Integer.toString(random_number_1).concat(" cm"));
		result.put("n2_unit2", Double.toString(random_number_2).concat(" km"));

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {
			if(random_number_1 > temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" cm"));
			} else if(random_number_1 == temp) {
				result.put("answer", "Neither, they are equal");	
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" km"));
			}
		} else {
			if(random_number_1 < temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" cm"));
			} else if(random_number_1 == temp){
				result.put("answer", "Neither, they are equal");
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" km"));
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(Integer.toString(random_number_1).concat(" cm"));
			mcq_option.add(Double.toString(random_number_2).concat(" km"));
			mcq_option.add("Neither, they are equal");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with comparison value, first number, second number, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_comparing_metric_units_of_mass_gm_and_kg()
			 @description Gets the problem set data identifying which number is more / less than the other 
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (comparison value, first number, second number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparing_metric_units_of_mass_gm_and_kg(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int random_number_1, temp;
		double random_number_2;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of comparison values
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing comparison value in the HashMap 
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Generating values for first and second random number
		 */	    
		random_number_1 = 10 * mg_giveRandomInteger(1, 1000, random);
		random_number_2 = mg_giveRandomDouble(0.01, 10.00, random);

		/** 
		 * Limiting the double value to 2 decimal place
		 */
		int temp1 = (int) (random_number_2 * 100);	   
		random_number_2 = (double) temp1 / 100; 

		/**
		 * Converting the value in kg to gm
		 */
		temp = (int) (random_number_2 * 1000);

		/**
		 * Storing the values of n1 and n2 in HashMap 
		 */
		result.put("n1_unit1", Integer.toString(random_number_1).concat(" gm"));
		result.put("n2_unit2", Double.toString(random_number_2).concat(" kg"));

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {
			if(random_number_1 > temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" gm"));
			} else if(random_number_1 == temp) {
				result.put("answer", "Neither, they are equal");	
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" kg"));
			}
		} else {
			if(random_number_1 < temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" gm"));
			} else if(random_number_1 == temp){
				result.put("answer", "Neither, they are equal");	
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" kg"));
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(Integer.toString(random_number_1).concat(" gm"));
			mcq_option.add(Double.toString(random_number_2).concat(" kg"));
			mcq_option.add("Neither, they are equal");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with comparison value, first number, second number, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_comparing_metric_units_of_volume_ml_and_l()
			 @description Gets the problem set data identifying which number is more / less than the other 
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (comparison value, first number, second number, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_comparing_metric_units_of_volume_ml_and_l(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int random_number_1, temp;
		double random_number_2;
		String comparison_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array for comparison values
		 */
		String[] comparison_array = {"more", "less"};

		/**
		 * Generating a random number for selecting a random value 
		 */
		int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);

		/**
		 * Selecting a comparison value
		 */
		comparison_value = comparison_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing comparison value in the HashMap 
		 */
		result.put("comparison_value", comparison_value);

		/**
		 * Generating values for first and second random number
		 */	    
		random_number_1 = 10 * mg_giveRandomInteger(1, 1000, random);
		random_number_2 = mg_giveRandomDouble(0.01, 10.00, random);

		/** 
		 * Limiting the double value to 2 decimal place
		 */
		int temp1 = (int) (random_number_2 * 100);	   
		random_number_2 = (double) temp1 / 100; 

		/**
		 * Converting the value in l to ml
		 */
		temp = (int) (random_number_2 * 1000);

		/**
		 * Storing the values of n1 and n2 in HashMap 
		 */
		result.put("n1_unit1", Integer.toString(random_number_1).concat(" ml"));
		result.put("n2_unit2", Double.toString(random_number_2).concat(" l"));

		/**
		 * Getting the answer based on comparison value
		 */
		if(comparison_value == "more") {
			if(random_number_1 > temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" ml"));
			} else if(random_number_1 == temp) {
				result.put("answer", "Neither, they are equal");	
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" l"));
			}
		} else {
			if(random_number_1 < temp) {
				result.put("answer", Integer.toString(random_number_1).concat(" ml"));
			} else if(random_number_1 == temp){
				result.put("answer", "Neither, they are equal");
			} else {
				result.put("answer", Double.toString(random_number_2).concat(" l"));
			}
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add(Integer.toString(random_number_1).concat(" ml"));
			mcq_option.add(Double.toString(random_number_2).concat(" l"));
			mcq_option.add("Neither, they are equal");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with comparison value, first number, second number, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_mm_and_cm_without_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param multiplication_factor - int - contains the value that needs to be multiplied with n1 to get the value of n2.
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param unit1_value - String - unit of the random number
			 @param unit2_value - String - unit of the answer
			 @param rand1_flag - boolean - if true, returns the value of rand1, else does not return
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(int multiplication_factor, int level, String unit1_value, String unit2_value, boolean rand1_flag, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;
		String unit1, unit2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Values of unit1 and unit2
		 */
		unit1 = unit1_value;
		unit2 = unit2_value;

		/**
		 * Generating a random number of n1	    
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
		} else {
			n1 = mg_giveRandomInteger(10, 100, random);
		}

		/**
		 * Obtaining the value of n2 from n1
		 */
		n2 = multiplication_factor * n1;

		/**
		 * Generating a random number for randomly selecting a input field
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		/**
		 * Returning the value of rand1, if rand1_flag is set to true
		 */
		if(rand1_flag == true) {
			result.put("rand1", rand1);
		}

		if(rand1 == 0) {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number1", n1);
			answer = n2;
			result.put("number2", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit1);
			result.put("unit2", unit2);

		} else {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number2", n2);
			answer = n1;
			result.put("number1", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit1);
			result.put("unit2", unit2);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the HashMap
			 */
			mcq_option.add(answer);

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(level == 1) {
				if(rand1 == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(1, 10).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,10 * u) && mcq_option.size() < 4) {
							mcq_option.add(10 * u);
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					if((answer - 5) <= 1) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = answer - 5;
					}

					if((answer + 5) >= 10) {
						mcq_upper_limit = 10;
					} else {
						mcq_upper_limit = answer + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
							mcq_option.add(u);
						}
					}
				}
			} else {
				if(rand1 == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(10, 1000).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,10 * u) && mcq_option.size() < 4) {
							mcq_option.add(10 * u);
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					if((answer - 5) <= 10) {
						mcq_lower_limit = 10;
					} else {
						mcq_lower_limit = answer - 5;
					}

					if((answer + 5) >= 100) {
						mcq_upper_limit = 100;
					} else {
						mcq_upper_limit = answer + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
							mcq_option.add(u);
						}
					}
				}
			}	

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_cm_and_m_without_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_cm_and_m_without_decimal(int level, boolean mcq) {

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(100, level, "m", "cm", true, false);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add((int)result.get("answer"));

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options  
			 */
			int mcq_lower_limit, mcq_upper_limit;
			int temp = (int)result.get("answer");
			if(level == 1) {
				if((int)result.get("rand1") == 0) {
					if((temp - 5) <= 100) {
						mcq_lower_limit = 100;      	
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 1000) {
						mcq_upper_limit = 1000;
					} else {
						mcq_upper_limit = temp + 5;
					}
				} else {
					if((temp - 5) <= 1) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 10) {
						mcq_upper_limit = 10;
					} else {
						mcq_upper_limit = temp + 5;
					}
				}
			} else {
				if((int)result.get("rand1") == 0) {
					if((temp - 5) <= 1000) {
						mcq_lower_limit = 1000;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 10000) {
						mcq_upper_limit = 10000;
					} else {
						mcq_upper_limit = temp + 5;
					}
				} else {
					if((temp - 5) <= 10) {
						mcq_lower_limit = 10;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 100) {
						mcq_upper_limit = 100;         	
					} else {
						mcq_upper_limit = temp + 5;
					}
				}
			}	

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 mcq options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		result.remove("rand1");

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_m_and_km_without_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_m_and_km_without_decimal(int level, boolean mcq) {

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(1000, level, "km", "m", true, false);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add((int)result.get("answer"));

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options  
			 */
			int mcq_lower_limit, mcq_upper_limit;
			int temp = (int)result.get("answer");
			if(level == 1) {
				if((int)result.get("rand1") == 0) {
					if((temp - 5) <= 1000) {
						mcq_lower_limit = 1000;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 10000) {
						mcq_upper_limit = 10000;
					} else {
						mcq_upper_limit = temp + 5;
					}
				} else {
					if((temp - 5) <= 1) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 10) {
						mcq_upper_limit = 10;
					} else {
						mcq_upper_limit = temp + 5;
					}
				}
			} else {
				if((int)result.get("rand1") == 0) {
					if((temp - 5) <= 10000) {
						mcq_lower_limit = 10000;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 100000) {
						mcq_upper_limit = 100000;
					} else {
						mcq_upper_limit = temp + 5;
					}
				} else {
					if((temp - 5) <= 10) {
						mcq_lower_limit = 10;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 100) {
						mcq_upper_limit = 100; 	
					} else {
						mcq_upper_limit = temp + 5;
					}
				}
			}	

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 mcq options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		result.remove("rand1");

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_cm_and_km_without_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_cm_and_km_without_decimal(boolean mcq) {

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(100000, 1, "km", "cm", true, false);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add((int)result.get("answer"));

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options  
			 */
			int mcq_lower_limit, mcq_upper_limit;
			int temp = (int)result.get("answer");
			if((int)result.get("rand1") == 0) {
				if((temp - 5) <= 100000) {
					mcq_lower_limit = 100000;	
				} else {
					mcq_lower_limit = temp - 5;
				}

				if((temp + 5) >= 1000000) {
					mcq_upper_limit = 1000000;
				} else {
					mcq_upper_limit = temp + 5;
				}
			} else {
				if((temp - 5) <= 1) {
					mcq_lower_limit = 1; 	
				} else {
					mcq_lower_limit = temp - 5;
				}

				if((temp + 5) >= 10) {
					mcq_upper_limit = 10;         	
				} else {
					mcq_upper_limit = temp + 5;
				}
			}								

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 mcq options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		result.remove("rand1");

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_g_and_kg_without_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_g_and_kg_without_decimal(int level, boolean mcq) {

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(1000, level, "kg", "g", true, false);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add((int)result.get("answer"));

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(level == 1) {
				if((int)result.get("rand1") == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(1, 10).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,1000 * u) && mcq_option.size() < 4) {
							mcq_option.add(1000 * u);
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = (int)result.get("answer");
					if((temp - 5) <= 1) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 10) {
						mcq_upper_limit = 10;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
							mcq_option.add(u);
						}
					}
				}
			} else {
				if((int)result.get("rand1") == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(10, 100).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,1000 * u) && mcq_option.size() < 4) {
							mcq_option.add(1000 * u);
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = (int)result.get("answer");
					if((temp - 5) <= 10) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 100) {
						mcq_upper_limit = 10;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
							mcq_option.add(u);
						}
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		result.remove("rand1");

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_ml_and_l_without_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_ml_and_l_without_decimal(int level, boolean mcq) {

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = mg_get_measurement_converting_between_units_mm_and_cm_without_decimal(1000, level, "l", "ml", true, false);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add((int)result.get("answer"));

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(level == 1) {
				if((int)result.get("rand1") == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(1, 10).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,1000 * u) && mcq_option.size() < 4) {
							mcq_option.add(1000 * u);
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = (int)result.get("answer");
					if((temp - 5) <= 1) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 10) {
						mcq_upper_limit = 10;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
							mcq_option.add(u);
						}
					}
				}
			} else {
				if((int)result.get("rand1") == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(10, 100).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,1000 * u) && mcq_option.size() < 4) {
							mcq_option.add(1000 * u);
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = (int)result.get("answer");
					if((temp - 5) <= 10) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 100) {
						mcq_upper_limit = 10;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
							mcq_option.add(u);
						}
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		result.remove("rand1");

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_mm_and_cm_with_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_mm_and_cm_with_decimal(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		double n2;
		String answer, unit1, unit2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Values of unit1 and unit2
		 */
		unit1 = "mm";
		unit2 = "cm";

		/**
		 * Generating a random number for n1	    
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 100, random);
		} else {
			n1 = mg_giveRandomInteger(100, 1000, random);
		}

		/**
		 * Obtaining the vaue of n2 from n1
		 */
		n2 = (double) n1 / 10;

		/**
		 * Generating a random number for randomly selecting a input field
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(rand1 == 0) {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number1", n1);
			answer = Double.toString(n2);
			result.put("number2", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit1);
			result.put("unit2", unit2);
		} else {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number2", n2);
			answer = Integer.toString(n1);
			result.put("number1", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit2);
			result.put("unit2", unit1);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(level == 1) {
				if(rand1 == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(1, 100).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Double.toString((double)u/10)) && mcq_option.size() < 4) {
							mcq_option.add(Double.toString((double)u/10));
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = Integer.parseInt(answer);

					if((temp - 5) <= 1) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 100) {
						mcq_upper_limit = 100;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
							mcq_option.add(Integer.toString(u));
						}
					}
				}
			} else {
				if(rand1 == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(100, 1000).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Double.toString((double)u / 10)) && mcq_option.size() < 4) {
							mcq_option.add(Double.toString((double)u / 10));
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = Integer.parseInt(answer);

					if((temp - 5) <= 100) {
						mcq_lower_limit = 100;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 1000) {
						mcq_upper_limit = 1000;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
							mcq_option.add(Integer.toString(u));
						}
					}
				}
			}	

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_cm_and_m_with_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_cm_and_m_with_decimal(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		double n2;
		String answer, unit1, unit2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Values of unit1 and unit2
		 */
		unit1 = "cm";
		unit2 = "m";

		/**
		 * Generating a random number for n1	    
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 1000, random);
		} else {
			n1 = mg_giveRandomInteger(1000, 10000, random);
		}

		/**
		 * Obtaining the value of n2 from n1
		 */
		n2 = (double) n1 / 100;

		/**
		 * Generating a random number for randomly selecting a input field
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(rand1 == 0) {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number1", n1);
			answer = Double.toString(n2);
			result.put("number2", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit1);
			result.put("unit2", unit2);
		} else {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number2", n2);
			answer = Integer.toString(n1);
			result.put("number1", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit2);
			result.put("unit2", unit1);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the HashMap
			 */
			mcq_option.add(answer);

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;


			if(level == 1) {
				if(rand1 == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(1, 1000).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Double.toString((double)u/100)) && mcq_option.size() < 4) {
							mcq_option.add(Double.toString((double)u/100));
						}
					}
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = Integer.parseInt(answer);

					if((temp - 5) <= 1) {
						mcq_lower_limit = 1;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 1000) {
						mcq_upper_limit = 1000;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
							mcq_option.add(Integer.toString(u));
						}
					}
				}
			} else {
				if(rand1 == 0) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(1000, 10000).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Double.toString((double)u / 100)) && mcq_option.size() < 4) {
							mcq_option.add(Double.toString((double)u / 100));
						}
					}		
				} else {

					/**
					 * Calculating the lower limit and upper limit for the remaining mcq options  
					 */
					int mcq_lower_limit, mcq_upper_limit;
					int temp = Integer.parseInt(answer);

					if((temp - 5) <= 1000) {
						mcq_lower_limit = 1000;
					} else {
						mcq_lower_limit = temp - 5;
					}

					if((temp + 5) >= 10000) {
						mcq_upper_limit = 10000;
					} else {
						mcq_upper_limit = temp + 5;
					}

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

					/**
					 * Shuffling the data 
					 */ 
					array = mg_shuffleInt(array); 

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					for(int u : array){
						if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
							mcq_option.add(Integer.toString(u));
						}
					}
				}
			}	

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_m_and_km_with_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_m_and_km_with_decimal(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		double n2;
		String answer, unit1, unit2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Values of unit1 and unit2
		 */
		unit1 = "m";
		unit2 = "km";

		/**
		 * Generating a random number for n1	    
		 */
		n1 = 10 * mg_giveRandomInteger(10, 1000, random);

		/**
		 * Obtaining the value of n2 from n1
		 */
		n2 = (double) n1 / 1000;

		/**
		 * Generating a random number for randomly selecting a input field
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(rand1 == 0) {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number1", n1);
			answer = Double.toString(n2);
			result.put("number2", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit1);
			result.put("unit2", unit2);
		} else {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number2", n2);
			answer = Integer.toString(n1);
			result.put("number1", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit2);
			result.put("unit2", unit1);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(rand1 == 0) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(100, 10000).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Double.toString((double)u/1000)) && mcq_option.size() < 4) {
						mcq_option.add(Double.toString((double)u/1000));
					}
				}	
			} else {

				/**
				 * Calculating the lower limit and upper limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;
				int temp = Integer.parseInt(answer);

				if((temp - 5) <= 100) {
					mcq_lower_limit = 100;
				} else {
					mcq_lower_limit = temp - 5;
				}

				if((temp + 5) >= 10000) {
					mcq_upper_limit = 10000;     	
				} else {
					mcq_upper_limit = temp + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
						mcq_option.add(Integer.toString(u));
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_cm_and_km_with_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_cm_and_km_with_decimal(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		double n2;
		String answer, unit1, unit2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Values of unit1 and unit2
		 */
		unit1 = "cm";
		unit2 = "km";

		/**
		 * Generating a random number for n1	    
		 */
		n1 = 100 * mg_giveRandomInteger(100, 10000, random);

		/**
		 * Obtaining the value of n2 from n1
		 */
		n2 = (double) n1 / 1000;

		/**
		 * Generating a random number for randomly selecting a input field
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(rand1 == 0) {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number1", n1);
			answer = Double.toString(n2);
			result.put("number2", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit1);
			result.put("unit2", unit2);
		} else {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number2", n2);
			answer = Integer.toString(n1);
			result.put("number1", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit2);
			result.put("unit2", unit1);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(rand1 == 0) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(10000, 1000000).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Double.toString((double)u/1000)) && mcq_option.size() < 4) {
						mcq_option.add(Double.toString((double)u/1000));
					}
				}
			} else {

				/**
				 * Calculating the lower limit and upper limit for the remaining mcq options  
				 */
				int mcq_lower_limit, mcq_upper_limit;
				int temp = Integer.parseInt(answer);

				if((temp - 5) <= 10000) {
					mcq_lower_limit = 10000;
				} else {
					mcq_lower_limit = temp - 5;
				}

				if((temp + 5) >= 1000000) {
					mcq_upper_limit = 1000000;
				} else {
					mcq_upper_limit = temp + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
						mcq_option.add(Integer.toString(u));
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_g_and_kg_with_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param unit1_value - String - unit of the random number
			 @param unit2_value - String - unit of the answer
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_g_and_kg_with_decimal(String unit1_value, String unit2_value, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;
		double n2;
		String answer, unit1, unit2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Values of unit1 and unit2
		 */
		unit1 = unit1_value;
		unit2 = unit2_value;

		/**
		 * Generating a random number for n1	    
		 */
		n1 = 10 * mg_giveRandomInteger(1, 1000, random);

		/**
		 * Obtaining the value of n2 from n1
		 */
		n2 = (double) n1 / 1000;

		/**
		 * Generating a random number for randomly selecting a input field
		 */
		int rand1 = mg_giveRandomInteger(0, 1, random);

		if(rand1 == 0) {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number1", n1);
			answer = Double.toString(n2);
			result.put("number2", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit1);
			result.put("unit2", unit2);
		} else {

			/**
			 * Storing the values of n, answer, unit1, and unit2 in the HashMap 
			 */
			result.put("number", n2);
			answer = Integer.toString(n1);
			result.put("number1", "::blank::");
			result.put("answer", answer);
			result.put("unit1", unit2);
			result.put("unit2", unit1);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(rand1 == 0) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(10, 1000).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Double.toString((double)u/1000)) && mcq_option.size() < 4) {
						mcq_option.add(Double.toString((double)u/1000));
					}
				}	
			} else {

				/**
				 * Calculating the lower limit and upper limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;
				int temp = Integer.parseInt(answer);

				if((temp - 5) <= 10) {
					mcq_lower_limit = 10;
				} else {
					mcq_lower_limit = temp - 5;
				}

				if((temp + 5) >= 10000) {
					mcq_upper_limit = 10000;
				} else {
					mcq_upper_limit = temp + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
						mcq_option.add(Integer.toString(u));
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}  

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_units_ml_and_l_with_decimal()
			 @description Gets the problem set data containing the value of a number when converted from one unit to another unit 
			 @param unit1_value - String - unit of the random number
			 @param unit2_value - String - unit of the answer
			 @param rand1_flag - boolean - if true, returns the value of rand1, else does not return
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (random number, first unit, answer, second unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_units_ml_and_l_with_decimal(boolean mcq) {

		Map<String, Object> result = mg_get_measurement_converting_between_units_g_and_kg_with_decimal("ml", "l", mcq);

		/**
		 * Return the HashMap with random number, first unit, answer, second unit, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_complete_the_conversion_table_for_converting_between_units()
			 @description Gets the problem set data containing the value of numbers when converted from one unit to another unit in a table                         
			 @return HashMap (ArrayList of unit of measure, first unit, ArrayList of second unit measure, second unit, ArrayList of answers)
	 */
	public static Map<String, Object> mg_get_measurement_complete_the_conversion_table_for_converting_between_units() {

		/**
		 * Declaring the variables
		 */
		String unit1 = null, unit2 = null;
		int count = 5;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating ArrayList for checking uniqueness of values(unit_of_measure1), first unit of measure (a1), second unit of measure(a2), and answer. 
		 */
		ArrayList<String> unit_of_measure1 = new ArrayList<>();
		ArrayList<String> a1 = new ArrayList<>();
		ArrayList<String> a2 = new ArrayList<>();
		ArrayList<String> answer = new ArrayList<>();

		int rand3 = mg_giveRandomInteger(0, 3, random); 

		if(mg_giveRandomInteger(0, 1, random) == 0) {  		/** if 0, then table is for with decimals type of problems */
			double rand1 = 0;								/** stores the values for m */
			int rand2 = 0;									/** stores the values for cm */

			for(int i=1; i<=count; i++) {
				if(rand3 == 0) {
					unit1 = "m";
					unit2 = "cm";
					do{
						/**
						 * Generating a random number for values in m row 
						 */
						rand1 = mg_giveRandomDouble(0.01, 10.00, random);

						/** 
						 * Limiting the number in rand1 to 2 decimal places
						 */
						DecimalFormat df = new DecimalFormat("#.##");	
						df.setRoundingMode(RoundingMode.FLOOR);
						rand1 = new Double(df.format(rand1));
					} while(mg_containsInArray(unit_of_measure1, Double.toString(rand1)));

					/**
					 * Generating a random number for values in cm row 
					 */
					rand2 = (int) (rand1 * 100);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Double.toString(rand1));
				} else if(rand3 == 1) {
					int rand4 = mg_giveRandomInteger(0, 1, random);

					if(rand4 == 0) {
						unit1 = "kg";
						unit2 = "g";
					} else {
						unit1 = "l";
						unit2 = "ml";
					}

					do{

						/**
						 * Generating a random number for values in kg or l row 
						 */
						rand1 = mg_giveRandomDouble(0.01, 10.00, random);

						/** 
						 * Limiting the number in rand1 to 3 decimal places
						 */
						DecimalFormat df = new DecimalFormat("#.###");  
						df.setRoundingMode(RoundingMode.FLOOR);
						rand1 = new Double(df.format(rand1));
					} while(mg_containsInArray(unit_of_measure1, Double.toString(rand1)));

					/**
					 * Generating a random number for values in g or ml row 
					 */
					rand2 = (int) (rand1 * 1000);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Double.toString(rand1));
				} else if(rand3 == 2) {
					unit1 = "cm";
					unit1 = "mm";
					do{

						/**
						 * Generating a random number for values in mm row 
						 */
						rand1 =  mg_giveRandomDouble(0.1, 10.0, random);

						/**
						 * Limiting the number in rand1 to 1 decimal digit
						 */
						DecimalFormat df = new DecimalFormat("#.#");		
						df.setRoundingMode(RoundingMode.FLOOR);
						rand1 = new Double(df.format(rand1));
					} while(mg_containsInArray(unit_of_measure1, Double.toString(rand1)));

					/**
					 * Generating a random number for values in cm row 
					 */
					rand2 = (int) (rand1 * 10);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Double.toString(rand1));
				} else {
					unit1 = "km";
					unit1 = "m";
					do{

						/**
						 * Generating a random number for values in km row 
						 */
						rand1 = mg_giveRandomDouble(0.1, 10.0, random);

						/**
						 * Limiting the number in rand1 to 3 decimal digit
						 */
						DecimalFormat df = new DecimalFormat("#.###");
						df.setRoundingMode(RoundingMode.FLOOR);
						rand1 = new Double(df.format(rand1));
					}while(mg_containsInArray(unit_of_measure1, Double.toString(rand1)));

					/**
					 * Generating a random number for values in m row 
					 */
					rand2 = (int) (rand1 * 1000);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Double.toString(rand1));
				}

				/**
				 * Randomly placing an input field at first or second row of the table 
				 */
				if(mg_giveRandomInteger(0, 1, random) == 0) {			/** if 0, then first row of the table will have an input field */
					a1.add("::blank::");
					a2.add(Integer.toString(rand2));
					answer.add(Double.toString(rand1));
				} else {											/** if 1, then second row of the table will have an input field */
					a1.add(Double.toString(rand1));
					a2.add("::blank::");
					answer.add(Integer.toString(rand2));
				}
			}
		} else {										/** table for without decimals type of problems */
			int rand1 = 0, rand2 = 0;
			for(int i=1; i<=count; i++) {
				if(rand3 == 0) {
					unit1 = "m";
					unit1 = "cm";
					do{

						/**
						 * Generating a random number for values in m row 
						 */
						rand1 = mg_giveRandomInteger(1, 10, random);
					}while(mg_containsInArray(unit_of_measure1, Integer.toString(rand1)));

					/**
					 * Generating a random number for values in cm row 
					 */
					rand2 = (int) (rand1 * 100);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Integer.toString(rand1));
				} else if(rand3 == 1) {
					int rand4 = mg_giveRandomInteger(0, 1, random);

					if(rand4 == 0) {
						unit1 = "kg";
						unit2 = "g";
					} else {
						unit1 = "l";
						unit2 = "ml";
					}

					do{

						/**
						 * Generating a random number for values in kg or l row 
						 */
						rand1 = mg_giveRandomInteger(1, 10, random);
					}while(mg_containsInArray(unit_of_measure1, Integer.toString(rand1)));

					/**
					 * Generating a random number for values in g or ml row 
					 */
					rand2 = (int) (rand1 * 1000);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Integer.toString(rand1));
				} else if(rand3 == 2) {
					unit1 = "cm";
					unit2 = "mm";

					do{

						/**
						 * Generating a random number for values in cm row 
						 */
						rand1 =  mg_giveRandomInteger(1, 10, random);
					}while(mg_containsInArray(unit_of_measure1, Integer.toString(rand1)));

					/**
					 * Generating a random number for values in mm row 
					 */
					rand2 = (int) (rand1 * 10);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Integer.toString(rand1));
				} else {
					unit1 = "km";
					unit2 = "m";

					do{

						/**
						 * Generating a random number for values in cm row 
						 */
						rand1 = mg_giveRandomInteger(1, 10, random);
					}while(mg_containsInArray(unit_of_measure1, Integer.toString(rand1)));

					/**
					 * Generating a random number for values in mm row 
					 */
					rand2 = (int) (rand1 * 1000);

					/**
					 * Storing the values of first random number in ArrayList
					 */
					unit_of_measure1.add(Integer.toString(rand1));
				}

				/**
				 * Randomly placing an input field at first or second row of the table 
				 */
				if(mg_giveRandomInteger(0, 1, random) == 0) {			     /** if 0, then first row of the table will have an input field */
					a1.add("::blank::");
					a2.add(Integer.toString(rand2));
					answer.add(Integer.toString(rand1));
				} else {											     /** if 1, then first row of the table will have an input field */
					a1.add(Integer.toString(rand1));
					a2.add("::blank::");
					answer.add(Integer.toString(rand2));
				}
			}
		}

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Returning values to the HashMap
		 */
		result.put("table_row1", a1);
		result.put("table_row2", a2);
		result.put("answer", answer);
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		/**
		 * Return the HashMap with ArrayList of unit of measure, first unit, ArrayList of second unit measure, second unit, ArrayList of answers
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_mixed_units_mm_and_cm()
			 @description Gets the problem set data containing the value of a number when converted from mixed units such as mm and cm 
			 @param level - int - Chooses a level. Values are 1, 2 or 3.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of remaining mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_mixed_units_mm_and_cm(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0;
		double answer;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = "cm";
		unit2 = "mm";

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 100, random);
		} else {
			n1 = mg_giveRandomInteger(10, 100, random);
			n2 = mg_giveRandomInteger(1, 100, random);
		}

		/**
		 * Generating a random number for getting the answer in terms of mm and cm
		 */
		int temp = mg_giveRandomInteger(0, 1, random);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, unit1, unit2
		 */
		result.put("number1", Integer.toString(n1));
		result.put("number2", Integer.toString(n2));
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		if(temp == 0) {                             	   /** finding the equivalent value in mm for the given numbers in mixed units */

			/**
			 * Calculating the answer
			 */
			answer = (n1 * 10) + n2;
			int temp3 = (int) answer;

			/**
			 * Storing the values of answer and its unit in the HashMap
			 */
			result.put("answer", Integer.toString(temp3));
			result.put("unit3", "mm");

		} else {											/** finding the equivalent value in cm for the given numbers in mixed units */
			double temp4 = (double)n2 / 10; 
			double temp5 = (double) n1;

			/**
			 * Calculating the answer
			 */
			answer = temp5 + temp4;

			/**
			 * Limiting the number in temp1 to 1 decimal place
			 */
			DecimalFormat df = new DecimalFormat("#.#");	
			df.setRoundingMode(RoundingMode.FLOOR);
			answer = new Double(df.format(answer));

			/**
			 * Storing the answer and its unit in the HashMap
			 */
			result.put("answer", Double.toString(answer));
			result.put("unit3", "cm");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(temp == 0) {                             /** Calculating the remaining mcq options if the answer is in mm */    
				int temp2 = (int)answer;

				/**
				 * Storing the value of answer in the HashMap
				 */
				mcq_option.add(Integer.toString(temp2));

				/**
				 * Calculating the lower limit and upper limit for the remaining mcq options  
				 */
				if(level == 1) {
					if((temp2 - 5) <= 11) {
						mcq_lower_limit = 11;	
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 110) {
						mcq_upper_limit = 110;	         	
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				} else if(level == 2) {
					if((temp2 - 5) <= 11) {
						mcq_lower_limit = 11;
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 200) {
						mcq_upper_limit = 200;       	
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				} else {	
					if((temp2 - 5) <= 101) {
						mcq_lower_limit = 101;
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 1100) {
						mcq_upper_limit = 1100;
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
						mcq_option.add(Integer.toString(u));
					}
				}
			} else {									/** Calculating the remaining mcq options if the answer is in cm */

				/**
				 * Storing the value of answer in the ArrayList
				 */
				mcq_option.add(Double.toString(answer));

				/**
				 * Calculating the remaining the lower limit and upper limit for the remaining mcq options
				 */
				if(level == 1) {
					if(((int)(answer * 10)) - 5 <= 11) {
						mcq_lower_limit = 11;
					} else {
						mcq_lower_limit = (int)(answer * 10) - 5;
					}

					if(((int)(answer * 10)) + 5 >= 110) {
						mcq_upper_limit = 110;
					} else {
						mcq_upper_limit = (int)(answer * 10) + 5;
					}
				} else if(level == 2) {
					if(((int)(answer * 10)) - 5 <= 11) {
						mcq_lower_limit = 11;
					} else {
						mcq_lower_limit = (int)(answer * 10) - 5;
					}

					if(((int)(answer * 10)) + 5 >= 200) {
						mcq_upper_limit = 200;
					} else {
						mcq_upper_limit = (int)(answer * 10) + 5;
					}
				} else {
					if(((int)(answer * 10)) - 5 <= 101) {
						mcq_lower_limit = 101;
					} else {
						mcq_lower_limit = (int)(answer * 10) - 5;
					}

					if(((int)(answer * 10)) + 5 >= 1100) {
						mcq_upper_limit = 1100;
					} else {
						mcq_upper_limit = (int)(answer * 10) + 5;
					}
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Comparing every value in array to the answer
				 */
				for(int u : array) {

					/**
					 * Converting every value in array in terms of mm
					 */
					double temp1 = (double)u / 10;

					/** 
					 * Limiting the number in temp1 to 1 decimal place
					 */
					DecimalFormat df = new DecimalFormat("#.#");	
					df.setRoundingMode(RoundingMode.FLOOR);
					temp1 = new Double(df.format(temp1));

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					if(!mg_containsInArray(mcq_option,Double.toString(temp1)) && mcq_option.size() < 4) {
						mcq_option.add(Double.toString(temp1));
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_mixed_units_cm_and_m()
			 @description Gets the problem set data containing the value of a number when converted from mixed units such as cm and m 
			 @param level - int - Chooses a level. Values are 1, 2 or 3.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of remaining mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_mixed_units_cm_and_m(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0;
		double answer;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = "m";
		unit2 = "cm";

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 100, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(100, 1000, random);
		} else {
			n1 = mg_giveRandomInteger(10, 100, random);
			n2 = mg_giveRandomInteger(100, 1000, random);
		}

		/**
		 * Generating a random number for getting the answer in terms of cm and m
		 */
		int temp = mg_giveRandomInteger(0, 1, random);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, unit1, unit2
		 */
		result.put("number1", Integer.toString(n1));
		result.put("number2", Integer.toString(n2));
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		if(temp == 0) {                               		/** finding the equivalent value in cm for the given numbers in mixed units */

			/**
			 * Calculating the answer
			 */
			answer = (n1 * 100) + n2;
			int temp3 = (int) answer;

			/**
			 * Storing the value of answer and its answer in the HashMap 
			 */
			result.put("answer", Integer.toString(temp3));
			result.put("unit3", "cm");

		} else {											/** finding the equivalent value in m for the given numbers in mixed units */
			double temp4 = (double)n2 / 100; 
			double temp5 = (double) n1;

			/**
			 * Calculating the answer
			 */
			answer = temp5 + temp4;

			/**
			 * Limiting the number in temp1 to 2 decimal places
			 */
			DecimalFormat df = new DecimalFormat("#.##");	
			df.setRoundingMode(RoundingMode.FLOOR);
			answer = new Double(df.format(answer));

			/**
			 * Storing the value of answer and its unit in the HashMap
			 */
			result.put("answer", Double.toString(answer));
			result.put("unit3", "m");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			if(temp == 0) {  
				int temp2 = (int)answer;

				/**
				 * Storing the value of answer in the ArrayList
				 */
				mcq_option.add(Integer.toString(temp2));

				/**
				 * Calculating the lower limit and upper limit for the remaining mcq options 
				 */
				if(level == 1) {
					if((temp2 - 5) <= 101) {
						mcq_lower_limit = 101;	
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 1100) {
						mcq_upper_limit = 1100;			         	
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				} else if(level == 2) {
					if((temp2 - 5) <= 200) {
						mcq_lower_limit = 200;
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 2000) {
						mcq_upper_limit = 2000;			         	
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				} else {
					if((temp2 - 5) <= 1100) {
						mcq_lower_limit = 1100;
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 11000) {
						mcq_upper_limit = 11000;
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
						mcq_option.add(Integer.toString(u));
					}
				}

			} else {	

				/**
				 * Storing the value of answer in the ArrayList
				 */
				mcq_option.add(Double.toString(answer));

				/**
				 * Calculating upper limit and lower limit for the remaining mcq options
				 */
				if(level == 1) {
					if(((int)(answer * 100)) - 5 <= 101) {
						mcq_lower_limit = 101;
					} else {
						mcq_lower_limit = (int)(answer * 100) - 5;
					}

					if(((int)(answer * 100)) + 5 >= 1100) {
						mcq_upper_limit = 1100;
					} else {
						mcq_upper_limit = (int)(answer * 100) + 5;
					}
				} else if(level == 2) {
					if(((int)(answer * 100)) - 5 <= 200) {
						mcq_lower_limit = 200;
					} else {
						mcq_lower_limit = (int)(answer * 100) - 5;
					}

					if(((int)(answer * 100)) + 5 >= 2000) {
						mcq_upper_limit = 2000;
					} else {
						mcq_upper_limit = (int)(answer * 100) + 5;
					}	
				} else {
					if(((int)(answer * 100)) - 5 <= 1100) {
						mcq_lower_limit = 1100;
					} else {
						mcq_lower_limit = (int)(answer * 100) - 5;
					}

					if(((int)(answer * 100)) + 5 >= 11000) {
						mcq_upper_limit = 11000;
					} else {
						mcq_upper_limit = (int)(answer * 100) + 5;
					}
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Comparing every value in array to the answer
				 */
				for(int u : array) {

					/**
					 * Converting every value in array in terms of m
					 */
					double temp1 = (double)u / 100;

					/** 
					 * Limiting the number in temp1 to 2 decimal places
					 */
					DecimalFormat df = new DecimalFormat("#.##");	
					df.setRoundingMode(RoundingMode.FLOOR);
					temp1 = new Double(df.format(temp1));

					/**
					 * Ensuring that no 2 mcq options are the same
					 */
					if(!mg_containsInArray(mcq_option,Double.toString(temp1)) && mcq_option.size() < 4) {
						mcq_option.add(Double.toString(temp1));
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_mixed_units_m_and_km()
			 @description Gets the problem set data containing the value of a number when converted from mixed units such as m and km 
			 @param unit1_value - String - unit of the first random number
			 @param unit2_value - String - unit of the second random number
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of remaining mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_mixed_units_m_and_km(String unit1_value, String unit2_value, int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0;
		double answer;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = unit1_value;
		unit2 = unit2_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1 and n2
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 1000, random);
		} else {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1000, 10000, random);
		} 

		/**
		 * Generating a random number for getting the answer in terms of m and km
		 */
		int temp = mg_giveRandomInteger(0, 1, random);

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, unit1, unit2 in the HashMap
		 */
		result.put("number1", Integer.toString(n1));
		result.put("number2", Integer.toString(n2));
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		if(temp == 0) {                              	/** finding the equivalent value in m for the given numbers in mixed units */

			/**
			 * Calculating the answer
			 */
			answer = (n1 * 1000) + n2;
			int temp3 = (int) answer;

			/**
			 * Storing the values of answer and its unit in the HashMap
			 */
			result.put("answer", Integer.toString(temp3));
			result.put("unit3", unit2_value);
		} else {										/** finding the equivalent value in km for the given numbers in mixed units */

			/**
			 * Converting the value of n2 in m into km 
			 */
			double temp4 = (double)n2 / 1000; 

			/**
			 * Assigning the value of n1 to a double variable
			 */
			double temp5 = (double) n1;

			/**
			 * Calculating the answer
			 */
			answer = temp5 + temp4;

			/** 
			 * Limiting the number in temp1 to 3 decimal places
			 */
			DecimalFormat df = new DecimalFormat("#.###");	/** Limiting the number in temp1 to 3 decimal places */
			df.setRoundingMode(RoundingMode.FLOOR);
			answer = new Double(df.format(answer));

			/**
			 * Storing the values of answer and its unit in the HashMap
			 */
			result.put("answer", Double.toString(answer));
			result.put("unit3", unit1_value);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an array for remaining mcq options within the calculated range  
			 */ 
			int[] array;

			/**
			 * Calculating lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(temp == 0) {                                 
				int temp2 = (int)answer;

				/**
				 * Storing the value of answer in the ArrayList
				 */
				mcq_option.add(Integer.toString(temp2));

				if(level == 1) {
					if((temp2 - 5) <= 1001) {
						mcq_lower_limit = 1001;	
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 11000) {
						mcq_upper_limit = 11000;			         	
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				} else {
					if((temp2 - 5) <= 2000) {
						mcq_lower_limit = 2000;
					} else {
						mcq_lower_limit = temp2 - 5;
					}

					if((temp2 + 5) >= 20000) {
						mcq_upper_limit = 20000;			         	
					} else {
						mcq_upper_limit = temp2 + 5;
					}
				} 

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,Integer.toString(u)) && mcq_option.size() < 4) {
						mcq_option.add(Integer.toString(u));
					}
				}
			} else {

				/**
				 * Storing the value of answer in the ArrayList
				 */
				mcq_option.add(Double.toString(answer));

				/**
				 * Calculating the lower limit and upper limit for the remaining mcq options
				 */
				if(level == 1) {
					if(((int)(answer * 1000)) - 5 <= 1001) {
						mcq_lower_limit = 1001;
					} else {
						mcq_lower_limit = (int)(answer * 1000) - 5;
					}

					if(((int)(answer * 1000)) + 5 >= 11000) {
						mcq_upper_limit = 11000;
					} else {
						mcq_upper_limit = (int)(answer * 1000) + 5;
					}	
				} else if(level == 2) {
					if(((int)(answer * 1000)) - 5 <= 2000) {
						mcq_lower_limit = 2000;
					} else {
						mcq_lower_limit = (int)(answer * 1000) - 5;
					}

					if(((int)(answer * 1000)) + 5 >= 20000) {
						mcq_upper_limit = 20000;
					} else {
						mcq_upper_limit = (int)(answer * 1000) + 5;
					}	
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Comparing every value in array to the answer
				 */
				for(int u : array) {

					/**
					 * Converting every value in array in terms of km
					 */
					double temp1 = (double)u / 1000;

					/** 
					 * Limiting the number in temp1 to 3 decimal places
					 */
					DecimalFormat df = new DecimalFormat("#.###");	
					df.setRoundingMode(RoundingMode.FLOOR);
					temp1 = new Double(df.format(temp1));

					/**
					 * Ensuring that no 2 options are the same
					 */
					if(!mg_containsInArray(mcq_option,Double.toString(temp1)) && mcq_option.size() < 4) {
						mcq_option.add(Double.toString(temp1));
					}
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_mixed_units_g_and_kg()
			 @description Gets the problem set data containing the value of a number when converted from mixed units such as g and kg 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of remaining mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_mixed_units_g_and_kg(int level, boolean mcq) {

		Map<String, Object> result = mg_get_measurement_converting_between_mixed_units_m_and_km("kg", "g", level, mcq);

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of remaining mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_converting_between_mixed_units_ml_and_l()
			 @description Gets the problem set data containing the value of a number when converted from mixed units such as ml and l 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of remaining mcq options)
	 */
	public static Map<String, Object> mg_get_measurement_converting_between_mixed_units_ml_and_l(int level, boolean mcq) {

		Map<String, Object> result = mg_get_measurement_converting_between_mixed_units_m_and_km("l", "ml", level, mcq);

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, answer, unit of the answer, ArrayList of remaining mcq options
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_addition_of_mixed_units_cm_and_mm()
			 @description Gets the problem set data containing the answer, received on addition of two numbers with mixed units such as cm and mm 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of cm, answer in terms of mm, total answer in terms of mm)
	 */
	public static Map<String, Object> mg_get_measurement_addition_of_mixed_units_cm_and_mm(int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, n4 = 0, total_answer_in_mm = 0, answer_in_cm, answer_in_mm;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = "cm";
		unit2 = "mm";

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1, n2, n3, and n4
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 40, random);
			n2 = mg_giveRandomInteger(0, 9, random);
			n3 = mg_giveRandomInteger(1, 40, random);
			n4 = mg_giveRandomInteger(0, 9 - n2, random);
		} else {
			n1 = mg_giveRandomInteger(1, 40, random);
			n2 = mg_giveRandomInteger(1, 9, random);
			n3 = mg_giveRandomInteger(1, 40, random);
			n4 = mg_giveRandomInteger(10 - n2, 9, random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, n4, unit1, unit2
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("number4", n4);
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		/**
		 * Calculating the equivalent value in mm for the given numbers in mixed units
		 */
		total_answer_in_mm = (n1 * 10) + n2 + (n3 * 10) + n4;

		/**
		 * Calculating the equivalent values in terms of cm and mm for the given numbers in mixed units
		 */
		answer_in_cm = total_answer_in_mm / 10;
		answer_in_mm = total_answer_in_mm % 10;

		/**
		 * Returning the values calculated above
		 */
		result.put("answer1", answer_in_cm);  			
		result.put("answer2", answer_in_mm);			
		result.put("answer3", total_answer_in_mm);	

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of cm, answer in terms of mm, total answer in terms of mm
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_addition_of_mixed_units_cm_and_m()
			 @description Gets the problem set data containing the answer, received on addition of two numbers with mixed units such as cm and m 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of m, answer in terms of cm, total answer in terms of cm)
	 */
	public static Map<String, Object> mg_get_measurement_addition_of_mixed_units_cm_and_m(int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, n4 = 0, total_answer_in_cm = 0, answer_in_m, answer_in_cm;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = "m";
		unit2 = "cm";

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1, n2, n3, and n4
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 400, random);
			n2 = mg_giveRandomInteger(0, 99, random);
			n3 = mg_giveRandomInteger(1, 400, random);
			n4 = mg_giveRandomInteger(0, 99 - n2, random);
		} else {
			n1 = mg_giveRandomInteger(1, 400, random);
			n2 = mg_giveRandomInteger(1, 99, random);
			n3 = mg_giveRandomInteger(1, 400, random);
			n4 = mg_giveRandomInteger(100 - n2, 99, random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, n4, unit1, unit2
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("number4", n4);
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		/**
		 * Calculating the equivalent value in cm for the given numbers in mixed units
		 */
		total_answer_in_cm = (n1 * 100) + n2 + (n3 * 100) + n4;

		/**
		 * Calculating the equivalent values in terms of m and cm for the given numbers in mixed units
		 */
		answer_in_m = total_answer_in_cm / 100;
		answer_in_cm = total_answer_in_cm % 100;

		/**
		 * Returning the values calculated above
		 */
		result.put("answer1", answer_in_m);
		result.put("answer2", answer_in_cm);
		result.put("answer3", total_answer_in_cm);	

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of m, answer in terms of cm, total answer in terms of cm
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_addition_of_mixed_units_m_and_km()
			 @description Gets the problem set data containing the answer, received on addition of two numbers with mixed units such as m and km 
			 @param unit1_value - String - unit of the first and third random number
			 @param unit2_value - String - unit of the second and fourth random number
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of km, answer in terms of m, total answer in terms of m)
	 */
	public static Map<String, Object> mg_get_measurement_addition_of_mixed_units_m_and_km(String unit1_value, String unit2_value, int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, n4 = 0, total_answer_in_m = 0, answer_in_km, answer_in_m;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = unit1_value;
		unit2 = unit2_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1, n2, n3, and n4
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(0, 999, random);
			n3 = mg_giveRandomInteger(1, 10, random);
			n4 = mg_giveRandomInteger(0, 999 - n2, random);
		} else {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 999, random);
			n3 = mg_giveRandomInteger(1, 10, random);
			n4 = mg_giveRandomInteger(1000 - n2, 999, random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, n4, unit1, unit2
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("number4", n4);
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		/**
		 * Calculating the equivalent value in m for the given numbers in mixed units
		 */
		total_answer_in_m = (n1 * 1000) + n2 + (n3 * 1000) + n4;

		/**
		 * Calculating the equivalent values in terms of km and m for the given numbers in mixed units
		 */
		answer_in_km = total_answer_in_m / 1000;
		answer_in_m = total_answer_in_m % 1000;

		/**
		 * Returning the values calculated above
		 */
		result.put("answer1", answer_in_km);
		result.put("answer2", answer_in_m);
		result.put("answer3", total_answer_in_m);	

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of km, answer in terms of m, total answer in terms of m
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_addition_of_mixed_units_g_and_kg()
			 @description Gets the problem set data containing the answer, received on addition of two numbers with mixed units such as g and kg 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of kg, answer in terms of g, total answer in terms of g)
	 */
	public static Map<String, Object> mg_get_measurement_addition_of_mixed_units_g_and_kg(int level) {

		Map<String, Object> result = mg_get_measurement_addition_of_mixed_units_m_and_km("kg", "g", level);

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of kg, answer in terms of g, total answer in terms of g
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_addition_of_mixed_units_ml_and_l()
			 @description Gets the problem set data containing the answer, received on addition of two numbers with mixed units such as ml and l 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of l, answer in terms of ml, total answer in terms of ml)
	 */
	public static Map<String, Object> mg_get_measurement_addition_of_mixed_units_ml_and_l(int level) {

		Map<String, Object> result = mg_get_measurement_addition_of_mixed_units_m_and_km("l", "ml", level);

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of l, answer in terms of ml, total answer in terms of ml
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_subtraction_of_mixed_units_cm_and_mm()
			 @description Gets the problem set data containing the answer, received on subtraction of two numbers with mixed units such as cm and mm 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of cm, answer in terms of mm, total answer in terms of mm)
	 */
	public static Map<String, Object> mg_get_measurement_subtraction_of_mixed_units_cm_and_mm(int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, n4 = 0, total_answer_in_mm = 0, answer_in_cm, answer_in_mm;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = "cm";
		unit2 = "mm";

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1, n2, n3, and n4
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 99, random);
			n2 = mg_giveRandomInteger(1, 9, random);
			n3 = mg_giveRandomInteger(0, n1, random);
			n4 = mg_giveRandomInteger(0, n2, random);	    
		} else {
			n1 = mg_giveRandomInteger(1, 99, random);
			n2 = mg_giveRandomInteger(0, 8, random);
			n3 = mg_giveRandomInteger(0, n1 - 1, random);
			n4 = mg_giveRandomInteger(n2 + 1, 9, random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, n4, unit1, unit2
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("number4", n4);
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		/**
		 * Calculating the equivalent value in mm for the given numbers in mixed units
		 */
		total_answer_in_mm = ((n1 * 10) + n2) - ((n3 * 10) + n4);

		/**
		 * Calculating the equivalent values in terms of cm and mm for the given numbers in mixed units
		 */
		answer_in_cm = total_answer_in_mm / 10;
		answer_in_mm = total_answer_in_mm % 10;

		/**
		 * Returning the values calculated above
		 */
		result.put("answer1", answer_in_cm);  			
		result.put("answer2", answer_in_mm);			
		result.put("answer3", total_answer_in_mm);	

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of cm, answer in terms of mm, total answer in terms of mm
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_subtraction_of_mixed_units_cm_and_m()
			 @description Gets the problem set data containing the answer, received on subtraction of two numbers with mixed units such as cm and m 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of m, answer in terms of cm, total answer in terms of cm)
	 */
	public static Map<String, Object> mg_get_measurement_subtraction_of_mixed_units_cm_and_m(int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, n4 = 0, total_answer_in_cm = 0, answer_in_m, answer_in_cm;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = "m";
		unit2 = "cm";

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1, n2, n3, and n4
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 999, random);
			n2 = mg_giveRandomInteger(1, 99, random);
			n3 = mg_giveRandomInteger(0, n1, random);
			n4 = mg_giveRandomInteger(0, n2, random);
		} else {
			n1 = mg_giveRandomInteger(1, 999, random);
			n2 = mg_giveRandomInteger(0, 98, random);
			n3 = mg_giveRandomInteger(0, n1 - 1, random);
			n4 = mg_giveRandomInteger(n2 + 1, 99, random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, n4, unit1, unit2
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("number4", n4);
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		/**
		 * Calculating the equivalent value in cm for the given numbers in mixed units
		 */
		total_answer_in_cm = ((n1 * 100) + n2) - ((n3 * 100) + n4);

		/**
		 * Calculating the equivalent values in terms of m and cm for the given numbers in mixed units
		 */
		answer_in_m = total_answer_in_cm / 100;
		answer_in_cm = total_answer_in_cm % 100;

		/**
		 * Returning the values calculated above
		 */
		result.put("answer1", answer_in_m);
		result.put("answer2", answer_in_cm);
		result.put("answer3", total_answer_in_cm);	

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of m, answer in terms of cm, total answer in terms of cm
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_subtraction_of_mixed_units_m_and_km()
			 @description Gets the problem set data containing the answer, received on subtraction of two numbers with mixed units such as m and km 
			 @param unit1_value - String - unit of the first and third random number
			 @param unit2_value - String - unit of the second and fourth random number
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of km, answer in terms of m, total answer in terms of m)
	 */
	public static Map<String, Object> mg_get_measurement_subtraction_of_mixed_units_m_and_km(String unit1_value, String unit2_value, int level) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, n4 = 0, total_answer_in_m = 0, answer_in_km, answer_in_m;
		String unit1, unit2;

		/**
		 * Assigning values to unit1 and unit2
		 */
		unit1 = unit1_value;
		unit2 = unit2_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for n1, n2, n3, and n4
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 99, random);
			n2 = mg_giveRandomInteger(1, 999, random);
			n3 = mg_giveRandomInteger(0, n1, random);
			n4 = mg_giveRandomInteger(0, n2, random);
		} else {
			n1 = mg_giveRandomInteger(1, 99, random);
			n2 = mg_giveRandomInteger(0, 998, random);
			n3 = mg_giveRandomInteger(0, n1 - 1, random);
			n4 = mg_giveRandomInteger(n2 + 1, 999, random);
		} 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, n3, n4, unit1, unit2
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", n3);
		result.put("number4", n4);
		result.put("unit1", unit1);
		result.put("unit2", unit2);

		/**
		 * Calculating the equivalent value in m for the given numbers in mixed units
		 */
		total_answer_in_m = ((n1 * 1000) + n2) - ((n3 * 1000) + n4);

		/**
		 * Calculating the equivalent values in terms of km and m for the given numbers in mixed units
		 */
		answer_in_km = total_answer_in_m / 1000;
		answer_in_m = total_answer_in_m % 1000;

		/**
		 * Returning the values calculated above
		 */
		result.put("answer1", answer_in_km);
		result.put("answer2", answer_in_m);
		result.put("answer3", total_answer_in_m);	

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of km, answer in terms of m, total answer in terms of m
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_subtraction_of_mixed_units_g_and_kg()
			 @description Gets the problem set data containing the answer, received on subtraction of two numbers with mixed units such as g and kg 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of kg, answer in terms of g, total answer in terms of g)
	 */
	public static Map<String, Object> mg_get_measurement_subtraction_of_mixed_units_g_and_kg(int level) {

		Map<String, Object> result = mg_get_measurement_subtraction_of_mixed_units_m_and_km("kg", "g", level);

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of kg, answer in terms of g, total answer in terms of g
		 */ 
		return result;    
	}

	/**
		     @name mg_get_measurement_subtraction_of_mixed_units_ml_and_l()
			 @description Gets the problem set data containing the answer, received on subtraction of two numbers with mixed units such as ml and l 
			 @param level - int - Chooses a level. Values are 1 or 2.
			 @return HashMap (first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of l, answer in terms of ml, total answer in terms of ml)
	 */
	public static Map<String, Object> mg_get_measurement_subtraction_of_mixed_units_ml_and_l(int level) {

		Map<String, Object> result = mg_get_measurement_subtraction_of_mixed_units_m_and_km("l", "ml", level);

		/**
		 * Return the HashMap with values of first random number, first unit, second random number, second unit, third random number, fourth random number, answer in terms of l, answer in terms of ml, total answer in terms of ml
		 */ 
		return result;    
	}

	/**
     @name mg_get_money_values_of_coins_and_notes()
	 @description Gets the problem set data containing denomination of note or coin shown
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (parameter value, image, image_title, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_values_of_coins_and_notes(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int answer;
		String[] currency = null;
		int[] currency_value = {0}, currency_value_options = {0};

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		if(level == 1) {

			/**
			 * Creating an array for storing the type of currency
			 */
			currency = new String[]{"coin", "coin", "coin", "coin", "coin", "note", "note", "note", "note", "note", "note"};

			/**
			 * Creating an array for storing the currency values
			 */
			currency_value = new int[]{50, 1, 2, 5, 10, 1, 2, 5, 10, 20, 50};

		} else {

			/**
			 * Creating an array for storing the type of currency
			 */
			currency = new String[]{"note", "note", "note"};

			/**
			 * Creating an array for storing the currency values
			 */
			currency_value = new int[]{100, 500, 1000};
		}

		/**
		 * Generating a random number for index position of the image
		 */
		int random_index = mg_giveRandomInteger(0, currency_value.length - 1, random);

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Selecting an image of the currency
		 */
		String coin_or_note_name = currency[random_index];
		String image = Integer.toString(currency_value[random_index]).concat("_").concat(coin_or_note_name).concat(".png");

		/**
		 * Storing the parameter value, image, image title in the HashMap
		 */
		result.put("parameter_value", currency[random_index]);
		result.put("image", image);

		/**
		 * Obtaining the answer
		 */
		answer = currency_value[random_index];

		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			/**
			 * Creating an array for wrong mcq options
			 */
			if(level == 1) {
				currency_value_options = new int[]{50, 1, 2, 5, 10, 20};
			} else {
				currency_value_options = new int[]{100, 500, 1000, 50, 10};
			}

			/**
			 * Shuffling the array containing wrong mcq options
			 */
			currency_value_options = mg_shuffleInt(currency_value_options); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : currency_value_options){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with parameter value, image, image title, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_money_sum_of_coins_and_notes()
	 @description Gets the problem set data containing sum of notes or coins shown
	 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.                          
	 @param mcq - boolean - Multiple choice options required true / false - default is false
	 @return HashMap (image, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_sum_of_coins_and_notes(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int answer = 0, count_image, rand1;
		String cn_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an arrayList for storing the values of currencies in level 1, 2, 3, and 4  
		 */
		ArrayList <Integer> coin_value = new ArrayList<Integer>(Arrays.asList(1,2,5,10));
		ArrayList <Integer> notes_value_lvl2 = new ArrayList<Integer>(Arrays.asList(5, 10, 20));
		ArrayList <Integer> notes_value_lvl3 = new ArrayList<Integer>(Arrays.asList(5, 10, 20, 50, 100));
		ArrayList <Integer> notes_value_lvl4 = new ArrayList<Integer>(Arrays.asList(50, 100, 500, 1000));
		ArrayList <String> image = new ArrayList<String>();

		/**
		 * Generating a random number for displaying total number of images 
		 */
		count_image = mg_giveRandomInteger(2, 6, random);

		if(level == 1) {
			do{

				/**
				 * Generating a random number for selecting an image
				 */
				rand1 = mg_giveRandomInteger(0, coin_value.size() - 1, random);

				/**
				 * Selecting an image
				 */
				cn_value = Integer.toString(coin_value.get(rand1)).concat("_coin.png"); 

				/**
				 * Ensuring that same image does not get repeated more than twice
				 */
				if(!mg_containsInArrayTwice(image, cn_value)) {
					image.add(cn_value);

					/**
					 * Calculating the answer
					 */
					answer += coin_value.get(rand1);
				}
			} while(image.size() < count_image);
		} else if(level == 2) {
			do{
				if(mg_giveRandomInteger(0, 1, random) == 0) {		/** if coins are selected */ 

					/**
					 * Generating a random number for selecting an image
					 */
					rand1 = mg_giveRandomInteger(0, coin_value.size() - 1, random);

					/**
					 * Selecting an image
					 */
					cn_value = Integer.toString(coin_value.get(rand1)).concat("_coin.png"); 

					/**
					 * Ensuring that same image does not get repeated more than twice
					 */
					if(!mg_containsInArrayTwice(image, cn_value)) {
						image.add(cn_value);

						/**
						 * Calculating the answer
						 */
						answer += coin_value.get(rand1);
					}
				} else {										/** if notes are selected */

					/**
					 * Generating a random number for selecting an image
					 */
					rand1 = mg_giveRandomInteger(0, notes_value_lvl2.size() - 1, random);

					/**
					 * Selecting an image
					 */
					cn_value = Integer.toString(notes_value_lvl2.get(rand1)).concat("_note.png"); 

					/**
					 * Ensuring that same image does not get repeated more than twice
					 */
					if(!mg_containsInArrayTwice(image, cn_value)) {
						image.add(cn_value);

						/**
						 * Calculating the answer
						 */
						answer += notes_value_lvl2.get(rand1);
					}
				}			
			} while(image.size() < count_image);
		} else if(level == 3) {
			do{

				/**
				 * Generating a random number for selecting an image
				 */
				rand1 = mg_giveRandomInteger(0, notes_value_lvl3.size() - 1, random);

				/**
				 * Selecting an image
				 */
				cn_value = Integer.toString(notes_value_lvl3.get(rand1)).concat("_note.png"); 

				/**
				 * Ensuring that same image does not get repeated more than twice
				 */
				if(!mg_containsInArrayTwice(image, cn_value)) {
					image.add(cn_value);

					/**
					 * Calculating the answer
					 */
					answer += notes_value_lvl3.get(rand1);
				}
			} while(image.size() < count_image);
		} else {
			do{

				/**
				 * Generating a random number for selecting an image
				 */
				rand1 = mg_giveRandomInteger(0, notes_value_lvl4.size() - 1, random);

				/**
				 * Selecting an image
				 */
				cn_value = Integer.toString(notes_value_lvl4.get(rand1)).concat("_note.png"); 

				/**
				 * Ensuring that same image does not get repeated more than twice
				 */
				if(!mg_containsInArrayTwice(image, cn_value)) {
					image.add(cn_value);

					/**
					 * Calculating the answer
					 */
					answer += notes_value_lvl4.get(rand1);
				}
			} while(image.size() < count_image);
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the images and answer in the HashMap
		 */
		result.put("image_array", image);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if (level == 1) {
				if((answer - 10) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				if((answer + 10) >= 60) {
					mcq_upper_limit = 60;  
				} else {
					mcq_upper_limit = answer + 10;
				}
			} else if (level == 2) {
				if((answer - 10) <= 2) {
					mcq_lower_limit = 2;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				if((answer + 10) >= 120) {
					mcq_upper_limit = 120;  
				} else {
					mcq_upper_limit = answer + 10;
				}
			} else if (level == 3) {
				if((answer - 10) <= 10) {
					mcq_lower_limit = 10;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				if((answer + 10) >= 600) {
					mcq_upper_limit = 600;  
				} else {
					mcq_upper_limit = answer + 10;
				}
			} else { 
				if((answer - 10) <= 100) {
					mcq_lower_limit = 100;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				if((answer + 10) >= 6000) {
					mcq_upper_limit = 6000;  
				} else {
					mcq_upper_limit = answer + 10;
				}
			} 

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with image, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_money_sum_of_random_number_of_coins_and_notes()
	 @description Gets the problem set data containing sum of notes or coins shown
	 @param level - int - choose a level. Values are 1 or 2.                          
	 @param mcq - boolean - Multiple choice options required true / false - default is false
	 @return HashMap (n1, n2, image1, image2, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_sum_of_random_number_of_coins_and_notes(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, rand1, rand2;
		double[] currency_value;
		double value1 = 0, value2 = 0, answer = 0;
		String[] currency_images, currency;
		String image1 = null, image2 = null, imagename1, imagename2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first random number
		 */
		n1 = mg_giveRandomInteger(1, 5, random);

		/**
		 * Generating second random number
		 */
		n2 = mg_giveRandomInteger(1, 5, random);

		if(level == 1) {

			/**
			 * Creating an array of images, currency name, currency value
			 */
			currency_images = new String[]{"50", "1", "2", "5", "10", "1", "2", "5", "10", "20"};
			currency = new String[]{"coin", "coin", "coin", "coin", "coin", "note", "note", "note", "note", "note"};
			currency_value = new double[]{0.5, 1, 2, 5, 10, 1, 2, 5, 10, 20};

			/**
			 * Randomly selecting first image and getting its value 
			 */
			rand1 = mg_giveRandomInteger(0, currency_images.length - 1, random);
			imagename1 = currency_images[rand1];
			image1 = imagename1.concat("_").concat(currency[rand1]).concat(".png");
			value1 = currency_value[rand1];

			/**
			 * Randomly selecting second image and getting its value 
			 */
			rand2 = mg_giveRandomInteger(0, currency_images.length - 1, random);
			imagename2 = currency_images[rand2];
			image2 = imagename2.concat("_").concat(currency[rand2]).concat(".png");
			value2 = currency_value[rand2];
		} else {

			/**
			 * Creating an array of images, currency name, currency value
			 */
			currency_images = new String[]{"50", "1", "2", "5", "10", "1", "2", "5", "10", "20", "50", "100", "500", "1000"};
			currency = new String[]{"coin", "coin", "coin", "coin", "coin", "note", "note", "note", "note", "note", "note", "note", "note", "note"};
			currency_value = new double[]{0.5, 1, 2, 5, 10, 1, 2, 5, 10, 20, 50, 100, 500, 1000};

			/**
			 * Randomly selecting first image and getting its value 
			 */
			rand1 = mg_giveRandomInteger(0, currency_images.length - 1, random);
			imagename1 = currency_images[rand1];
			image1 = imagename1.concat("_").concat(currency[rand1]).concat(".png");
			value1 = currency_value[rand1];

			/**
			 * Randomly selecting second image and getting its value 
			 */
			rand2 = mg_giveRandomInteger(0, currency_images.length - 1, random);
			imagename2 = currency_images[rand2];
			image2 = imagename2.concat("_").concat(currency[rand2]).concat(".png");
			value2 = currency_value[rand2];       	    	
		}

		/**
		 * Calculating the answer
		 */
		answer = (double)((n1 * value1) + (n2 * value2));

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("image1", image1);
		result.put("image2", image2);
		result.put("answer", answer);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(Double.toString(answer)); 

			/**
			 * Creating the wrong mcq options
			 */
			String wrong_1;											/** answer - 10 */
			double temp = answer - 10;							
			if(temp <= 0) {
				wrong_1 = Double.toString(answer + 7);
			} else {
				wrong_1 = Double.toString(answer - 10);			
			}

			String wrong_2;											/** answer + 10 */
			wrong_2 = Double.toString(answer + 10);

			String wrong_3;											/** answer - 5 */
			temp = answer - 5;
			if(temp <= 0) {
				wrong_3 = Double.toString(answer + 2);
			} else {
				wrong_3 = Double.toString(answer - 5);			
			}

			String wrong_4;											/** answer + 5 */
			wrong_4 = Double.toString(answer + 5);

			/**
			 * Storing the wrong options in ArrayList
			 */
			ArrayList<String> wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

			/**
			 * Shuffling the wrong mcq options
			 */
			Collections.shuffle(wrong_answer_set);

			/**
			 * Storing the values of wrong mcq options in the ArrayList
			 */
			mcq_option.add(wrong_answer_set.get(0));
			mcq_option.add(wrong_answer_set.get(1));
			mcq_option.add(wrong_answer_set.get(2));

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with n1, n2, image1, image2, answer, ArrayList of mcq options
		 */ 
		return result;  
	}

	/**
			     @name mg_get_money_cost_of_multiple_objects_of_same_kind()
				 @description Gets the problem set data containing amount to be paid for particular number of objects 
				 @param level - int - Chooses a level. Values are 1, 2 or 3.                          
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (object name in singular form (object1), cost (c1), object name in plural form (object2), random number (n1), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_cost_of_multiple_objects_of_same_kind(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int c1, n1, answer;
		String[] objects_singular, objects_plural;
		String object1, object2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for the cost and quantity of the objects
		 */
		if(level == 1) {
			c1 = mg_giveRandomInteger(1, 5, random);
			n1 = mg_giveRandomInteger(1, 5, random);
		} else if(level == 2) {
			c1 = mg_giveRandomInteger(6, 10, random);
			n1 = mg_giveRandomInteger(1, 10, random);
		} else {
			c1 = mg_giveRandomInteger(10, 50, random);
			n1 = mg_giveRandomInteger(1, 10, random);
		}

		/**
		 * Calculating the answer
		 */
		answer = c1 * n1;

		/**
		 * Creating arrays for object names in singular and plural form
		 */
		objects_singular = new String[]{"eraser", "pen", "pencil", "sharpner", "apple", "orange", "mango", "chocolate"};
		objects_plural = new String[]{"erasers", "pens", "pencils", "sharpners", "apples", "oranges", "mangoes", "chocolates"};

		/**
		 * Selecting a random object
		 */
		int rand1 = mg_giveRandomInteger(0, objects_singular.length - 1, random);

		/**
		 * Selecting objects
		 */
		object1 = objects_singular[rand1];

		if(n1 == 1) {
			object2 = objects_singular[rand1];
		} else {
			object2 = objects_plural[rand1];
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("object1", object1);
		result.put("cost1", c1);
		result.put("number1", n1);
		result.put("object2", object2);
		result.put("answer", answer);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if (level == 1) {
				if((answer - 5) <= 1) {
					mcq_lower_limit = 1;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 25) {
					mcq_upper_limit = 25;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else if (level == 2) {
				if((answer - 5) <= 6) {
					mcq_lower_limit = 6;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else {
				if((answer - 5) <= 10) {
					mcq_lower_limit = 10;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 500) {
					mcq_upper_limit = 500;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} 

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with object name in singular form (object1), cost (c1), object name in plural form (object2), random number (n1), answer, ArrayList of mcq options
		 */ 
		return result;  
	}

	/**
			     @name mg_get_money_cost_of_multiple_objects_of_different_kind()
				 @description Gets the problem set data containing amount to be paid for multiple objects of different kind 
				 @param level - int - Chooses a level. Values are 1, 2 or 3.
				 @param mcq - boolean - Multiple choice options required true / false - default is false                  
				 @return HashMap (name, first object name (object1), cost of first object (c1), second object name (object2), cost of second object (c2), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_cost_of_multiple_objects_of_different_kind(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int c1, c2, answer;
		String[] objects_array;
		String object1, object2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random numbers for the cost of first and second object
		 */
		if(level == 1) {
			c1 = mg_giveRandomInteger(1, 5, random);
			c2 = mg_giveRandomInteger(1, 5, random);
		} else if(level == 2) {
			c1 = mg_giveRandomInteger(6, 10, random);
			c2 = mg_giveRandomInteger(6, 10, random);
		} else {
			c1 = mg_giveRandomInteger(10, 50, random);
			c2 = mg_giveRandomInteger(10, 50, random);
		}

		/**
		 * Calculating the answer
		 */
		answer = c1 + c2;

		/**
		 * Array of object names in singular form
		 */
		int rand1, rand2, rand3;

		/**
		 * Creating an array of object names
		 */
		objects_array = new String[]{"eraser", "pen", "pencil", "sharpner", "apple", "orange", "mango", "chocolate"};

		/**
		 * Generating random numbers for selecting random objects 
		 */
		rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		do{
			rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		} while(rand2 == rand1); 

		/**
		 * Selecting the objects
		 */
		object1 = objects_array[rand1];
		object2 = objects_array[rand2];

		/**
		 * Creating array of names 
		 */
		String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram"};

		/**
		 * Generating a random number for selecting a random name 
		 */
		rand3 = mg_giveRandomInteger( 0, name_array.length - 1, random);

		/**
		 * Selecting a name
		 */
		String name = name_array[rand3];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("name", name);
		result.put("object1", object1);
		result.put("cost1", c1);
		result.put("object2", object2);
		result.put("cost2", c2);
		result.put("answer", answer);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if (level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(2, 10).toArray();
			} else if (level == 2) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(12, 20).toArray();
			} else {

				/**
				 * Calculating upper limit and lower limit for the remaining mcq options
				 */
				int mcq_lower_limit, mcq_upper_limit;
				if((answer - 5) <= 20) {
					mcq_lower_limit = 20;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = answer + 5;
				}

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
			} 

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with name, first object name (object1), cost of first object (c1), second object name (object2), cost of second object (c2), answer, ArrayList of mcq options
		 */ 
		return result;  
	}

	/**
			     @name mg_get_money_identifying_type_of_notes()
				 @description Gets the problem set data for identifying the type of notes 
				 @param level - int - Chooses a level. Values are 1, 2 or 3.                          
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (name, number of similar notes (n1), total value of notes (total_value), answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_identifying_type_of_notes(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, v1, total_value, answer;
		int[] v1_values;
		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		if(level == 1) {

			/**
			 * Generating a random value for number of similar notes 
			 */
			n1 = mg_giveRandomInteger(2, 5, random);

			/**
			 * Creating an array for currency values
			 */
			v1_values =new int[] {1, 2, 5, 10};

			/**
			 * Generating a random number for selecting a value
			 */
			int temp = mg_giveRandomInteger(0, v1_values.length - 1, random);

			/**
			 * Selecting a random value
			 */
			v1 = v1_values[temp];
		} else if(level == 2) {

			/**
			 * Generating a random value for number of similar notes 
			 */
			n1 = mg_giveRandomInteger(2, 10, random);

			/**
			 * Creating an array for currency values
			 */
			v1_values =new int[] {20, 50, 100};

			/**
			 * Generating a random number for selecting a value
			 */
			int temp = mg_giveRandomInteger(0, v1_values.length - 1, random);

			/**
			 * Selecting a random value
			 */
			v1 = v1_values[temp];
		} else {

			/**
			 * Generating a random value for number of similar notes 
			 */
			n1 = mg_giveRandomInteger(2, 10, random);

			/**
			 * Creating an array for currency values
			 */
			v1_values =new int[] {500, 1000};

			/**
			 * Generating a random number for selecting a value
			 */
			int temp = mg_giveRandomInteger(0, v1_values.length - 1, random);

			/**
			 * Selecting a random value
			 */
			v1 = v1_values[temp];
		}

		/**
		 * Calculating the total value of notes
		 */
		total_value = n1 * v1;

		/**
		 * Obtaining the answer
		 */
		answer = v1;

		/**
		 * Creating array of names 
		 */
		String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Aditi", "Priya", "Neha", "Nisha", "Rita"};

		/**
		 * Generating a random number for selecting a random name 
		 */
		int rand1 = mg_giveRandomInteger( 0, name_array.length - 1, random);

		/**
		 * Selecting a name
		 */
		String name = name_array[rand1];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("name", name);
		result.put("number1", n1);
		result.put("total_value", total_value);
		result.put("answer", answer);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the mcq options in the ArrayList 
			 */ 
			if(level == 1) {
				mcq_option.add(1);
				mcq_option.add(2);
				mcq_option.add(5);
				mcq_option.add(10);
			} else if(level == 2) {
				mcq_option.add(10);
				mcq_option.add(20);
				mcq_option.add(50);
				mcq_option.add(100);
			} else {
				mcq_option.add(50);
				mcq_option.add(100);
				mcq_option.add(500);
				mcq_option.add(1000);
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with name, number of similar notes (n1), total value of notes (total_value), answer, ArrayList of mcq options
		 */ 
		return result;  
	}

	/**
			     @name mg_get_money_making_money_amounts()
				 @description Gets the problem set data for identifying the type of notes 
				 @param level - int - Chooses a level. Values are 1, 2 or 3.                          
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (name, v1, total value of notes (total_value), answer, parent relation, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_making_money_amounts(int level, boolean mcq) {

		Map<String, Object> result = mg_get_money_identifying_type_of_notes(level, false);
		result.put("value1", result.get("answer"));
		result.put("answer", result.get("number1"));
		int temp = (int)result.get("number1");
		result.remove("number1");

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array of parent relation
		 */
		String[] parent_relation_array = {"mother", "father"};

		/**
		 * Generating a random number for selecting a random title 
		 */
		int rand1 = mg_giveRandomInteger( 0, 1, random);

		/**
		 * Selecting a relation
		 */
		String parent_relation = parent_relation_array[rand1];

		/**
		 * Storing the values in the HashMap
		 */
		result.put("parent_relation", parent_relation);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(temp);

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options
			 */ 
			if(level == 1) {
				array = IntStream.rangeClosed(1, 5).toArray();
			} else if(level == 2) {
				array = IntStream.rangeClosed(1, 10).toArray();
			} else {
				array = IntStream.rangeClosed(1, 10).toArray();
			}

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with name, v1, total value of notes (total_value), answer, parent relation, ArrayList of mcq options
		 */ 
		return result;  
	}

	/**
     @name mg_get_money_change_back()
	 @description Gets the problem set data for the amount of change to be received  
	 @param level - int - Chooses a level. Values are 1 or 2.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                      
	 @return HashMap (name, v1, object name, c1, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_change_back(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int v1, c1, answer;
		int[] v1_values;
		String[] objects_array;
		String object;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		if(level == 1) {

			/**
			 * Creating an array for storing the values of notes
			 */
			v1_values = new int[] {5, 10, 20};

			/**
			 * Generating a random number for selecting a random note  
			 */
			int rand1 = mg_giveRandomInteger(0, v1_values.length - 1, random);

			/**
			 * Selecting a random note
			 */
			v1 = v1_values[rand1];

			/**
			 * Generating a random number for cost of the object
			 */
			do{
				c1 = mg_giveRandomInteger(1, 15, random);
			} while(c1 > v1);

		} else {

			/**
			 * Creating an array for storing the values of notes
			 */
			v1_values = new int[] {10, 20, 50, 100};

			/**
			 * Generating a random number for selecting a random note  
			 */
			int rand1 = mg_giveRandomInteger(0, v1_values.length - 1, random);

			/**
			 * Selecting a random note
			 */
			v1 = v1_values[rand1];

			/**
			 * Generating a random number for cost of the object
			 */
			do{
				c1 = mg_giveRandomInteger(1, 80, random);
			} while(c1 > v1);
		}

		/**
		 * Calculating the answer
		 */
		answer = v1 - c1;

		/**
		 * Creating an array of names 
		 */
		String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Aditi", "Priya", "Neha", "Nisha", "Rita"};

		/**
		 * Generating a random number for selecting a random name 
		 */
		int rand1 = mg_giveRandomInteger( 0, name_array.length - 1, random);

		/**
		 * Selecting a name
		 */
		String name = name_array[rand1];

		/**
		 * Creating an array of object names
		 */
		objects_array = new String[]{"eraser", "pen", "pencil", "sharpner", "apple", "orange", "mango", "chocolate"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);

		/**
		 * Selecting an object
		 */
		object = objects_array[rand2];

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("name", name);
		result.put("value1", v1);
		result.put("object", object);
		result.put("cost1", c1);
		result.put("answer", answer);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating upper limit and lower limit for the remaining mcq options
			 */
			int mcq_lower_limit, mcq_upper_limit;
			if (level == 1) {
				if((answer - 5) <= 0) {
					mcq_lower_limit = 0;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 19) {
					mcq_upper_limit = 19;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}  else {
				if((answer - 5) <= 0) {
					mcq_lower_limit = 0;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 99) {
					mcq_upper_limit = 99;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} 

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with name, v1, object name, c1, answer, ArrayList of mcq options
		 */ 
		return result;  
	}

	/**
     @name mg_get_money_converting_between_money_denominations_with_image()
	 @description Gets the problem set data for the multiples of the right image, for a random left image                           
	 @return HashMap (name of left image, name of right image, answer)
	 */
	public static Map<String, Object> mg_get_money_converting_between_money_denominations_with_image() {

		/**
		 * Declaring the variables
		 */
		int random_number_1, answer, rand1, rand2;
		double random_number_2 = 0;
		int[] left_value_array;
		double[] right_value_array;
		String[] left_image_array, right_image_array, currency;
		String left_image, left_image_name, right_image, cn_value = null, temp;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array for value of currency on the left side 
		 */
		left_value_array = new int[]{1, 2, 5, 10, 20, 50, 100, 500, 1000};

		/**
		 * Generating a random number for selecting a random value
		 */
		rand1 = mg_giveRandomInteger(0, left_value_array.length - 1, random);

		/**
		 * Selecting the random value
		 */
		random_number_1 = left_value_array[rand1];

		/**
		 * Creating an array of images on the left side 
		 */
		left_image_array = new String[]{"1", "2", "5", "10", "20", "50", "100", "500", "1000"};

		/**
		 * Creating an array for currency values
		 */
		currency = new String[]{"_coin","_note"};

		/**
		 * Generating a random number for selecting a currency value
		 */
		rand2 =  mg_giveRandomInteger(0, 1, random);

		/**
		 * Storing the currency value 
		 */
		temp = currency[rand2];

		/**
		 * Selecting an image name   
		 */
		left_image = left_image_array[rand1];

		/**
		 * Creating the image for the left side
		 */
		if(random_number_1 > 10) {
			left_image_name = left_image.concat("_note.png");
		} else {
			left_image_name = left_image.concat(temp).concat(".png");
		}

		if(random_number_1 == 1) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {0.5};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"50"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			cn_value = right_image.concat("_coin.png");
		} else if(random_number_1 == 2) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 0.5};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	  

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"1", "50"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			if(random_number_2 == 0.5) {
				cn_value = right_image.concat("_coin.png");
			} else {
				cn_value = right_image.concat(temp).concat(".png");
			}
		} else if(random_number_1 == 5) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"1"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			cn_value = right_image.concat(temp).concat(".png");
		} else if(random_number_1 == 10) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"1", "2", "5"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			cn_value = right_image.concat(temp).concat(".png");
		} else if(random_number_1 == 20) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5, 10};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"1", "2", "5", "10"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			cn_value = right_image.concat(temp).concat(".png");
		} else if(random_number_1 == 50) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5, 10};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"1", "2", "5", "10"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			cn_value = right_image.concat(temp).concat(".png");
		} else if(random_number_1 == 100) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5, 10, 20, 50};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"1", "2", "5", "10", "20", "50"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			if(random_number_2 > 10) {
				cn_value = right_image.concat("_note.png");
			} else {
				cn_value = right_image.concat(temp).concat(".png");
			}
		} else if(random_number_1 == 500) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {10, 20, 50, 100};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	 

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"10", "20", "50", "100"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			if(random_number_2 > 10) {
				cn_value = right_image.concat("_note.png");
			} else {
				cn_value = right_image.concat(temp).concat(".png");
			}
		} else {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {10, 20, 50, 100, 500};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	    	

			/**
			 * Creating an array of images for the right side 
			 */
			right_image_array = new String[]{"10", "20", "50", "100", "500"};

			/**
			 * Selecting an image name  
			 */
			right_image = right_image_array[rand2];

			/**
			 * Concatenating the selected the image name with '.png'
			 */
			if(random_number_2 > 10) {
				cn_value = right_image.concat("_note.png");
			} else {
				cn_value = right_image.concat(temp).concat(".png");
			}
		}

		/**
		 * Calculating the answer
		 */
		answer = (int) (random_number_1 / random_number_2);

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("left_image", left_image_name);
		result.put("right_image", cn_value);
		result.put("answer", answer);  

		/**
		 * Return the HashMap with name of image on the left, name of image on the right, answer
		 */ 
		return result;  
	}

	/**
			     @name mg_get_money_converting_between_money_denominations_without_image()
				 @description Gets the problem set data for the multiples of the value on the right, for a random value on the left                            
				 @return HashMap (LHS value, RHS value, answer)
	 */
	public static Map<String, Object> mg_get_money_converting_between_money_denominations_without_image() {

		/**
		 * Declaring the variables
		 */
		int random_number_1, answer, rand1, rand2;
		double random_number_2 = 0;
		int[] left_value_array;
		double[] right_value_array;
		String[] left_values, right_values, currency;
		String left_value, right_value, left_cn_value, right_cn_value = null, temp;

		/**
		 * Initializing random generator
		 */
		Random random = new Random();

		/**
		 * Creating an array for value of currency on the left side 
		 */
		left_value_array = new int[]{1, 2, 5, 10, 20, 50, 100, 500, 1000};

		/**
		 * Generating a random number for selecting a random value
		 */
		rand1 = mg_giveRandomInteger(0, left_value_array.length - 1, random);

		/**
		 * Selecting the random value
		 */
		random_number_1 = left_value_array[rand1];

		/**
		 * Creating an array of values on the left side 
		 */
		left_values = new String[]{"Rs. 1","Rs. 2","Rs. 5","Rs. 10","Rs. 20","Rs. 50","Rs. 100","Rs. 500","Rs. 1000"};

		/**
		 * Creating an array for currency values
		 */
		currency = new String[]{" coin"," note"};

		/**
		 * Generating a random number for selecting a currency value
		 */
		rand2 =  mg_giveRandomInteger(0, 1, random);

		/**
		 * Storing the currency value 
		 */
		temp = currency[rand2];

		/**
		 * Selecting a value   
		 */
		left_value = left_values[rand1];

		/**
		 * Concatenating the selected value with appropriate currency 
		 */
		if(random_number_1 > 10) {
			left_cn_value = left_value.concat(" note");
		} else {
			left_cn_value = left_value.concat(temp);
		}

		if(random_number_1 == 1) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {0.5};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	    	

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"50 paise"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			right_cn_value = right_value.concat(" coin");
		} else if(random_number_1 == 2) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 0.5};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	  

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 1", "50 paise"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			if(random_number_2 == 0.5) {
				right_cn_value = right_value.concat(" coin");
			} else {
				right_cn_value = right_value.concat(temp);
			}
		} else if(random_number_1 == 5) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 1"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			right_cn_value = right_value.concat(temp);
		} else if(random_number_1 == 10) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 1", "Rs. 2", "Rs. 5"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			right_cn_value = right_value.concat(temp);
		} else if(random_number_1 == 20) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5, 10};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 1", "Rs. 2", "Rs. 5", "Rs. 10"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			right_cn_value = right_value.concat(temp);
		} else if(random_number_1 == 50) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5, 10};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 1", "Rs. 2", "Rs. 5", "Rs. 10"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			right_cn_value = right_value.concat(temp);
		} else if(random_number_1 == 100) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {1, 2, 5, 10, 20, 50};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 1", "Rs. 2", "Rs. 5", "Rs. 10", "Rs. 20", "Rs. 50"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			if(random_number_2 > 10) {
				right_cn_value = right_value.concat(" note");
			} else {
				right_cn_value = right_value.concat(temp);
			}
		} else if(random_number_1 == 500) {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {10, 20, 50, 100};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	 

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 10", "Rs. 20", "Rs. 50", "Rs. 100"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			if(random_number_2 > 10) {
				right_cn_value = right_value.concat(" note");
			} else {
				right_cn_value = right_value.concat(temp);
			}
		} else {

			/**
			 * Creating an array for value of currency on the right side 
			 */
			right_value_array = new double[] {10, 20, 50, 100, 500};

			/**
			 * Generating a random number for selecting a random value
			 */
			rand2 = mg_giveRandomInteger(0, right_value_array.length - 1, random);

			/**
			 * Selecting the random value
			 */
			random_number_2 = right_value_array[rand2];	    	

			/**
			 * Creating an array of values on the right side 
			 */
			right_values = new String[]{"Rs. 10", "Rs. 20", "Rs. 50", "Rs. 100", "Rs. 500"};

			/**
			 * Selecting a value
			 */
			right_value = right_values[rand2];

			/**
			 * Concatenating the selected value with appropriate currency 
			 */
			if(random_number_2 > 10) {
				right_cn_value = right_value.concat(" note");
			} else {
				right_cn_value = right_value.concat(temp);
			}
		}

		/**
		 * Calculating the answer
		 */
		answer = (int) (random_number_1 / random_number_2);

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("LHS_value", left_cn_value);
		result.put("RHS_value", right_cn_value);
		result.put("answer", answer);  

		/**
		 * Return the HashMap with LHS value, RHS value, answer
		 */ 
		return result;  
	}

	/**
			     @name mg_get_money_for_number_of_one_rupee_coins()
				 @description Gets the problem set data for number of one rupee coins that will be received for a particular number of notes                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number (n1), value of first coin or note, second random number (n2), value of second coin or note, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_money_for_number_of_one_rupee_coins(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2, currency_1_value, currency_2_value, answer;
		int[] currency_1_values, currency_2_values;
		String[] currency_1_string_values, currency_2_string_values, currency;
		String currency_1_string, currency_2_string, temp, coin_note_1, coin_note_2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Storing the currency value of first coin/note
		 */
		currency_1_values = new int[]{10, 20};

		/**
		 * Generating a random number for selecting a value
		 */
		int rand1 = mg_giveRandomInteger(0, currency_1_values.length - 1, random);

		/**
		 * Selecting a value
		 */
		currency_1_value = currency_1_values[rand1];

		/**
		 * Creating an array for storing String values of first coin/note   
		 */
		currency_1_string_values = new String[]{"Rs. 10","Rs. 20"};

		/**
		 * Creating an array for storing currency values
		 */
		currency = new String[]{" coin"," note"};

		/**
		 * Generating a random number for selecting a random value
		 */
		int rand2 =  mg_giveRandomInteger(0, 1, random);

		/**
		 * Storing the currency value
		 */
		temp = currency[rand2];

		/**
		 * Storing the String value of first coin/note
		 */
		currency_1_string = currency_1_string_values[rand1];

		/**
		 * Concatenating the first coin/note with appropriate currency
		 */
		if(currency_1_value > 10) {
			coin_note_1 = currency_1_string.concat(" note");
		} else {
			coin_note_1 = currency_1_string.concat(temp);
		}

		/**
		 * Storing the currency value of first coin/note
		 */
		currency_2_values = new int[]{2, 5};

		/**
		 * Generating a random number for selecting a value
		 */
		rand1 = mg_giveRandomInteger(0, currency_2_values.length - 1, random);

		/**
		 * Selecting a value
		 */
		currency_2_value = currency_2_values[rand1];

		/**
		 * Creating an array for storing String values of second coin/note   
		 */
		currency_2_string_values = new String[]{"Rs. 2","Rs. 5"};

		/**
		 * Creating an array for storing currency values
		 */
		currency = new String[]{" coin"," note"};

		/**
		 * Generating a random number for selecting a random value
		 */
		rand2 = mg_giveRandomInteger(0, 1, random);

		/**
		 * Storing the currency value
		 */
		temp = currency[rand2];

		/**
		 * Storing the String value of second coin/note
		 */
		currency_2_string = currency_2_string_values[rand1];

		/**
		 * Concatenating the first coin/note with appropriate currency
		 */
		coin_note_2 = currency_2_string.concat(temp);

		/**
		 * Generating random values for n1 and n2
		 */
		n1 =  mg_giveRandomInteger(1, 2, random);
		n2 =  mg_giveRandomInteger(1, 5, random);

		/**
		 * Calculating the answer
		 */
		answer = n1 * currency_1_value + n2 * currency_2_value;

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values in the HashMap
		 */
		result.put("number1", n1);
		result.put("coin_note_1", coin_note_1);
		result.put("number2", n2);
		result.put("coin_note_2", coin_note_2);
		result.put("answer", answer);  

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating upper limit and lower limit for the remaining mcq options
			 */
			int mcq_lower_limit, mcq_upper_limit;
			if((answer - 5) <= 12) {
				mcq_lower_limit = 12;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 65) {
				mcq_upper_limit = 65;  
			} else {
				mcq_upper_limit = answer + 5;
			}

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array);

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number (n1), value of first coin or note, second random number (n2), value of second coin or note, answer, ArrayList of mcq options
		 */ 
		return result;  
	}

	/**
	@name mg_get_money_for_paying_for_object()
	@description Gets the problem set data for the amount to be paid for an object     
	@param level - int - Chooses a level. Values can be 1, 2 or 3. 
	@param image_flag - boolean - if true, displays an image for m1 - default is false                        
	@return HashMap (m1, image of m1 (optional), first answer, value of the first coin or note, second answer, value of the second coin or note, third answer, value of third coin or note)
	*/
	public static Map<String, Object> mg_get_money_for_paying_for_object(int level, boolean m1_image_flag) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, n3, coin_note_1, coin_note_2, coin_note_3, m1;
		int[] currency_1_values, currency_2_values, currency_3_values;
		String[] currency;
		String temp, coin_note_1_image, coin_note_2_image, coin_note_3_image;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(level == 1) {

			/**
			 * Storing the currency value of first coin/note
			 */
			currency_1_values = new int[]{10, 20};

			/**
			 * Generating a random number for selecting a value
			 */
			int rand1 = mg_giveRandomInteger(0, currency_1_values.length - 1, random);

			/**
			 * Selecting a value
			 */
			coin_note_1 = currency_1_values[rand1];

			/**
			 * Creating an array for storing currency values
			 */
			currency = new String[]{"_coin.png","_note.png"};

			/**
			 * Generating a random number for selecting a value
			 */
			int rand2 =  mg_giveRandomInteger(0, 1, random);

			/**
			 * Selecting a currency value
			 */
			temp = currency[rand2];

			/**
			 * Concatenating the first coin/note with appropriate currency
			 */
			if(coin_note_1 > 10) {
				coin_note_1_image = Integer.toString(coin_note_1).concat("_note.png");
			} else {
				coin_note_1_image = Integer.toString(coin_note_1).concat(temp);
			}

			/**
			 * Storing the currency value of second coin/note
			 */
			currency_2_values = new int[]{5, 10};
			do{

				/**
				 * Generating a random number for selecting a value
				 */
				rand1 = mg_giveRandomInteger(0, currency_2_values.length - 1, random);

				/**
				 * Selecting a value
				 */
				coin_note_2 = currency_2_values[rand1];
			} while (coin_note_2 == coin_note_1);

			/**
			 * Creating an array for storing currency values
			 */
			currency = new String[]{"_coin.png","_note.png"};

			/**
			 * Generating a random number for selecting a value
			 */
			rand2 = mg_giveRandomInteger(0, 1, random);

			/**
			 * Selecting a currency value
			 */
			temp = currency[rand2];

			/**
			 * Concatenating the second coin/note with appropriate currency
			 */
			coin_note_2_image = Integer.toString(coin_note_2).concat(temp);

			/**
			 * Generating random numbers for n1 and n2
			 */
			n1 =  mg_giveRandomInteger(1, 5, random);
			n2 =  (2 * mg_giveRandomInteger(1 , 3, random)) - 1;

			/**
			 * Calculating the answer
			 */
			m1 = n1 * coin_note_1 + n2 * coin_note_2;

			/**
			 * Storing the values in the HashMap
			 */
			result.put("answer1", n1);
			result.put("image1", coin_note_1_image);
			result.put("answer2", n2);
			result.put("image2", coin_note_2_image);
			result.put("field1", coin_note_1);
			result.put("field2", coin_note_2);
			result.put("object_price", m1);
		} else if(level == 2) {

			/**
			 * Storing the currency value of first coin/note
			 */
			currency_1_values = new int[]{50, 100};

			/**
			 * Generating a random number for selecting a value
			 */
			int rand1 = mg_giveRandomInteger(0, currency_1_values.length - 1, random);

			/**
			 * Selecting a value
			 */
			coin_note_1 = currency_1_values[rand1];

			/**
			 * Concatenating the first coin/note with appropriate currency
			 */
			coin_note_1_image = Integer.toString(coin_note_1).concat("_note.png");

			/**
			 * Storing the currency value of second coin/note
			 */
			currency_2_values = new int[]{10, 20};

			/**
			 * Generating a random number for selecting a value
			 */
			rand1 = mg_giveRandomInteger(0, currency_2_values.length - 1, random);

			/**
			 * Selecting a value
			 */
			coin_note_2 = currency_2_values[rand1];

			/**
			 * Creating an array for storing currency values
			 */
			currency = new String[]{"_coin.png","_note.png"};

			/**
			 * Generating a random number for selecting a value
			 */
			int rand2 = mg_giveRandomInteger(0, 1, random);

			/**
			 * Selecting a currency value
			 */
			if(coin_note_2 > 10) {
				temp = "_note.png";
			} else {
				temp = currency[rand2];
			}

			/**
			 * Concatenating the second coin/note with appropriate currency
			 */
			coin_note_2_image = Integer.toString(coin_note_2).concat(temp);

			/**
			 * Storing the currency value of third coin/note
			 */
			currency_3_values = new int[]{5, 10};

			do{

				/**
				 * Generating a random number for selecting a value
				 */
				rand1 = mg_giveRandomInteger(0, currency_3_values.length - 1, random);

				/**
				 * Selecting a value
				 */
				coin_note_3 = currency_3_values[rand1];
			} while (coin_note_3 == coin_note_2);

			/**
			 * Creating an array for storing currency values
			 */
			currency = new String[]{"_coin.png","_note.png"};

			/**
			 * Generating a random number for selecting a value
			 */
			int rand3 = mg_giveRandomInteger(0, 1, random);

			/**
			 * Selecting a currency value
			 */
			temp = currency[rand3];

			/**
			 * Concatenating the second coin/note with appropriate currency
			 */
			coin_note_3_image = Integer.toString(coin_note_3).concat(temp);

			/**
			 * Generating random numbers for n1, n2, and n3
			 */
			n1 = mg_giveRandomInteger(1, 3, random);
			n2 = mg_giveRandomInteger(1, 5, random);
			n3 = mg_giveRandomInteger(5, 10, random);

			/**
			 * Calculating the answer
			 */
			m1 = n1 * coin_note_1 + n2 * coin_note_2 + n3 * coin_note_3;

			/**
			 * Storing the values in the HashMap
			 */
			result.put("answer1", n1);
			result.put("image1", coin_note_1_image);
			result.put("answer2", n2);
			result.put("image2", coin_note_2_image);
			result.put("answer3", n3);
			result.put("image3", coin_note_3_image);
			result.put("field1", coin_note_1);
			result.put("field2", coin_note_2);
			result.put("field3", coin_note_3);
			result.put("object_price", m1);	    
		} else {

			/**
			 * Storing the currency value of first coin/note
			 */
			currency_1_values = new int[]{500, 1000};

			/**
			 * Generating a random number for selecting a value
			 */
			int rand1 = mg_giveRandomInteger(0, currency_1_values.length - 1, random);

			/**
			 * Selecting a value
			 */
			coin_note_1 = currency_1_values[rand1];

			/**
			 * Concatenating the first coin/note with appropriate currency
			 */
			coin_note_1_image = Integer.toString(coin_note_1).concat("_note.png");

			/**
			 * Storing the currency value of second coin/note
			 */
			currency_2_values = new int[]{50, 100};

			/**
			 * Generating a random number for selecting a value
			 */
			rand1 = mg_giveRandomInteger(0, currency_2_values.length - 1, random);

			/**
			 * Selecting a value
			 */
			coin_note_2 = currency_2_values[rand1];
			
			/**
			 * Concatenating the second coin/note with appropriate currency
			 */
			coin_note_2_image = Integer.toString(coin_note_2).concat("_note.png");

			/**
			 * Storing the currency value of third coin/note
			 */
			currency_3_values = new int[]{10, 20};

			/**
			 * Generating a random number for selecting a value
			 */
			rand1 = mg_giveRandomInteger(0, currency_3_values.length - 1, random);

			/**
			 * Selecting a value
			 */
			coin_note_3 = currency_3_values[rand1];

			/**
			 * Creating an array for storing currency values
			 */
			currency = new String[]{"_coin.png","_note.png"};

			/**
			 * Generating a random number for selecting a value
			 */
			int rand3 = mg_giveRandomInteger(0, 1, random);

			/**
			 * Selecting a currency value
			 */
			if(coin_note_3 > 10) {
				temp = "_note.png";
			} else {
				temp = currency[rand3];
			}

			/**
			 * Concatenating the second coin/note with appropriate currency
			 */
			coin_note_3_image = Integer.toString(coin_note_3).concat(temp);

			/**
			 * Generating random numbers for n1, n2, and n3
			 */
			n1 = mg_giveRandomInteger(1, 5, random);
			n2 = mg_giveRandomInteger(1, 5, random);
			n3 = mg_giveRandomInteger(5, 10, random);

			/**
			 * Calculating the answer
			 */
			m1 = n1 * coin_note_1 + n2 * coin_note_2 + n3 * coin_note_3;

			/**
			 * Storing the values in the HashMap
			 */
			result.put("answer1", n1);
			result.put("image1", coin_note_1_image);
			result.put("answer2", n2);
			result.put("image2", coin_note_2_image);
			result.put("answer3", n3);
			result.put("image3", coin_note_3_image);
			result.put("field1", coin_note_1);
			result.put("field2", coin_note_2);
			result.put("field3", coin_note_3);
			result.put("object_price", m1);	
		}
		
		/**
		 * Returning the image of m1 to HashMap
		 */
		if(m1_image_flag == true) { 
			
			/**
			 * Array of images 
			 */
			String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

			/**
			 * Generating a random number for selecting a random image 
			 */
			int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

			/**
			 * Returning the image to the HashMap  
			 */
			result.put("image", images[random_index].concat(".png") );
		}

		/**
		 * Return the HashMap with m1, image of the m1 (optional),first answer, value of first coin or note, second answer, value of second coin or note, third answer, value of third coin or note
		 */ 
		return result;  
	}

	/**
     @name mg_get_money_change()
	 @description Gets the problem set data for the amount to be paid for an object                             
	 @return HashMap (name, m1, pronoun, pronoun in sentence case, n1 or n2, d1, d2, answer)
	 */
	public static Map<String, Object> mg_get_money_change() {

		/**
		 * Declaring the variables
		 */
		int d1_or_d2_value, m1, rand1, n1, n2, temp;
		int[] m1_values, d1_d2_values;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating an array for storing the values of m1
		 */
		m1_values = new int[]{50, 100, 500, 1000};

		/**
		 * Generating a random number for selecting a value
		 */
		rand1 = mg_giveRandomInteger(0, m1_values.length - 1, random);

		/**
		 * Selecting a value for m1
		 */
		m1 = m1_values[rand1];

		/**
		 * Creating an array for names 
		 */
		String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Aditi", "Priya", "Neha", "Nisha", "Rita"};

		/**
		 * Generating a random number for selecting a random name 
		 */
		int random_index = mg_giveRandomInteger( 0, name_array.length - 1, random);

		/**
		 * Selecting a name
		 */
		String name = name_array[random_index];

		/**
		 * Storing the values in the HashMap
		 */
		result.put("name", name);	    
		result.put("max_price1", m1);

		/**
		 * Getting the answer based on values of m1 and combination of change notes
		 */
		if(m1 == 50) {										/** if m1 = 50 */

			/**
			 * Generating a random number for selecting a particular combination of change notes  
			 */
			temp = mg_giveRandomInteger(0, 2, random);

			if (temp == 0) {								/** if change notes are of values {10, 5} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{10, 5};

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 4, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 10)) / 5;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 10) {				/** if first change note is of value 10 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 5);
					result.put("answer", n2);
				} else {								/** if first change note is of value 5 */
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 10);
					result.put("answer", n1);
				}
			} else if (temp == 1) {						/** if change notes are of values {20, 5} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{20, 5};

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 2, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 20)) / 5;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 20) {							/** if first change note is of value 20 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 5);
					result.put("answer", n2);
				} else {											/** if first change note is of value 5 */
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 20);
					result.put("answer", n1);
				}
			} else {									/** if change notes are of values {20, 10} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{20, 10};

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 2, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 20)) / 10;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 20) {							/** if first change note is of value 20 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 10);
					result.put("answer", n2);
				} else {											/** if first change note is of value 10 */
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 20);
					result.put("answer", n1);
				}
			}	
		} else if(m1 == 100) {										/** if m1 = 100 */

			/**
			 * Generating a random number for selecting a particular combination of change notes  
			 */
			temp = mg_giveRandomInteger(0, 1, random);

			if (temp == 0) {										/** if change notes are of values {20, 10} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{20, 10};

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 4, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 20)) / 10;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 20) {							/** if first change note is of value 20 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 10);
					result.put("answer", n2);
				} else {											/** if first change note is of value 10 */
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 20);
					result.put("answer", n1);
				}
			} else {									/** if change notes are of values {50, 10} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{50, 10};					

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 2, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 50)) / 10;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 50) {	    			    	/** if first change note is of value 50 */			
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 10);
					result.put("answer", n2);
				} else {											/** if first change note is of value 10 */
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 50);
					result.put("answer", n1);
				}
			} 	    	
		} else if(m1 == 500) {										/** if m1 = 500 */	

			/**
			 * Generating a random number for selecting a particular combination of change notes  
			 */
			temp = mg_giveRandomInteger(0, 2, random);

			if (temp == 0) {										/** if change notes are of values {50, 10} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{50, 10};			

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 9, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 50)) / 10;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 50) {	    			   		/** if first change note is of value 50 */	
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 10);
					result.put("answer", n2);
				} else {	    			   						/** if first change note is of value 10 */
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 50);
					result.put("answer", n1);
				}
			} else if (temp == 1) {									/** if change notes are of values {100, 10} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{100, 10};						

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 4, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 100)) / 10;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 100) {	    					/** if first change note is of value 100 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 10);
					result.put("answer", n2);
				} else {											/** if first change note is of value 10 */					
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 100);
					result.put("answer", n1);
				}
			} else {									/** if change notes are of values {100, 50} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{100, 50};					

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 4, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 100)) / 50;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 100) {								/** if first change note is of value 100 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 50);
					result.put("answer", n2);
				} else {												/** if first change note is of value 50 */		
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 100);
					result.put("answer", n1);
				}
			} 	    	
		} else {											/** if m1 = 1000 */

			/**
			 * Generating a random number for selecting a particular combination of change notes  
			 */
			temp = mg_giveRandomInteger(0, 2, random);

			if (temp == 0) {											/** if change notes are of values {100, 50} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{100, 50};

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Generating a random number for n1
				 */
				n1 = mg_giveRandomInteger(1, 9, random);

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 100)) / 50;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 100) {								/** if first change note is of value 100 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 50);
					result.put("answer", n2);
				} else {												/** if first change note is of value 50 */
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 100);
					result.put("answer", n1);
				}
			} else if (temp == 1) {										/** if change notes are of values {500, 50} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{500, 50};

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Assigning a value to n1
				 */
				n1 = 1;

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 500)) / 50;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 500) {								/** if first change note is of value 500 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 50);
					result.put("answer", n2);
				} else {												/** if first change note is of value 50 */					
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 500);
					result.put("answer", n1);
				}
			} else {										/** if change notes are of values {500, 100} is the answer */

				/**
				 * Storing the values of change notes in an array
				 */
				d1_d2_values = new int[]{500, 100};						

				/**
				 * Generating a random number for selecting a value of change note
				 */
				int rand2 = mg_giveRandomInteger(0, d1_d2_values.length - 1, random);

				/**
				 * Selecting a value 
				 */
				d1_or_d2_value = d1_d2_values[rand2];

				/**
				 * Assigning a value to n1
				 */
				n1 = 1;

				/**
				 * Calculating the value of n2
				 */
				n2 = (m1 - (n1 * 500)) / 100;

				/**
				 * Storing the above values in the HashMap
				 */
				if(d1_or_d2_value == 500) {								/** if first change note is of value 500 */
					result.put("number", n1);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 100);
					result.put("answer", n2);
				} else {												/** if first change note is of value 100 */		
					result.put("number", n2);
					result.put("denomination1", d1_or_d2_value);
					result.put("denomination2", 500);
					result.put("answer", n1);
				}
			} 	    	
		}

		/**
		 * Returning the value of pronoun to the HashMap
		 */
		if(random_index < 5) {
			result.put("pronoun", "he");
		} else {
			result.put("pronoun", "she");
		}

		result.put("pronoun_in_sentence_case", toTitleCase(result.get("pronoun").toString()));

		/**
		 * Return the HashMap with name, m1, pronoun, pronoun in sentence case, n1 or n2, d1, d2, answer
		 */ 
		return result;  
	}

	/**
     @name mg_get_multiples_and_factors_with_factor_multiplications()
	 @description Gets the problem set data containing answer of the missing factor from all the factors of a random number.
	 @param level - int - Chooses a level. Value is 1 (only for this function).  
	 @param display_list - boolean - If true, displays the list of all multiplication factors.                           
	 @return HashMap (n1, question ArrayList, answer ArrayList, list of factor multiplications)
	 */
	public static Map<String, Object> mg_get_multiples_and_factors_with_factor_multiplications(int level, boolean display_list) {

		/**
		 * Declaring the variables
		 */
		int n1;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>(); 

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 20, random); 	
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(21, 50, random);
		} else {
			n1 = mg_giveRandomInteger(21, 100, random);
		}

		/**
		 * Creating ArrayLists for question and answer 
		 */
		ArrayList <String> question_arraylist = new ArrayList<>();
		ArrayList <Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Calculating the factors for the random number and storing them in the ArrayLists
		 */
		for(int ii=1; ii<=n1; ii++) {
			if(n1 % ii == 0) {
				question_arraylist.add(Integer.toString(ii));
				answer_arraylist.add(ii);
			}
		}

		/**
		 * Calculating the number of input fields based on the size of answer ArrayList 
		 */
		int num_blanks;
		if(answer_arraylist.size() <= 4) {
			num_blanks = 1;
		} else {
			num_blanks = 2;
		}

		/**
		 * Storing the input fields in the question ArrayList
		 */
		ArrayList<Integer> temp2 = new ArrayList<>();
		int temp1;
		do{
			temp1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);		
			if(!mg_containsInArray(temp2, temp1)) {
				temp2.add(temp1);
				question_arraylist.remove(temp1);
				question_arraylist.add(temp1, "::blank::");				
			}
		} while(temp2.size() < num_blanks);

		/**
		 * Creating an ArrayLst for storing the list of all the factor multiplications
		 */
		int temp3;
		ArrayList<String> factor_multiplications = new ArrayList<>();
		if(display_list == true) {
			for(int ii=0; ii<answer_arraylist.size(); ii++) {
				temp3 = n1 / answer_arraylist.get(ii);
				factor_multiplications.add(Integer.toString(answer_arraylist.get(ii)).concat(" x ").concat(Integer.toString(temp3)));
			}
		}

		/**
		 * Storing the values of n1, answer ArrayList, question ArrayList, and list of factor multiplications in the HashMap
		 */
		result.put("number", n1);
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);
		result.put("factor_multiplications", factor_multiplications);

		/**
		 * Return the HashMap with n1, question ArrayList, answer ArrayList, list of factor multiplications
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiples_and_factors_without_factor_multiplications()
	 @description Gets the problem set data containing answer of the missing factor from all the factors of a random number.
	 @param level - int - Chooses a level. Values are 1, 2, or 3.                             
	 @return HashMap (n1, question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_multiples_and_factors_without_factor_multiplications(int level) {

		Map<String, Object> result = mg_get_multiples_and_factors_with_factor_multiplications(level, false);
		result.remove("factor_multiplications");

		/**
		 * Return the HashMap with n1, question ArrayList, answer ArrayList
		 */ 
		return result;
	}

	/**
     @name mg_get_multiples_and_factors_divisible_by_2_5_10()
	 @description Gets the problem set data identifying whether n1 is divisible by/ a multiple of d1 or not.
	 @param level - int - Chooses a level. Values are 1, 2 or 3.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                           
	 @return HashMap (n1, parameter value, d1, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiples_and_factors_divisible_by_2_5_10(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, d1;
		String parameter_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>(); 

		/**
		 * Creating an array containing d1 values
		 */
		int[] d1_values = {2, 5, 10};

		int rand1, rand2;
		/**
		 * Generating a random value for d1
		 */
		rand1 = mg_giveRandomInteger(0, 2, random);

		/**
		 * Selecting a value for d1
		 */
		d1 = d1_values[rand1];

		/**
		 * Generating a random value for n1
		 */
		rand2 = mg_giveRandomInteger(0, 1, random);
		if(level == 1) {
			if(rand2 == 0) {
				n1 = d1 * mg_giveRandomInteger(2, 20, random);
			} else {
				n1 = d1 * mg_giveRandomInteger(2, 20, random) + mg_giveRandomInteger(1, d1 - 1, random);
			}
		} else if(level == 2) {
			if(rand2 == 0) {
				n1 = d1 * mg_giveRandomInteger(21, 1000, random);
			} else {
				n1 = d1 * mg_giveRandomInteger(21, 1000, random) + mg_giveRandomInteger(1, d1 - 1, random);
			}
		} else {
			if(rand2 == 0) {
				n1 = d1 * mg_giveRandomInteger(1001, 100000, random);
			} else {
				n1 = d1 * mg_giveRandomInteger(1001, 100000, random) + mg_giveRandomInteger(1, d1 - 1, random);
			}
		}

		/**
		 * Creating an array for storing parameter values
		 */
		String[] parameter_values = {"divisible by", "a multiple of"};
		/**
		 * Generating a random number for selecting a parameter value 
		 */
		int rand3 = mg_giveRandomInteger(0, 1, random);

		/**
		 * Selecting a parameter value
		 */
		parameter_value = parameter_values[rand3];

		/**
		 * Obtaining the answer		
		 */
		if(n1 % d1 == 0) {
			result.put("answer", "Yes");
		} else {
			result.put("answer", "No");
		}

		/**
		 * Storing the values of n1, parameter_value and d1 in the HashMap
		 */
		result.put("number", n1);
		result.put("parameter_value", parameter_value);
		result.put("divisor", d1);

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<String> mcq_option = new ArrayList<String>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Yes");
			mcq_option.add("No");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, parameter value, d1, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiples_and_factors_divisible_by_any_other_number_upto_20()
	 @description Gets the problem set data identifying whether n1 is divisible by/ a multiple of d1 or not.
	 @param level - int - Chooses a level. Values are 1, 2 or 3.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                           
	 @return HashMap (n1, parameter value, d1, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiples_and_factors_divisible_by_any_other_number_upto_20(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, d1;
		String parameter_value;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>(); 

		int rand1, rand2;

		/**
		 * Generating a random value for d1
		 */
		rand1 = mg_giveRandomInteger(0, 2, random);

		/**
		 * Generating a random number for half probability of n1
		 */
		rand2 = mg_giveRandomInteger(0, 1, random);
		if(level == 1) {

			/**
			 * Creating an array containing d1 values
			 */
			int[] d1_values = {3, 4, 6, 7, 8, 9};

			/**
			 * Selecting a value for d1
			 */
			d1 = d1_values[rand1];    
		} else if(level == 2) {

			/**
			 * Generating a random value for d1
			 */
			d1 = mg_giveRandomInteger(11, 20, random);
		} else {

			/**
			 * Generating a random value for d1
			 */
			d1 = mg_giveRandomInteger(11, 20, random);
		}

		/**
		 * Generating a random value for n1
		 */
		if(rand2 == 0) {
			n1 = d1 * mg_giveRandomInteger(2, 20, random);
		} else {
			n1 = d1 * mg_giveRandomInteger(2, 20, random) + mg_giveRandomInteger(1, d1 - 1, random);
		}

		/**
		 * Creating an array for storing parameter values
		 */
		String[] parameter_values = {"divisible by", "a multiple of"};
		/**
		 * Generating a random number for selecting a parameter value 
		 */
		int rand3 = mg_giveRandomInteger(0, 1, random);

		/**
		 * Selecting a parameter value
		 */
		parameter_value = parameter_values[rand3];

		/**
		 * Obtaining the answer		
		 */
		if(n1 % d1 == 0) {
			result.put("answer", "Yes");
		} else {
			result.put("answer", "No");
		}

		/**
		 * Storing the values of n1, parameter_value and d1 in the HashMap
		 */
		result.put("number", n1);
		result.put("parameter_value", parameter_value);
		result.put("divisor", d1);

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<String> mcq_option = new ArrayList<String>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Yes");
			mcq_option.add("No");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, parameter value, d1, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiples_and_factors_identifying_whether_the_random_number_is_prime_or_composite()
	 @description Gets the problem set data identifying whether n1 is a prime or composite number.
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                           
	 @return HashMap (n1, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiples_and_factors_identifying_whether_the_random_number_is_prime_or_composite(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>(); 

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 100, random);
		} else {
			n1 = mg_giveRandomInteger(101, 200, random);
		}	

		/**
		 * Storing the value of n1 in the HashMap
		 */
		result.put("number", n1);

		/**
		 * Creating ArrayLists for storing the factors of n1 
		 */
		ArrayList <Integer> n1_factors = new ArrayList<>();

		/**
		 * Calculating the factors for n1 and storing them in the ArrayLists
		 */
		for(int ii=1; ii<=n1; ii++) {
			if(n1 % ii == 0) {
				n1_factors.add(ii);
			}
		}

		/**
		 * Obtaining the answer
		 */
		if(n1_factors.size() == 2) {
			result.put("answer", "Prime");
		} else {
			result.put("answer", "Composite");
		}

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<String> mcq_option = new ArrayList<String>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Prime");
			mcq_option.add("Composite");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiples_and_factors_identifying_co_prime_pairs()
	 @description Gets the problem set data identifying whether n1 and n2 is a co-prime pair or not.
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                           
	 @return HashMap (n1, n2, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiples_and_factors_identifying_co_prime_pairs(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>(); 

		/**
		 * Generating a random value for n1
		 */
		if(level == 1) {
			do{
				n1 = mg_giveRandomInteger(1, 100, random);
			} while(n1 % 2 != 0);
			do{
				n2 = mg_giveRandomInteger(1, 100, random);
			} while(n2 == n1 || n2 % 2 != 0);
		} else if(level == 2) {
			do{
				n1 = mg_giveRandomInteger(1, 100, random);
			} while(mg_checkPrimeNumber(n1) == false);
			do{
				n2 = mg_giveRandomInteger(1, 100, random);
			} while(n2 == n1 || mg_checkPrimeNumber(n2) == false);
		} else if(level == 3) {
			do{
				n1 = mg_giveRandomInteger(1, 100, random);
			} while(mg_checkPrimeNumber(n1) == false);
			do{
				n2 = mg_giveRandomInteger(1, 100, random);
			} while(n2 == n1 || mg_checkPrimeNumber(n2) == true);
		} else {
			do{
				n1 = mg_giveRandomInteger(1, 100, random);
			} while(n1 % 2 == 0);
			do{
				n2 = mg_giveRandomInteger(1, 100, random);
			} while(n2 == n1 || mg_checkPrimeNumber(n2) == true);
		}	

		/**
		 * Storing the values of n1 and n2 in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);

		/**
		 * Creating ArrayLists for storing the factors of n1 and n2 
		 */
		ArrayList <Integer> n1_factors = new ArrayList<>();
		ArrayList <Integer> n2_factors = new ArrayList<>();

		/**
		 * Calculating the factors for n1 and storing them in the ArrayLists
		 */
		for(int ii=1; ii<=n1; ii++) {
			if(n1 % ii == 0) {
				n1_factors.add(ii);
			}
		}

		/**
		 * Calculating the factors for n2 and storing them in the ArrayLists
		 */
		for(int ii=1; ii<=n2; ii++) {
			if(n2 % ii == 0) {
				n2_factors.add(ii);
			}
		}

		/**
		 * Finding the total number of common elements in both the ArrayLists 
		 */
		int count = 0;
		for(int i=0;i<n1_factors.size();i++) {
			if(n2_factors.contains(n1_factors.get(i))) {
				count++;
			}
		}

		/**
		 * Obtaining the answer based on count
		 */
		if(count == 1) {
			result.put("answer", "Yes");
		} else {
			result.put("answer", "No");
		}

		/**
		 * Creating the mcq options
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList
			 */
			ArrayList<String> mcq_option = new ArrayList<String>();

			/**
			 * Storing the mcq options in the ArrayList
			 */
			mcq_option.add("Yes");
			mcq_option.add("No");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with n1, n2, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_counting_groups_and_objects_per_group()
    @description Gets the problem set data containing the number of groups, objects in each group, and total number of objects
    @param level - int - choosing a level      
    @return HashMap (number of groups, number of objects in each group, total number of objects, image name, image title, image url)
	 */
	public static Map<String, Object> mg_get_multiplication_counting_groups_and_objects_per_group(int level) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;  

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating first and second random numbers 
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(2, 5, random);
			n2 = mg_giveRandomInteger(2, 5, random);
		} else {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);
		}

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap 
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer1", n1);
		result.put("answer2", n2);
		result.put("answer3", answer);

		/**
		 * Array of images 
		 */
		String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random image 
		 */
		int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

		/**
		 * Returning the image to the HashMap  
		 */
		result.put("image", images[random_index].concat(".png") );
		result.put("object_name", images[random_index] );

		/**
		 * Return the HashMap with number of groups, number of objects in each group, total number of objects, image name, image title, image url
		 */
		return result;
	} 

	/**
    @name mg_get_multiplication_of_two_numbers_with_relating_multiplication_to_addition_with_images()
    @description Gets the problem set data for multiplication of 2 numbers and displays the output in the form of an image 
    @param mcq - boolean - Multiple choice options required true / false - default is false                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, image, image_title, image_url, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_relating_multiplication_to_addition_with_images(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer;  

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating first and second random numbers 
		 */
		if(level == 2) {
			n1 = mg_giveRandomInteger(2, 10, random);
			n2 = mg_giveRandomInteger(2, 10, random);
		} else {
			n1 = mg_giveRandomInteger(2, 5, random);
			n2 = mg_giveRandomInteger(2, 5, random);
		}

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap 
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("number3", answer);
		result.put("answer", n1);

		/**
		 * Array of images 
		 */
		String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random image 
		 */
		int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

		/**
		 * Returning the image to the HashMap  
		 */
		result.put("image", images[random_index] + ".png" );
		result.put("object_name", images[random_index] );

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(2, 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number, image, image_title, image_url, ArrayList of mcq options
		 */
		return result;
	} 

	/**
    @name mg_get_multiplication_tables_non_assisted()
    @description Gets the problem set data for table of a number 
    @param max_limit - int - maximum limit of the table - default is 10                        
    @return HashMap (first number, multiplication table of the given number)
	 */
	public static Map<String, Object> mg_get_multiplication_tables_non_assisted(int max_limit) {

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating a random number 
		 */
		int n1 = mg_giveRandomInteger(1, 10, random);

		/**
		 * ArrayList for storing the values of multiplication 
		 */
		ArrayList<Integer> table = new ArrayList<>();
		for(int i=1; i<=max_limit; i++){
			int answer= n1 * i;
			table.add(answer);	
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of the random number and table of that number in the HashMap 
		 */
		result.put("number", n1);
		result.put("answer", table); 

		/**
		 * Return the HashMap with first number, multiplication table of the given number
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_filling_number_in_series()
    @description Gets the problem set data for table of a number and replace a position randomly by an input field 
    @param max_limit - int - maximum limit of the table - default is 10
    @param level - int - choosing a level                        
    @return HashMap (multiplication table of the given number that contains input field (or fields) at random location within the table)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_filling_number_in_series(int max_limit, int level) {

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating a random number
		 */
		int n1 = mg_giveRandomInteger(2, 10, random);

		/**
		 * Generating multiplication table of a number	
		 */
		String table_array [] = new String[20];
		String answer_array [] = new String[20];
		int temp;
		for(int i=0; i<max_limit; i++) {
			temp = n1 * (i + 1);
			table_array[i] = Integer.toString(temp);
			answer_array[i] = Integer.toString(temp);
		}

		/**
		 * Creating a blank space (or input field) randomly inside the table of a given number
		 */
		int random_number_1, random_number_2, random_number_3, random_number_4;

		/**
		 * Generating random numbers for blank places at random index positions
		 */
		random_number_1 = mg_giveRandomInteger(0, max_limit - 1, random);

		do{
			random_number_2 = mg_giveRandomInteger(0, max_limit - 1, random);
		}while (random_number_2 == random_number_1);

		do{
			random_number_3 = mg_giveRandomInteger(0, max_limit - 1, random);
		}while (random_number_3 == random_number_1 || random_number_3 == random_number_2);

		do{
			random_number_4 = mg_giveRandomInteger(0, max_limit - 1, random);
		}while (random_number_4 == random_number_1 || random_number_4 == random_number_2 || random_number_4 == random_number_3);

		if(level == 1) {        							/** Creating a single blank place in the table */
			table_array[random_number_1] = "::blank::";
		} else if (level == 2) {        					/** Creating 2 blank places in the table */
			table_array[random_number_1] = "::blank::";
			table_array[random_number_2] = "::blank::";
		} else if (level == 3) {							/** Creating 3 blank places in the table */
			table_array[random_number_1] = "::blank::";
			table_array[random_number_2] = "::blank::";
			table_array[random_number_3] = "::blank::";
		} else {											/** Creating 4 blank places in the table */
			table_array[random_number_1] = "::blank::";
			table_array[random_number_2] = "::blank::";
			table_array[random_number_3] = "::blank::";
			table_array[random_number_4] = "::blank::";
		}

		/**
		 * ArrayList for storing the values of multiplication 
		 */
		ArrayList<String> table = new ArrayList<>();
		for(int i=0; i<max_limit; i++){
			table.add(table_array[i]);	
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of table of a number along with random input fields in the HashMap 
		 */
		result.put("number", n1);
		result.put("question_array", table);
		result.put("answer_array", answer_array);

		/**
		 * Return the HashMap with multiplication table of a number along with the input field( or fields)
		 */
		return result;
	}

	/**
    @name mg_get_multiplication_of_two_numbers_upto_200_multiplication_facts()
    @description Gets the problem set data for multiplication of 2 numbers
    @param level - int - Chooses a level. Values are 1 or 2.
    @param format_selection - int - chooses a format for displaying the question and answer from the 5 choices                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, different format of the answer)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_upto_200_multiplication_facts(int level) {

		/**
		 * Declaring the variables
		 */
		int n1, n2, answer, format_selection;  

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating first and second random numbers 
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} else {
			n1 = mg_giveRandomInteger(11, 20, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		}

		format_selection = mg_giveRandomInteger(1, 5, random);

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * mg_converting the value of n2 in words 
		 */     
		String number2_words = mg_convert(n2);

		/**
		 * Storing the values of n1, n2, and answer in the HashMap 
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Storing answer as per the selected format in the HashMap 
		 */ 
		if(format_selection == 1) {	
			result.put("question", Integer.toString(n1).concat(" x ").concat(Integer.toString(n2)).concat(" = ").concat(" ::blank:: "));    	  
		} else if(format_selection == 2) {
			result.put("question", Integer.toString(n1).concat(" times ").concat(Integer.toString(n2)).concat(" = ").concat(" ::blank:: ")); 
		} else if(format_selection == 3) {
			result.put("question", Integer.toString(n1).concat(" ").concat(number2_words).concat("s").concat(" are ").concat(" ::blank:: "));
		} else if(format_selection == 4) {
			result.put("question", "Solve");
		} else {
			result.put("question", "What is the product of ".concat(Integer.toString(n1)).concat(" and ").concat(Integer.toString(n2)).concat(" ? ").concat(" ::blank:: "));
		}

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number, answer of multiplication as per the selected format, mcq
		 */ 
		return result; 
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_one_number_as_zero()
    @description Gets the problem set data for multiplication of 2 numbers where one of the two numbers is a zero 
    @param level - int - Chooses a level. Values are 1,2 or 3.                      
    @param mcq - boolean - Multiple choice options required true / false - default is false
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_one_number_as_zero(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, answer;  

		/**
		 * Initializing random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating a random number for making either of the two operands a zero
		 */
		int rand1 = mg_giveRandomInteger(0,1, random);

		if(level == 1) {

			if(rand1 == 0) {			/** n1 is assigned 0 */
				n1 = 0;
				n2 = mg_giveRandomInteger(1, 10, random);
			} else {					/** n2 is assigned 0 */	
				n1 = mg_giveRandomInteger(1, 10, random);
				n2 = 0;
			}

		} else if(level == 2) {

			if(rand1 == 0) {			/** n1 is assigned 0 */
				n1 = 0;
				n2 = mg_giveRandomInteger(11, 100, random);
			} else {					/** n2 is assigned 0 */	
				n1 = mg_giveRandomInteger(11, 100, random);
				n2 = 0;
			}

		} else {

			if(rand1 == 0) {			/** n1 is assigned 0 */
				n1 = 0;
				n2 = mg_giveRandomInteger(101, 10000, random);
			} else {					/** n2 is assigned 0 */	
				n1 = mg_giveRandomInteger(101, 10000, random);
				n2 = 0;
			}
		}

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap 
		 */     
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(1, 10).toArray();

			} else if(level == 2) {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(11, 100).toArray();

			} else {

				/**
				 * Generating remaining mcq options within the calculated range
				 */
				array = IntStream.rangeClosed(101, 10000).toArray();

			} 

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number, ArrayList of mcq options
		 */ 
		return result; 
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_tens()
    @description Gets the problem set data for multiplication of 2 numbers where number(or numbers) are of 2-digits
    @param level - int - Chooses a level. Values are 1 or 2. If 1, then first number is of 1-digit and second number is a 2-digits number. If 2, then first and second number will be of 2-digits.                          
    @param mcq - boolean - Multiple choice options required true / false - default is false
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_tens(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, answer;  

		/**
		 * Initializing random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating first and second random number
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 9, random);
			n2 = 10 * mg_giveRandomInteger(1, 9, random);
		} else {
			n1 = 10 * mg_giveRandomInteger(1, 9, random);
			n2 = 10 * mg_giveRandomInteger(1, 9, random);
		}

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap 
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */ 
			mcq_option.add(answer); 

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if (level == 1) {

				if((answer - 50) <= 10) {
					mcq_lower_limit = 10;  
				} else {
					mcq_lower_limit = answer - 50;
				}

				if((answer + 50) >= 810) {
					mcq_upper_limit = 810;  
				} else {
					mcq_upper_limit = answer + 50;
				}

			} else {

				if((answer - 500) <= 100) {
					mcq_lower_limit = 100;  
				} else {
					mcq_lower_limit = answer - 500;
				}

				if((answer + 500) >= 8100) {
					mcq_upper_limit = 8100;  
				} else {
					mcq_upper_limit = answer + 500;
				}
			} 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that the remaining mcq options are multiples of 10 or 100
			 */
			int a = 0, b = 0;
			for(int u : array) {
				if(level == 1) {
					a = u / 10;
					b = a * 10; 
				} else {
					a = u / 100;
					b = a * 100; 
				}

				/**
				 * Ensuring that no 2 options are the same
				 */
				if(!mg_containsInArray(mcq_option,b) && mcq_option.size() < 4) {
					mcq_option.add(b);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the remaining the mcq options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number, ArrayList of mcq options
		 */ 
		return result; 
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_hundreds()
    @description Gets the problem set data for multiplication of 2 numbers 
    @param level - int - Chooses a level. Values are 1, 2 or 3. If 1, then first number is of 1- digit and second number is a 3-digits number. If 2, then first number is of 2-digits and second number is of 3-digits and if 3, then first number is of 3-digits and second number is also of 3-digits                          
    @param mcq - boolean - Multiple choice options required true / false - default is false
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_hundreds(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, answer;  

		/**
		 * Initializing the random generator
		 */
		Random random = new Random(); 

		/**
		 * Generating first and second random number
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 9, random);
			n2 = 100 * mg_giveRandomInteger(1, 9, random);
		} else if(level == 2) {
			n1 = 10 * mg_giveRandomInteger(1, 9, random);
			n2 = 100 * mg_giveRandomInteger(1, 9, random);
		} else {
			n1 = 100 * mg_giveRandomInteger(1, 9, random);
			n2 = 100 * mg_giveRandomInteger(1, 9, random);
		}

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, and answer in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */ 
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(level == 1) {

				if((answer - 500) <= 100) {
					mcq_lower_limit = 100;  
				} else {
					mcq_lower_limit = answer - 500;
				}

				if((answer + 500) >= 8100) {
					mcq_upper_limit = 8100;  
				} else {
					mcq_upper_limit = answer + 500;
				}

			} else if(level == 2) {

				if((answer - 5000) <= 1000) {
					mcq_lower_limit = 1000;  
				} else {
					mcq_lower_limit = answer - 5000;
				}

				if((answer + 5000) >= 81000) {
					mcq_upper_limit = 81000;  
				} else {
					mcq_upper_limit = answer + 5000;
				}

			} else {

				if((answer - 50000) <= 10000) {
					mcq_lower_limit = 10000;  
				} else {
					mcq_lower_limit = answer - 50000;
				}

				if((answer + 50000) >= 810000) {
					mcq_upper_limit = 810000;  
				} else {
					mcq_upper_limit = answer + 50000;
				} 
			}

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring the remaining mcq options are multiples of 100, 1000 or 10000
			 */
			int a = 0, b = 0;
			for(int u : array){  
				if(level == 1) {
					a = u / 100;
					b = a * 100;
				} else if(level == 2) {
					a = u / 1000;
					b = a * 1000;
				} else {
					a = u / 10000;
					b = a * 10000;
				} 

				/**
				 * Ensuring that no 2 options are the same
				 */
				if(!mg_containsInArray(mcq_option, b) && mcq_option.size() < 4) {
					mcq_option.add(b);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the mcq options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number, ArrayList of mcq options
		 */ 
		return result; 
	}

	/**
     @name mg_get_multiplication_of_two_numbers_assisted_format()
     @description Gets the problem set data for multiplication of 2 numbers      
     @param mcq - boolean - Multiple choice options required true / false - default is false
     @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_assisted_format(boolean mcq) {

		/**
		 * Declaring and initializing the variables
		 */
		int n1 = 0, n2 = 0, answer = 0; 

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		n1 = 7;

		/**
		 * Generating the second random number  
		 */
		n2 = mg_giveRandomInteger(2, 10, random);

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, answer, n1_related, n2_related, and answer_related in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList	
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(2, 10).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u * 7) && mcq_option.size() < 4) {
					mcq_option.add(u * 7);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 *  Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_addition_and_multiplication_operation()
    @description Gets the problem set data for multiplication of 2 numbers      
    @return HashMap (first random number, second random number, multiplication of the two random numbers, blanks for addition format, ArrayList for values of blanks in addition format, blanks for multiplication format, ArrayList for values of blanks in multiplication format)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_addition_and_multiplication_operation() {

		/**
		 * Declaring and initializing the variables
		 */
		int n = 0, m = 0, answer = 0; 

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the first and second random numbers  
		 */
		n = mg_giveRandomInteger(1, 10, random);
		m = mg_giveRandomInteger(1, 10, random); 

		/**
		 * Calculating the answer
		 */
		answer = n * m; 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, answer, n1_related, n2_related, and answer_related in the HashMap
		 */
		result.put("number1", n);
		result.put("number2", m);
		result.put("answer", answer);

		/**
		 * Storing blanks and values in each group for addition format within the ArrayList 
		 */
		ArrayList<Integer> answerarray = new ArrayList<Integer>();
		String blank = "::blank::";
		answerarray.add(m);
		int max_limit = n;
		for(int i=1; i< max_limit; i++) {
			blank = blank.concat(" + ::blank::");
			answerarray.add(m);
		}
		blank = blank.concat(" = ::blank::");
		answerarray.add(answer);

		/**
		 * Storing blanks for multiplication format within a String 
		 */
		String blanks_multiplication = ("::blank::").concat(" x ").concat("::blank::").concat(" = ").concat("::blank::");

		/**
		 * Storing number of groups, number of objects in each group, and the answer for multiplication format within the ArrayList 
		 */
		ArrayList<Integer> answerarray_multiplication = new ArrayList<Integer>();
		answerarray_multiplication.add(n);
		answerarray_multiplication.add(m);
		answerarray_multiplication.add(answer);

		/**
		 * returning the values to the HashMap 
		 */
		result.put("blanks_addition", blank);
		result.put("answer_addition", answerarray);
		result.put("answer_multiplication", answerarray_multiplication);
		result.put("blanks_multiplication", blanks_multiplication);

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the two random numbers, blanks for addition format, ArrayList for values of blanks in addition format, blanks for multiplication format, ArrayList for values of blanks in multiplication format
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_related_facts_with_images()
    @description Gets the problem set data for multiplication of 2 numbers and display the output as an image                            
    @return HashMap (first random number, second random number, multiplication of the two random numbers, related first number, related second number, related answer, image name, image title, image url)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_related_facts_with_images() {

		/**
		 * Declaring and initializing the variables
		 */
		int n1 = 0, n2 = 0, answer = 0; 

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the first and second random numbers  
		 */
		n1 = mg_giveRandomInteger(1, 10, random);
		n2 = mg_giveRandomInteger(1, 10, random); 

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, answer, n1_related, n2_related, and answer_related in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);
		result.put("number1_related", n2);
		result.put("number2_related", n1);
		result.put("answer_related", answer);

		/**
		 * Array of images 
		 */
		String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

		/**
		 * Generating a random number for selecting a random image 
		 */
		int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

		/**
		 * returning the image to the HashMap  
		 */
		result.put("image", images[random_index] + ".png" );
		result.put("image_title", images[random_index] );

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the two random numbers, related first number, related second number, related answer, image name, image title, image url
		 */
		return result;
	} 

	/**
    @name mg_get_multiplication_of_two_numbers_with_related_facts_without_images()
    @description Gets the problem set data for multiplication of 2 numbers 
    @param level - int - Chooses a level. Values are 1 or 2.      
    @return HashMap (first random number, second random number, multiplication of the two random numbers, related first number, related second number, related answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_related_facts_without_images(int level) {

		/**
		 * Declaring and initializing the variables
		 */
		int n1 = 0, n2 = 0, answer = 0; 

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the first and second random numbers  
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} else {
			n1 = mg_giveRandomInteger(11, 20, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} 

		/**
		 * Calculating the answer
		 */
		answer = n1 * n2; 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing the values of n1, n2, answer, n1_related, n2_related, and answer_related in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);
		result.put("number1_related", n2);
		result.put("number2_related", n1);
		result.put("answer_related", answer);      

		/**
		 * Return the HashMap with first random number, second random number, multiplication of 2 numbers, related first number, related second number, related answer
		 */
		return result;
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_related_facts_with_a_missing_number()
    @description Gets the problem set data for multiplication of 2 numbers and replace any one of the position randomly with an input field 
    @param level - int - Chooses a level. Values are 1 or 2.                        
    @return HashMap (first random number, second random number, related first number, related second number, related answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_related_facts_with_a_missing_number(int level, boolean mcq) {

		/**
		 * Declaring and initializing the variables
		 */
		int n1 = 0, n2 = 0, answer = 0; 

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the first and second random numbers  
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(1, 10, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} else {
			n1 = mg_giveRandomInteger(11, 20, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} 

		String blank = "::blank::"; /** variable for creating a blank. */ 

		/**
		 * Generating a random number for randomly selecting a blank position 
		 */
		int rand1 = mg_giveRandomInteger(1, 4, random); 

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Returning the values with a random input field
		 */
		if(rand1 == 1) {       				/** n1 on LHS will be blank */
			result.put("number1", blank);
			result.put("answer", n1);
			result.put("number2", n2);	
			result.put("number1_related", n2);
			result.put("number2_related", n1);
			answer = n1;
		} else if(rand1 == 2) {  			/** n2 on LHS will be blank */  	  
			result.put("number1", n1);
			result.put("answer", n2);
			result.put("number2", blank);
			result.put("number1_related", n2);
			result.put("number2_related", n1);
			answer = n2;
		} else if(rand1 == 3) {				/** n2 on RHS will be blank */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number1_related", blank);
			result.put("answer", n2);
			result.put("number2_related", n1);
			answer = n2;
		} else {				/** n1 on RHS will be blank */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("number2_related", blank);
			result.put("answer", n1);
			result.put("number1_related", n2);
			answer = n1;
		}

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList	
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			if(level == 1) {

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(1, 10).toArray();
			} else {

				if(rand1 == 1 || rand1 == 4) {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(11, 20).toArray();
				} else {

					/**
					 * Generating remaining mcq options within the calculated range  
					 */ 
					array = IntStream.rangeClosed(1, 10).toArray();
				}
			} 

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 *  Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, related first number, related second number, related answer, ArrayList of mcq options
		 */
		return result;
	}

	/**
    @name mg_get_multiplication_of_two_numbers_using_lattice_method_with_boxes()
    @description Gets the problem set data for multiplication of 2 numbers using lattice method 
    @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.
    @return HashMap (first random number, second random number, multiplication of 2 numbers, array containing blanks for input fields, array containing value of cells in lattice)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_using_lattice_method_with_boxes(int level) {

		/**
		 * Declaring and initializing the variables
		 */
		int random_number_1 = 0, random_number_2 = 0, num1_hundreds = 0, num1_tens = 0, num1_units = 0, num2 = 0, num2_tens = 0, num2_units = 0, temp = 0, answer = 0; 

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the first and second random numbers  
		 */
		if(level == 1) {
			random_number_1 = mg_giveRandomInteger(11, 50, random);
			random_number_2 = mg_giveRandomInteger(2, 9, random);
		} else if(level == 2) {
			random_number_1 = mg_giveRandomInteger(11, 50, random);
			random_number_2 = mg_giveRandomInteger(11, 50, random);
		} else if(level == 3) {
			random_number_1 = mg_giveRandomInteger(11, 99, random);
			random_number_2 = mg_giveRandomInteger(11, 99, random);
		} else if(level == 4) {
			random_number_1 = mg_giveRandomInteger(101, 999, random);
			random_number_2 = mg_giveRandomInteger(2, 9, random);
		} else {
			random_number_1 = mg_giveRandomInteger(101, 999, random);
			random_number_2 = mg_giveRandomInteger(11, 99, random);
		}

		/**
		 * Calculating values for columns and rows of lattice 
		 */
		if(level == 1) {
			temp = random_number_1 / 10;
			num1_tens = temp * 10;
			num1_units = random_number_1 % 10;
			num2 = random_number_2 ;
		} else if(level == 2 || level == 3) {
			temp = random_number_1 / 10;
			num1_tens = temp * 10;
			num1_units = random_number_1 % 10;
			temp = random_number_2 / 10;
			num2_tens = temp * 10;
			num2_units = random_number_2 % 10;
		} else if(level == 4) {
			temp = random_number_1 / 100;
			num1_hundreds = temp * 100;
			num1_tens = ((random_number_1 % 100) / 10) * 10;
			num1_units = random_number_1 % 10;
			num2 = random_number_2;
		}  else {
			temp = random_number_1 / 100;
			num1_hundreds = temp * 100;
			num1_tens = ((random_number_1 % 100) / 10) * 10;
			num1_units = random_number_1 % 10;
			num1_tens = (random_number_2 / 10 ) * 10;
			num2_units = random_number_2 % 10;
		}

		/**
		 * Creating the HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Calculating the answer 
		 */
		answer = random_number_1 * random_number_2;

		if(level == 1) {

			/**
			 * Declaring two dimensional array for blanks 
			 */
			String[][] blank_array = {{"x", "::blank::", "::blank::"}, {"::blank::", "::blank::", "::blank::"}};

			/**
			 *  Declaring two dimensional array for storing values of multiplication 
			 */
			int[][] answer_array = {{0, num1_tens, num1_units}, {num2, num2 * num1_tens, num2 * num1_units}};

			/**
			 * Storing values in the HashMap  
			 */
			result.put("question_array", blank_array);
			result.put("answer_array", answer_array);

		} else if(level == 2 || level == 3) {

			/**
			 * Declaring two dimensional array for blanks 
			 */
			String[][] blank_array = {{"x", "::blank::", "::blank::"}, {"::blank::", "::blank::", "::blank::"}, {"::blank::", "::blank::", "::blank::"}};

			/**
			 * Declaring two dimensional array for storing values of multiplication 
			 */
			int[][] answer_array = {{0, num1_tens, num1_units}, {num2_tens, num1_tens * num2_tens, num2_tens * num1_units}, {num2_units, num2_units * num1_tens, num2_units * num1_units}};

			/**
			 * Storing values in the HashMap  
			 */
			result.put("question_array", blank_array);
			result.put("answer_array", answer_array);

		} else if(level == 4) {

			/**
			 * Declaring two dimensional array for blanks 
			 */
			String[][] blank_array = {{"x", "::blank::", "::blank::", "::blank::"}, {"::blank::", "::blank::", "::blank::", "::blank::"}};

			/**
			 * Declaring two dimensional array for storing values of multiplication 
			 */
			int[][] answer_array = {{0, num1_hundreds, num1_tens, num1_units}, {num2, num2 * num1_hundreds, num2 * num1_tens, num2 * num1_units}};

			/**
			 * Storing values in the HashMap  
			 */
			result.put("question_array", blank_array);
			result.put("answer_array", answer_array);

		} else {

			/**
			 * Declaring two dimensional array for blanks 
			 */
			String[][] blank_array = {{"x", "::blank::", "::blank::", "::blank::"}, {"::blank::", "::blank::", "::blank::", "::blank::"}, {"::blank::", "::blank::", "::blank::", "::blank::"}};

			/**
			 * Declaring two dimensional array for storing values of multiplication 
			 */
			int[][] answer_array = {{0, num1_hundreds, num1_tens, num1_units}, {num2_tens, num2_tens * num1_hundreds, num2_tens * num1_tens, num2_tens * num1_units}, {num2_units, num2_units * num1_hundreds, num2_units * num1_tens, num2_units * num1_units}};

			/**
			 * Storing values in the HashMap  
			 */
			result.put("question_array", blank_array);
			result.put("answer_array", answer_array);
		}

		/**
		 * Storing values of first random number, second random number, and answer in the HashMap
		 */
		result.put("number1", random_number_1);
		result.put("number2", random_number_2);
		result.put("answer", answer);

		/**
		 * Return the HashMap with first random number, second random number, multiplication of 2 numbers, array containing blanks for input fields, array containing value of cells in lattice 
		 */
		return result;
	}

	/**
    @name mg_get_multiplication_of_two_numbers_using_lattice_method_without_boxes()
    @description Gets the problem set data for multiplication of 2 numbers using lattice method 
    @param level - int - Chooses a level. Values are 1, 2, 3 or 4.
    @param mcq - boolean - Multiple choice options required true / false - default is false
    @return HashMap (first random number, second random number, multiplication of 2 numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_using_lattice_method_without_boxes(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */ 
		int n1 = 0, n2 = 0, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random numbers
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(11, 50, random);
			n2 = mg_giveRandomInteger(2, 10, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(11, 50, random);
			n2 = mg_giveRandomInteger(11, 50, random);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(11, 99, random);
			n2 = mg_giveRandomInteger(11, 99, random);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger(101, 999, random);
			n2 = mg_giveRandomInteger(2, 9, random);
		} else {
			n1 = mg_giveRandomInteger(101, 999, random);
			n2 = mg_giveRandomInteger(11, 99, random);
		}

		/**
		 * Calculating the answer
		 */ 
		answer = n1 * n2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList	
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(level == 1) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 5) <= 11) {
					mcq_lower_limit = 11;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */ 
				if((answer + 5) >= 990) {
					mcq_upper_limit = 990;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 2) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 5) <= 121) {
					mcq_lower_limit = 121;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 5) >= 9801) {
					mcq_upper_limit = 9801;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 3) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 5) <= 202) {
					mcq_lower_limit = 202;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 5) >= 8991) {
					mcq_upper_limit = 8991;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 4) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 5) <= 1111) {
					mcq_lower_limit = 1111;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 5) >= 98901) {
					mcq_upper_limit = 98901;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}  else {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 5) <= 1111) {
					mcq_lower_limit = 1111;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 5) >= 98901) {
					mcq_upper_limit = 98901;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 *  Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random numbers (the answer), ArrayList of mcq options
		 */
		return result;
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_one_digit_and_two_digits()
    @description Gets the problem set data for multiplication of 2 numbers
    @param mcq - boolean - Multiple choice options required true / false - default is false                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_one_digit_and_two_digits(boolean mcq) {

		/**
		 * Declaring the variables
		 */ 
		int t1, u1, u2, random_number_1, random_number_2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the tens and units digits for the first random number. Also, generating units digit for the second random number.
		 */
		u2 = mg_giveRandomInteger(2, 4, random);  
		t1 = mg_giveRandomInteger(1, 6 - u2, random); 
		u1 = mg_giveRandomInteger(1, 6 - u2, random); 

		/**
		 * Generating the first two-digits number
		 */ 
		random_number_1 = ((t1) * 10)+ u1;

		/**
		 * Generating the second two-digits number
		 */ 
		random_number_2 = u2;

		/**
		 * Calculating the result
		 */ 
		answer = random_number_1 * random_number_2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", random_number_1);
		result.put("number2", random_number_2);
		result.put("answer", answer);
		/**result.put("answer_tens", answer/10);
           result.put("answer_units", answer%10);*/

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			/**
			 * Calculating the lower limit and upper limit for remaining mcq options  
			 */ 
			int mcq_lower_limit, mcq_upper_limit;
			if((answer - 10) <= 22) {
				mcq_lower_limit = 22;  
			} else {
				mcq_lower_limit = answer - 10;
			}

			if((answer + 10) >= 99) {
				mcq_upper_limit = 99;  
			} else {
				mcq_upper_limit = answer + 10;
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number (the answer), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_one_digit_and_three_digits()
    @description Gets the problem set data for multiplication of 2 numbers
    @param mcq - boolean - Multiple choice options required true / false - default is false                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_one_digit_and_three_digits(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int h1, t1, u1, u2, random_number_1, random_number_2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating hundreds, tens, and units digit for the first random number. Also, generating units digit for second random number.
		 */
		u2 = mg_giveRandomInteger(2, 4, random);  
		h1 = mg_giveRandomInteger(1, 6 - u2, random); 
		t1 = mg_giveRandomInteger(1, 6 - u2, random); 
		u1 = mg_giveRandomInteger(1, 6 - u2, random); 

		/**
		 * Generating the first two-digits number
		 */ 
		random_number_1 = ((h1) * 100) + ((t1) * 10) + u1;

		/**
		 * Generating the second two-digits number
		 */ 
		random_number_2 = u2;

		/**
		 * Calculating the result
		 */ 
		answer = random_number_1 * random_number_2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", random_number_1);
		result.put("number2", random_number_2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			/**
			 * Calculating the lower limit and upper limit for remaining mcq options  
			 */ 
			int mcq_lower_limit, mcq_upper_limit;
			if((answer - 25) <= 222) {
				mcq_lower_limit = 222;  
			} else {
				mcq_lower_limit = answer - 25;
			}

			if((answer + 25) >= 999) {
				mcq_upper_limit = 999;  
			} else {
				mcq_upper_limit = answer + 25;
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 *  returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number (the answer), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_one_digit_and_two_digits_with_carrying_over()
    @description Gets the problem set data for multiplication of 2 numbers
    @param level - int - Chooses a level. Values are 1 or 2.
    @param mcq - boolean - Multiple choice options required true / false - default is false                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_one_digit_and_two_digits_with_carrying_over(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */ 
		int t1 = 0, u1 = 0, u2 = 0, random_number_1, random_number_2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the tens and units digits for the first random number. Also, generating units digit for the second random number.
		 */
		if(level == 1) {
			u2 = mg_giveRandomInteger(3, 7, random);  
			t1 = mg_giveRandomInteger(1, 2, random); 
			u1 = mg_giveRandomInteger(4, 8, random);
		} else {
			u2 = mg_giveRandomInteger(3, 9, random);  
			t1 = mg_giveRandomInteger(1, 9, random); 
			u1 = mg_giveRandomInteger(4, 9, random); 
		}

		/**
		 * Generating first two-digits number
		 */ 
		random_number_1 = ((t1) * 10) + u1;

		/**
		 * Generating second two-digits number
		 */ 
		random_number_2 = u2;

		/**
		 * Calculating the result
		 */ 
		answer = random_number_1 * random_number_2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", random_number_1);
		result.put("number2", random_number_2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(level == 1) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */ 
				if((answer - 25) <= 42) {
					mcq_lower_limit = 42;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */ 
				if((answer + 25) >= 196) {
					mcq_upper_limit = 196;  
				} else {
					mcq_upper_limit = answer + 25;
				}

			} else {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 25) <= 42) {
					mcq_lower_limit = 42;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 25) >= 891) {
					mcq_upper_limit = 891;  
				} else {
					mcq_upper_limit = answer + 25;
				}
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_one_digit_and_three_digits_with_carrying_over()
    @description Gets the problem set data for multiplication of 2 numbers
    @param level - int - Chooses a level. Values are 1 or 2.
    @param mcq - boolean - Multiple choice options required true / false - default is false                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_one_digit_and_three_digits_with_carrying_over(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */ 
		int h1 = 0, t1 = 0, u1 = 0, u2 = 0, random_number_1, random_number_2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the hundreds, tens, and units digits for the first random number. Also, generating units digit for the second random number.
		 */
		if(level == 1) {
			u2 = mg_giveRandomInteger(3, 9, random);  
			h1 = mg_giveRandomInteger(1, 3, random);         
			t1 = mg_giveRandomInteger(4, 9, random);
			u1 = mg_giveRandomInteger(4, 9, random); 
		} else {
			u2 = mg_giveRandomInteger(3, 9, random);  
			h1 = mg_giveRandomInteger(1, 9, random); 
			t1 = mg_giveRandomInteger(4, 9, random);         
			u1 = mg_giveRandomInteger(4, 9, random); 
		}

		/**
		 * Generating first two-digits number
		 */ 
		random_number_1 = ((h1) * 100) + ((t1) * 10) + u1;

		/**
		 * Generating second two-digits number
		 */ 
		random_number_2 = u2;

		/**
		 * Calculating the result
		 */ 
		answer = random_number_1 * random_number_2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", random_number_1);
		result.put("number1", random_number_2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */ 
			mcq_option.add(answer); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(level == 1) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */ 
				if((answer - 25) <= 432) {
					mcq_lower_limit = 432;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */ 
				if((answer + 25) >= 3591) {
					mcq_upper_limit = 3591;  
				} else {
					mcq_upper_limit = answer + 25;
				}

			} else {

				/**
				 * calculating the lower_limit for remaining mcq options  
				 */ 
				if((answer - 25) <= 432) {
					mcq_lower_limit = 432;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 25) >= 8991) {
					mcq_upper_limit = 8991;  
				} else {
					mcq_upper_limit = answer + 25;
				}
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */ 
			Collections.shuffle(mcq_option);

			/**
			 * Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number (the answer), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_two_digits_with_carrying_over()
    @description Gets the problem set data for multiplication of 2 numbers
    @param level - int - Chooses a level. Values are 1 or 2.
    @param mcq - boolean - Multiple choice options required true / false - default is false                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_two_digits_with_carrying_over(int level, boolean mcq) {

		/**
		 * Declaring and initializing the variables
		 */ 
		int t1 = 0, u1 = 0, t2 = 0, u2 = 0, random_number_1, random_number_2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the tens and units digits for the first and second random number
		 */
		if(level == 1) {
			t1 = mg_giveRandomInteger(1, 9, random);
			u1 = mg_giveRandomInteger(0, 9, random); 
			t2 = mg_giveRandomInteger(1, 5, random); 
			u2 = mg_giveRandomInteger(0, 9, random);  
		} else {
			t1 = mg_giveRandomInteger(1, 9, random); 
			u1 = mg_giveRandomInteger(0, 9, random); 
			t2 = mg_giveRandomInteger(1, 9, random); 
			u2 = mg_giveRandomInteger(0, 9, random); 
		}

		/**
		 * Generating first two-digits number
		 */ 
		random_number_1 = ((t1) * 10) + u1;

		/**
		 * Generating second two-digits number
		 */ 
		random_number_2 = ((t2) * 10) + u2;

		/**
		 * Calculating the result
		 */ 
		answer = random_number_1 * random_number_2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", random_number_1);
		result.put("number2", random_number_2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if(level == 1) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 100) {
					mcq_lower_limit = 100;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */ 
				if((answer + 10) >= 5841) {
					mcq_upper_limit = 5841;  
				} else {
					mcq_upper_limit = answer + 10;
				}

			} else {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 100) {
					mcq_lower_limit = 100;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 10) >= 9801) {
					mcq_upper_limit = 9801;  
				} else {
					mcq_upper_limit = answer + 10;
				}
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options 
			 */ 
			Collections.shuffle(mcq_option);

			/**
			 *  Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random number (the answer), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_multiplication_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over()
    @description Gets the problem set data for multiplication of 2 numbers
    @param level - int - Chooses a level. Values are 1 or 2.
    @param mcq - boolean - Multiple choice options required true / false - default is false                        
    @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_two_digits_and_three_digits_with_carrying_over(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */ 
		int h1 = 0, t1 = 0, u1 = 0, t2 = 0, u2 = 0, random_number_1, random_number_2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the hundreds, tens, and units digits for the first and second random number
		 */
		if(level == 1) {
			h1 = mg_giveRandomInteger(1, 5, random); 	
			t1 = mg_giveRandomInteger(0, 9, random); 
			u1 = mg_giveRandomInteger(0, 9, random);  
			t2 = mg_giveRandomInteger(1, 9, random); 	
			u2 = mg_giveRandomInteger(0, 9, random);  
		} else {
			h1 = mg_giveRandomInteger(1, 9, random); 	
			t1 = mg_giveRandomInteger(0, 9, random); 
			u1 = mg_giveRandomInteger(0, 9, random);      
			t2 = mg_giveRandomInteger(1, 9, random);
			u2 = mg_giveRandomInteger(0, 9, random); 
		}

		/**
		 * Generating first two-digits number
		 */ 
		random_number_1 = ((h1) * 100) + ((t1) * 10) + u1;

		/**
		 * Generating second two-digits number
		 */ 
		random_number_2 = ((t2) * 10) + u2;

		/**
		 * Calculating the result
		 */ 
		answer = random_number_1 * random_number_2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", random_number_1);
		result.put("number2", random_number_2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList  
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(level == 1) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 25) <= 1000) {
					mcq_lower_limit = 1000;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */ 
				if((answer + 25) >= 59301) {
					mcq_upper_limit = 59301;  
				} else {
					mcq_upper_limit = answer + 25;
				}

			} else {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 25) <= 1000) {
					mcq_lower_limit = 1000;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 25) >= 98901) {
					mcq_upper_limit = 98901;  
				} else {
					mcq_upper_limit = answer + 25;
				}
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 *  Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random numbers (the answer), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiplication_of_two_numbers_with_three_or_four_digits_and_three_digits_with_carrying_over()
     @description Gets the problem set data for multiplication of 2 numbers
     @param level - int - Chooses a level. Values are 1 or 2.
     @param mcq - boolean - Multiple choice options required true / false - default is false                        
     @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_with_three_or_four_digits_and_three_digits_with_carrying_over(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */ 
		int n1 = 0, n2 = 0, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating first and second random numbers
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(100, 999, random);
			n2 = mg_giveRandomInteger(100, 999, random);
		} else {
			n1 = mg_giveRandomInteger(1000, 9999, random);
			n2 = mg_giveRandomInteger(100, 999, random);
		}

		/**
		 * Calculating the answer
		 */ 
		answer = n1 * n2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList	
			 */
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in ArrayList
			 */
			mcq_option.add(answer); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;
			if(level == 1) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 25) <= 10000) {
					mcq_lower_limit = 10000;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */ 
				if((answer + 25) >= 998001) {
					mcq_upper_limit = 998001;  
				} else {
					mcq_upper_limit = answer + 25;
				}

			} else {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 25) <= 100000) {
					mcq_lower_limit = 100000;  
				} else {
					mcq_lower_limit = answer - 25;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 25) >= 9989001) {
					mcq_upper_limit = 9989001;  
				} else {
					mcq_upper_limit = answer + 25;
				}
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 *  Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random numbers (the answer), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiplication_of_two_numbers_general_practice()
     @description Gets the problem set data for multiplication of 2 numbers
     @param level - int - Chooses a level. Values are 1, 2, 3, 4, 5, 6 or 7
     @param mcq - boolean - Multiple choice options required true / false - default is false                        
     @return HashMap (first random number, second random number, multiplication of the two random numbers, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_of_two_numbers_general_practice(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */ 
		int n1 = 0, n2 = 0, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating the first and second random numbers
		 */
		if(level == 1) {
			n1 = mg_giveRandomInteger(10, 99, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} else if(level == 2) {
			n1 = mg_giveRandomInteger(10, 99, random);
			n2 = mg_giveRandomInteger(10, 99, random);
		} else if(level == 3) {
			n1 = mg_giveRandomInteger(100, 999, random);
			n2 = mg_giveRandomInteger(1, 10, random);
		} else if(level == 4) {
			n1 = mg_giveRandomInteger(100, 999, random);
			n2 = mg_giveRandomInteger(10, 99, random);
		} else if(level == 5) {
			n1 = mg_giveRandomInteger(100, 999, random);
			n2 = mg_giveRandomInteger(100, 999, random);
		} else if(level == 6) {
			n1 = mg_giveRandomInteger(1000, 9999, random);
			n2 = mg_giveRandomInteger(100, 999, random);
		} else {
			n1 = mg_giveRandomInteger(100, 99999, random);
			n2 = mg_giveRandomInteger(11, 999, random);
		}

		/**
		 * Calculating the answer
		 */ 
		answer = n1 * n2;

		/**
		 * Creating a HashMap
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Storing values in the HashMap
		 */
		result.put("number1", n1);
		result.put("number2", n2);
		result.put("answer", answer);

		/**
		 * Creating the mcq options
		 */  
		if(mcq == true) {

			/**
			 * Creating the ArrayList options 
			 */ 
			ArrayList<Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Adding answer as mcq option in ArrayList 
			 */ 
			mcq_option.add(answer); 

			int mcq_lower_limit = 0, mcq_upper_limit = 0;

			if(level == 1) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 5) <= 10) {
					mcq_lower_limit = 10;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */ 
				if((answer + 5) >= 990) {
					mcq_upper_limit = 990;  
				} else {
					mcq_upper_limit = answer + 5;
				}

			} else if(level == 2) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 100) {
					mcq_lower_limit = 100;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 10) >= 9801) {
					mcq_upper_limit = 9801;  
				} else {
					mcq_upper_limit = answer + 10;
				}

			} else if(level == 3) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 100) {
					mcq_lower_limit = 100;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 10) >= 9990) {
					mcq_upper_limit = 9990;  
				} else {
					mcq_upper_limit = answer + 10;
				}

			} else if(level == 4) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 1000) {
					mcq_lower_limit = 1000;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 10) >= 98901) {
					mcq_upper_limit = 98901;  
				} else {
					mcq_upper_limit = answer + 10;
				}

			} else if(level == 5) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 10000) {
					mcq_lower_limit = 10000;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 10) >= 998001) {
					mcq_upper_limit = 998001;  
				} else {
					mcq_upper_limit = answer + 10;
				}

			} else if(level == 6) {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 100000) {
					mcq_lower_limit = 100000;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 10) >= 9989001) {
					mcq_upper_limit = 9989001;  
				} else {
					mcq_upper_limit = answer + 10;
				}

			} else {

				/**
				 * Calculating the lower_limit for remaining mcq options  
				 */
				if((answer - 10) <= 1100) {
					mcq_lower_limit = 1100;  
				} else {
					mcq_lower_limit = answer - 10;
				}

				/**
				 * Calculating the upper_limit for remaining mcq options  
				 */																																                   
				if((answer + 10) >= 99899001) {
					mcq_upper_limit = 99899001;  
				} else {
					mcq_upper_limit = answer + 10;
				}
			}

			/**
			 * Creating an int array
			 */
			int[] array;

			/**
			 * Generating remaining mcq options within the calculated range  
			 */ 
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data 
			 */ 
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array){
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options  
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning options to the HashMap  
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with first random number, second random number, multiplication of the 2 random numbers (the answer), ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiplication_for_daily_life_examples_type_1()
	 @description Gets the problem set data containing the multiplication of 2 numbers.    
	 @param level - int - Chooses a level. Values are 1, 2, 3 or 4. 
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_for_daily_life_examples_type_1(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, answer;
		String object_singular;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for value1, cost1
		 */	
		if(level == 1) {
			number1 = mg_giveRandomInteger(10, 99, random);
			number2 = mg_giveRandomInteger(2, 9, random); 	
		} else if(level == 2) {
			number1 = mg_giveRandomInteger(100, 999, random);
			number2 = mg_giveRandomInteger(2, 9, random); 	
		} else if(level == 3) {
			number1 = mg_giveRandomInteger(100, 999, random);
			number2 = mg_giveRandomInteger(10, 99, random); 	
		} else {
			number1 = mg_giveRandomInteger(1000, 9999, random);
			number2 = mg_giveRandomInteger(10, 99, random);
		}

		/**
		 * Calculating the answer 
		 */
		answer = number1 * number2;

		/**
		 * Creating an array containing singular object names 
		 */
		String[] objects_singular = {"sweet", "chocolate", "candy", "mango", "orange", "grape", "apple", "samosa", "cake", "strawberry"};

		/**
		 * Generating a random number for singular object names
		 */
		int rand1 = mg_giveRandomInteger(0, objects_singular.length - 1, random);

		/**
		 * Selecting an object with its singular name
		 */
		object_singular = objects_singular[rand1];

		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();

		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 6, random);

		if(type == 2) {
			result.put("question", "How much will " + number2 + " " + temp.get(3) + " cost at Rs. " + number1 + " a " + object_singular + "?");
		} else if(type == 3) {
			result.put("question", "There are " + number1 + " " + temp.get(9) + " in 1 box. How many are in " + number2 + " boxes?");
		} else if(type == 4) {
			result.put("question", temp.get(0) + " saves Rs. " + number1 + " per day. How many rupees will " + temp.get(0) + " save in " + number2 + " days?");
		} else if(type == 5) {
			result.put("question", temp.get(0) + " bought " + number1 + " boxes of chocolates. There were " + number2 + " chocolates in each box. How many chocolates did " + temp.get(0) + " buy?");
		} else if(type == 6) {
			result.put("question", number2 + " friends go out for lunch. They order a lunch which costs Rs. " + number1 + " per plate. How much do they pay to the owner?");
		} else {
			result.put("question", "If one " + object_singular + " costs Rs. " + number1 + ", what is the total cost of " + number2 + object_singular + "?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiplication_for_daily_life_examples_type_2()
	 @description Gets the problem set data containing the multiplication of 2 numbers.    
	 @param level - int - Chooses a level. Values are 1 or 2. 
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_for_daily_life_examples_type_2(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for value1, cost1
		 */	
		if(level == 1) {
			number1 = mg_giveRandomInteger(2, 10, random);
			number2 = mg_giveRandomInteger(2, 10, random); 	
		} else {
			number1 = mg_giveRandomInteger(10, 99, random);
			number2 = mg_giveRandomInteger(2, 9, random); 	
		}

		/**
		 * Calculating the answer 
		 */
		answer = number1 * number2;

		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();

		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 9, random);

		if(type == 2) {
			result.put("question", "Rohit's family has " + number1 + " members. Each member has " + number2 + " pairs of clothes. How many pairs of clothes do they have altogether?");
		} else if(type == 3) {
			result.put("question", "Ketan ordered " + number1 + " pizzas to eat. Each pizza has " + number2 + " parts. How many parts does Ketan have in total?");
		} else if(type == 4) {
			result.put("question", "Nitin bought " + number1 + " bunches of flowers. Each bunch had " + number2 + " flowers. How many flowers did Nitin buy?");
		} else if(type == 5) {
			result.put("question", "Mummy bought " + number1 + " egg cartons and each carton had " + number2 + " eggs. How many eggs did mummy get?");
		} else if(type == 6) {
			result.put("question", number1 + " teams participated in a tournament and each team had " + number2 + " players. How many players did participate in tournament?");
		} else if(type == 7) {
			result.put("question", temp.get(0) + " studied " + number1 + " hours for " + number2 + " days. How many hours did " + temp.get(0) + " study in all?");
		} else if(type == 8) {
			result.put("question", temp.get(0) + " has " + number1 + " " + temp.get(3) + ". " + temp.get(1) + " has " + number2 + " times more than " + temp.get(0) + ". How many " + temp.get(3) + " does " + temp.get(1) + " have?");
		} else if(type == 9) {
			result.put("question", "There are " + number1 + " children in a class; each student will get " + number2 + " pencils. How many pencils will the teacher have to give?");
		} else {
			result.put("question", number1 + " tennis players brought " + number2 + " balls each. How many balls do they have together?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

			if(level == 1) {   			
				if((answer - 5) <= 4) {
					mcq_lower_limit = 4;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 100) {
					mcq_upper_limit = 100;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			} else {   			
				if((answer - 5) <= 20) {
					mcq_lower_limit = 20;  
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 891) {
					mcq_upper_limit = 891;  
				} else {
					mcq_upper_limit = answer + 5;
				}
			}

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_multiplication_for_tricky_questions()
	 @description Gets the problem set data containing answer for the tricky questions.     
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_multiplication_for_tricky_questions(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, answer;
		String animal;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random value for number1
		 */	
		number1 = mg_giveRandomInteger(2, 10, random);

		/**
		 * Creating an array containing animal names 
		 */
		String[] animal_options = {"lions", "tigers", "bears", "foxes", "wolves", "deers", "leopards", "cheetas", "hyenas", "hippopotamuses"};

		/**
		 * Generating a random number for selecting a value from the above array
		 */
		int rand1 = mg_giveRandomInteger(0, animal_options.length - 1, random);

		/**
		 * Selecting an animal name
		 */
		animal = animal_options[rand1];

		/**
		 * Creating a temporary ArrayList for storing the values of name and object
		 */
		ArrayList<String> temp = mg_getRandomNames();

		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 5, random);

		if(type == 2) {
			result.put("question", "A tea shop purchases " + number1 + " liters of milk daily. How many liters of milk will he purchase in a week?");

			/**
			 * Calculating the answer 
			 */
			answer = 7 * number1;
		} else if(type == 3) {
			result.put("question", temp.get(0) + " studied " + number1 + " hours for a week. How many hours did " + temp.get(0) + " study in all?");

			/**
			 * Calculating the answer 
			 */
			answer = 7 * number1;
		} else if(type == 4) {
			result.put("question", "Mummy bought " + number1 + " egg cartons and each carton had 1 dozen eggs. How many eggs did mummy get?");

			/**
			 * Calculating the answer 
			 */
			answer = 12 * number1;
		} else if(type == 5) {
			result.put("question", temp.get(0) + " bought " + number1 + " dozens of bananas. How many bananas did " + temp.get(0) +  " buy?");

			/**
			 * Calculating the answer 
			 */
			answer = 12 * number1;
		} else {
			result.put("question", "There are " + number1 + " " + animal + ". How many legs are there in total?");

			/**
			 * Calculating the answer 
			 */
			answer = 4 * number1;
		}

		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	 @name mg_get_patterns_for_identifying_the_pattern_similar_to_the_shown_pattern()
	 @description Gets the problem set data identifying the pattern shown in the question.   
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (pattern, images/numbers for characters A, B, and C, images/numbers for characters A, B, and C for answer, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_patterns_for_identifying_the_pattern_similar_to_the_shown_pattern(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1;
		String pattern1;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(mg_giveRandomInteger(0, 1, random) == 0) {

			/**
			 * Creating an ArrayList for storing the numeric values of A, B, C 
			 */
			ArrayList<Integer> pattern_numeric_values = new ArrayList<Integer>();

			/**
			 * Generating random numbers for A, B, and C 
			 */
			int temp;
			do{
				temp = mg_giveRandomInteger(0, 9, random);
				if(!mg_containsInArray(pattern_numeric_values, temp)) {
					pattern_numeric_values.add(temp);				
				}
			} while(pattern_numeric_values.size() < 6);

			/**
			 * Selecting the numeric values corresponding to A, B, C
			 */
			String a = Integer.toString(pattern_numeric_values.get(0));
			String b = Integer.toString(pattern_numeric_values.get(1));
			String c = Integer.toString(pattern_numeric_values.get(2));

			/**
			 * Selecting the numeric values corresponding to A, B, C for the answer
			 */
			String a_answer = Integer.toString(pattern_numeric_values.get(3));
			String b_answer = Integer.toString(pattern_numeric_values.get(4));
			String c_answer = Integer.toString(pattern_numeric_values.get(5));

			/**
			 * Storing the numeric values of A, B, C in the HashMap
			 */
			result.put("A_value", a);
			result.put("B_value", b);
			result.put("C_value", c);

			/**
			 * Storing the numeric values of A, B, C for the answer
			 */
			result.put("A_answer_value", a_answer);
			result.put("B_answer_value", b_answer);
			result.put("C_answer_value", c_answer);
		} else {

			/**
			 * Creating an array of object names
			 */
			String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

			/**
			 * Creating an ArrayList for storing random images
			 */
			ArrayList<Integer> object_index = new ArrayList<>();

			/**
			 * Generating random numbers for index positions of images for A, B, C
			 */
			do{
				rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
				if(!mg_containsInArray(object_index, rand1)) {
					object_index.add(rand1);				
				}
			} while(object_index.size() < 6);

			/**
			 * Selecting the values of images corresponding to A, B, C
			 */
			String a = objects_array[object_index.get(0)];
			String b = objects_array[object_index.get(1)];
			String c = objects_array[object_index.get(2)];

			/**
			 * Selecting the values of images corresponding to A, B, C for the answer
			 */
			String a_answer = objects_array[object_index.get(3)];
			String b_answer = objects_array[object_index.get(4)];
			String c_answer = objects_array[object_index.get(5)];

			/**
			 * Storing the image names for A, B, C in the HashMap
			 */
			result.put("A_value", a.concat(".png"));
			result.put("B_value", b.concat(".png"));
			result.put("C_value", c.concat(".png"));

			/**
			 * Storing the image names for A, B, C for the answer in the HashMap
			 */
			result.put("A_answer_value", a_answer.concat(".png"));
			result.put("B_answer_value", b_answer.concat(".png"));
			result.put("C_answer_value", c_answer.concat(".png"));
		}

		/**
		 * Creating an array containing the patterns 
		 */
		String[] pattern_names = {"ABABABABABAB", "ABBABBABBABB", "AABAABAABAAB", "ABCABCABCABC", "AABBAABBAABB"};

		/**
		 * Generating a random number for selecting a pattern
		 */
		rand1 = mg_giveRandomInteger(0, pattern_names.length - 1, random);

		/**
		 * Selecting a pattern
		 */
		pattern1 = pattern_names[rand1];

		/**
		 * Storing the values of pattern and answer
		 */
		result.put("pattern", pattern1);
		result.put("answer", pattern1);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(pattern1);

			/**
			 * Creating an ArrayList for storing indexes of wrong mcq options
			 */
			ArrayList<Integer> wrong_indexes = new ArrayList<>();

			/**
			 * Generating index positions for wrong mcq options
			 */
			int rand2;
			do{
				rand2 = mg_giveRandomInteger(0, pattern_names.length - 1, random);
				if(!mg_containsInArray(wrong_indexes, rand2) && rand2 != rand1) {
					wrong_indexes.add(rand2);				
				}
			} while(wrong_indexes.size() < 4);

			/**
			 * Storing the wrong mcq options in the ArrayList   			
			 */
			mcq_option.add(pattern_names[wrong_indexes.get(0)]);
			mcq_option.add(pattern_names[wrong_indexes.get(1)]);
			mcq_option.add(pattern_names[wrong_indexes.get(2)]);

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with pattern, images/numbers for characters A, B, and C, images/numbers for characters A, B, and C for answer, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_filling_in_the_missing_part_in_the_pattern()
		 @description Gets the problem set data containing answer for the missing part in the pattern.
		 @param level - int - Chooses a level. Values are 1 or 2.   
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (question pattern, images/numbers for characters A, B, and C, answer, answer pattern, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_patterns_for_filling_in_the_missing_part_in_the_pattern(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1;
		String answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(mg_giveRandomInteger(0, 1, random) == 0) {

			/**
			 * Creating an ArrayList for storing the numeric values of A, B, C 
			 */
			ArrayList<Integer> pattern_numeric_values = new ArrayList<Integer>();

			/**
			 * Generating random numbers for A, B, and C 
			 */
			int temp;
			do{
				temp = mg_giveRandomInteger(0, 9, random);
				if(!mg_containsInArray(pattern_numeric_values, temp)) {
					pattern_numeric_values.add(temp);				
				}
			} while(pattern_numeric_values.size() < 4);

			/**
			 * Selecting the numeric values corresponding to A, B, C
			 */
			String a = Integer.toString(pattern_numeric_values.get(0));
			String b = Integer.toString(pattern_numeric_values.get(1));
			String c = Integer.toString(pattern_numeric_values.get(2));

			/**
			 * Storing the numeric values of A, B, C in the HashMap
			 */
			result.put("A_value", a);
			result.put("B_value", b);
			result.put("C_value", c);

		} else {

			/**
			 * Creating an array of object names
			 */
			String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

			/**
			 * Creating an ArrayList for storing random images
			 */
			ArrayList<Integer> object_index = new ArrayList<>();

			/**
			 * Generating random numbers for index positions of images for A, B, C
			 */
			do{
				rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
				if(!mg_containsInArray(object_index, rand1)) {
					object_index.add(rand1);				
				}
			} while(object_index.size() < 4);

			/**
			 * Selecting the values of images corresponding to A, B, C
			 */
			String a = objects_array[object_index.get(0)];
			String b = objects_array[object_index.get(1)];
			String c = objects_array[object_index.get(2)];

			/**
			 * Storing the image names for A, B, C in the HashMap
			 */
			result.put("A_value", a.concat(".png"));
			result.put("B_value", b.concat(".png"));
			result.put("C_value", c.concat(".png"));
		}

		/**
		 * Creating an array for storing basic pattern components
		 */
		String[] basic_pattern_component_names = {"AB", "AAB", "ABB", "ABC", "AABB"};

		/**
		 * Generating a random number for selecting a basic pattern component
		 */
		rand1 = mg_giveRandomInteger(0, basic_pattern_component_names.length - 1, random);

		/**
		 * Storing a part of the pattern in the String variables for question and answer
		 */
		String question_pattern1 = basic_pattern_component_names[rand1];
		String answer_pattern1 = basic_pattern_component_names[rand1];

		/**
		 * Creating patterns to be displayed for question and answer 
		 */
		if(question_pattern1 == "AB") {
			for(int ii=1; ii<=4; ii++) {
				if(level == 1) {
					if(ii == 4){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("AB");
					}
				} else {
					if(ii == 2){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("AB");
					}
				}
				answer_pattern1 = answer_pattern1.concat("AB");
			}

			/**
			 * Obtaining the answer
			 */
			answer = "AB";

			/**
			 * Storing the answer in the HashMap
			 */
			result.put("answer", answer);
		} else if(question_pattern1 == "AAB") {
			for(int ii=1; ii<=3; ii++) {
				if(level == 1) {
					if(ii == 3){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("AAB");
					}
				} else {
					if(ii == 2){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("AAB");
					}
				}
				answer_pattern1 = answer_pattern1.concat("AAB");
			}

			/**
			 * Obtaining the answer
			 */
			answer = "AAB";

			/**
			 * Storing the answer in the HashMap
			 */
			result.put("answer", answer);
		} else if(question_pattern1 == "ABB") {
			for(int ii=1; ii<=3; ii++) {
				if(level == 1) {
					if(ii == 3){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("ABB");
					}
				} else {
					if(ii == 2){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("ABB");
					}
				}
				answer_pattern1 = answer_pattern1.concat("ABB");
			}

			/**
			 * Obtaining the answer
			 */
			answer = "ABB";

			/**
			 * Storing the answer in the HashMap
			 */
			result.put("answer", answer);
		} else if(question_pattern1 == "ABC") {
			for(int ii=1; ii<=3; ii++) {
				if(level == 1) {
					if(ii == 3){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("ABC");
					}
				} else {
					if(ii == 2){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("ABC");
					}
				}
				answer_pattern1 = answer_pattern1.concat("ABC");
			}

			/**
			 * Obtaining the answer
			 */
			answer = "ABC";

			/**
			 * Storing the answer in the HashMap
			 */
			result.put("answer", answer);
		} else {
			for(int ii=1; ii<=2; ii++) {
				if(level == 1) {
					if(ii == 2){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("AABB");
					}
				} else {
					if(ii == 1){
						question_pattern1 = question_pattern1.concat("_________");
					} else {
						question_pattern1 = question_pattern1.concat("AABB");
					}
				}
				answer_pattern1 = answer_pattern1.concat("AABB");
			}

			/**
			 * Obtaining the answer
			 */
			answer = "AABB";

			/**
			 * Storing the answer in the HashMap
			 */
			result.put("answer", answer);
		}

		/**
		 * Storing the values of pattern in the question and answer
		 */
		result.put("pattern", question_pattern1);
		result.put("answer", answer_pattern1);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			if(rand1 == 0){

				/**
				 * Storing wrong mcq options in the ArrayList
				 */
				mcq_option.add("BA");
				mcq_option.add("AA");
				mcq_option.add("BB");
			} else if(rand1 == 1) {

				/**
				 * Creating an ArrayList for storing wrong mcq options
				 */
				ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("ABA", "BBA", "ABB", "AAA", "BBB", "BAA", "BAB"));

				/**
				 * Shuffling the wrong mcq options
				 */
				Collections.shuffle(wrong_mcq_options);

				/**
				 * Storing the values of wrong mcq options in the ArrayList
				 */
				mcq_option.add(wrong_mcq_options.get(0));
				mcq_option.add(wrong_mcq_options.get(1));
				mcq_option.add(wrong_mcq_options.get(2));
			} else if(rand1 == 2) {

				/**
				 * Creating an ArrayList for storing wrong mcq options
				 */
				ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("ABA", "BBA", "AAB", "AAA", "BBB", "BAA", "BAB"));

				/**
				 * Shuffling the wrong mcq options
				 */
				Collections.shuffle(wrong_mcq_options);

				/**
				 * Storing the values of wrong mcq options in the ArrayList
				 */
				mcq_option.add(wrong_mcq_options.get(0));
				mcq_option.add(wrong_mcq_options.get(1));
				mcq_option.add(wrong_mcq_options.get(2));
			} else if(rand1 == 3) {

				/**
				 * Creating an ArrayList for storing wrong mcq options
				 */
				ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("AAA", "AAB", "AAC", "ABA", "ABB", "ACA", "ACB", "ACC", "BAA", "BAB", "BAC", "BBA", "BBB", "BBC", "BCA", "BCB", "BCC", "CAA", "CAB", "CAC", "CBA", "CBB", "CBC", "CCA", "CCB", "CCC"));

				/**
				 * Shuffling the wrong mcq options
				 */
				Collections.shuffle(wrong_mcq_options);

				/**
				 * Storing the values of wrong mcq options in the ArrayList
				 */
				mcq_option.add(wrong_mcq_options.get(0));
				mcq_option.add(wrong_mcq_options.get(1));
				mcq_option.add(wrong_mcq_options.get(2));
			} else {

				/**
				 * Creating an ArrayList for storing wrong mcq options
				 */
				ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("AAAA", "AAAB", "AABA", "ABAA", "ABAB", "ABBA", "ABBB", "BAAA", "BAAB", "BABA", "BABB", "BBAA", "BBAB", "BBBA", "BBBB"));

				/**
				 * Shuffling the wrong mcq options
				 */
				Collections.shuffle(wrong_mcq_options);

				/**
				 * Storing the values of wrong mcq options in the ArrayList
				 */
				mcq_option.add(wrong_mcq_options.get(0));
				mcq_option.add(wrong_mcq_options.get(1));
				mcq_option.add(wrong_mcq_options.get(2));
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with question pattern, images/numbers for characters A, B, and C, answer, answer pattern, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_describing_component_of_the_pattern()
		 @description Gets the problem set data describing component of the shown pattern.  
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (pattern, images/numbers for characters A, B, and C, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_patterns_for_describing_component_of_the_pattern(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1;
		String pattern1, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(mg_giveRandomInteger(0, 1, random) == 0) {

			/**
			 * Creating an ArrayList for storing the numeric values of A, B, C 
			 */
			ArrayList<Integer> pattern_numeric_values = new ArrayList<Integer>();

			/**
			 * Generating random numbers for A, B, and C 
			 */
			int temp;
			do{
				temp = mg_giveRandomInteger(0, 9, random);
				if(!mg_containsInArray(pattern_numeric_values, temp)) {
					pattern_numeric_values.add(temp);				
				}
			} while(pattern_numeric_values.size() < 4);

			/**
			 * Selecting the numeric values corresponding to A, B, C
			 */
			String a = Integer.toString(pattern_numeric_values.get(0));
			String b = Integer.toString(pattern_numeric_values.get(1));
			String c = Integer.toString(pattern_numeric_values.get(2));

			/**
			 * Storing the numeric values of A, B, C in the HashMap
			 */
			result.put("A_value", a);
			result.put("B_value", b);
			result.put("C_value", c);
		} else {

			/**
			 * Creating an array of object names
			 */
			String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

			/**
			 * Creating an ArrayList for storing random images
			 */
			ArrayList<Integer> object_index = new ArrayList<>();

			/**
			 * Generating random numbers for index positions of images for A, B, C
			 */
			do{
				rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
				if(!mg_containsInArray(object_index, rand1)) {
					object_index.add(rand1);				
				}
			} while(object_index.size() < 4);

			/**
			 * Selecting the values of images corresponding to A, B, C
			 */
			String a = objects_array[object_index.get(0)];
			String b = objects_array[object_index.get(1)];
			String c = objects_array[object_index.get(2)];

			/**
			 * Storing the image names for A, B, C in the HashMap
			 */
			result.put("A_value", a.concat(".png"));
			result.put("B_value", b.concat(".png"));
			result.put("C_value", c.concat(".png"));
		}

		/**
		 * Creating an array for storing patterns
		 */
		String[] pattern_names = {"ABABABAB", "ABCABCABC", "AABAABAAB", "ABBABBABB", "AABBAABBAABB"};

		/**
		 * Creating an array containing values for the answer
		 */
		String[] pattern_component_names = {"AB", "ABC", "AAB", "ABB", "AABB"};

		/**
		 * Generating a random number for selecting a pattern and pattern component
		 */
		rand1 = mg_giveRandomInteger(0, pattern_names.length - 1, random);

		/**
		 * Selecting a pattern
		 */
		pattern1 = pattern_names[rand1];

		/**
		 * Obtaining the answer
		 */
		answer = pattern_component_names[rand1];

		/**
		 * Storing the pattern and answer in the HashMap 
		 */
		result.put("pattern", pattern1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of answer in the ArrayList
			 */
			mcq_option.add("AB");
			mcq_option.add("ABB");
			mcq_option.add("AAB");
			mcq_option.add("ABC");
			mcq_option.add("AABB");

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with pattern, images/numbers for characters A, B, and C, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_what_comes_next_in_growing_patterns()
		 @description Gets the problem set data containing answer of the growing pattern.  
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (pattern, images/numbers for characters A, B, and C, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_patterns_for_what_comes_next_in_growing_patterns(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int rand1;
		String pattern1, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(mg_giveRandomInteger(0, 1, random) == 0) {

			/**
			 * Creating an ArrayList for storing the numeric values of A, B, C 
			 */
			ArrayList<Integer> pattern_numeric_values = new ArrayList<Integer>();

			/**
			 * Generating random numbers for A, B, and C 
			 */
			int temp;
			do{
				temp = mg_giveRandomInteger(0, 9, random);
				if(!mg_containsInArray(pattern_numeric_values, temp)) {
					pattern_numeric_values.add(temp);				
				}
			} while(pattern_numeric_values.size() < 4);

			/**
			 * Selecting the numeric values corresponding to A, B, C
			 */
			String a = Integer.toString(pattern_numeric_values.get(0));
			String b = Integer.toString(pattern_numeric_values.get(1));
			String c = Integer.toString(pattern_numeric_values.get(2));

			/**
			 * Storing the numeric values of A, B, C in the HashMap
			 */
			result.put("A_value", a);
			result.put("B_value", b);
			result.put("C_value", c);
		} else {

			/**
			 * Creating an array of object names
			 */
			String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

			/**
			 * Creating an ArrayList for storing random images
			 */
			ArrayList<Integer> object_index = new ArrayList<>();

			/**
			 * Generating random numbers for index positions of images for A, B, C
			 */
			do{
				rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
				if(!mg_containsInArray(object_index, rand1)) {
					object_index.add(rand1);				
				}
			} while(object_index.size() < 4);

			/**
			 * Selecting the values of images corresponding to A, B, C
			 */
			String a = objects_array[object_index.get(0)];
			String b = objects_array[object_index.get(1)];
			String c = objects_array[object_index.get(2)];

			/**
			 * Storing the image names for A, B, C in the HashMap
			 */
			result.put("A_value", a.concat(".png"));
			result.put("B_value", b.concat(".png"));
			result.put("C_value", c.concat(".png"));
		}

		/**
		 * Creating an array for storing patterns
		 */
		String[] pattern_names = {"ABA, ABBA, ABBBA, ABBBBA, ABBBBBA", "AB, AAB, AAAB, AAAAB, AAAAAB", "AB, ABB, ABBB, ABBBB, ABBBBB", "A, AA, AAA, AAAA, AAAAA"};

		/**
		 * Creating an array containing values for the answer
		 */
		String[] pattern_component_names = {"ABBBBBBA", "AAAAAAB", "ABBBBBB", "AAAAAA"};

		/**
		 * Generating a random number for selecting a pattern and pattern component
		 */
		rand1 = mg_giveRandomInteger(0, pattern_names.length - 1, random);

		/**
		 * Selecting a pattern
		 */
		pattern1 = pattern_names[rand1];

		/**
		 * Obtaining the answer
		 */
		answer = pattern_component_names[rand1];

		/**
		 * Storing the pattern and answer in the HashMap 
		 */
		result.put("pattern", pattern1);
		result.put("answer", answer);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <String> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the values of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Storing the values for remaining mcq options
			 */
			if(rand1 == 0) {
				mcq_option.add("ABBBABBA");
				mcq_option.add("ABBBBA");
				mcq_option.add("ABBBBBBBA");
			} else if(rand1 == 1) {
				mcq_option.add("AAABAAB");
				mcq_option.add("AAAAB");
				mcq_option.add("AAAAAAAB");
			} else if(rand1 == 2) {
				mcq_option.add("ABBBBB");
				mcq_option.add("ABBBBAB");
				mcq_option.add("ABBBBBBB");
			} else {
				mcq_option.add("AAAAAAA");
				mcq_option.add("AAAAA");
				mcq_option.add("AAAABA");
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Returning the values of mcq options to the HashMap
			 */
			result.put("mcq_options", mcq_option);
		} 

		/**
		 * Return the HashMap with pattern, images/numbers for characters A, B, and C, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_increasing_patterns_with_constant_difference()
		 @description Gets the problem set data containing answers for the input fields in the increasing patterns with constant difference.
		 @param level - int - Chooses a level. Values are 1, 2, 3, and 4.                           
		 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_patterns_for_increasing_patterns_with_constant_difference(int level) {

		/**
		 * Declaring the variables
		 */
		int n, x;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random values for n and x
		 */
		if(level == 1) {
			n = mg_giveRandomInteger(1, 5, random);
			x = mg_giveRandomInteger(2, 5, random);
		} else if(level == 2) {
			n = mg_giveRandomInteger(1, 50, random);
			x = mg_giveRandomInteger(2, 5, random);
		} else if(level == 3) {
			int[] n1 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
			int[] x1 = {10, 20};

			/**
			 * Generating random numbers for selecting values for n1 and x1
			 */
			int rand1 = mg_giveRandomInteger(0, n1.length - 1, random);
			int rand2 = mg_giveRandomInteger(0, x1.length - 1, random);

			/**
			 * Selecting random values for n and x
			 */
			n = n1[rand1];
			x = x1[rand2];
		} else {
			n = mg_giveRandomInteger(1, 200, random);
			x = mg_giveRandomInteger(5, 15, random);
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		ArrayList<Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList and answer ArrayList
		 */
		for(int ii=0; ii<=5; ii++) {
			question_arraylist.add(Integer.toString(n + (ii * x)));
			answer_arraylist.add(n + (ii * x));
		}

		if(level == 1) {

			/**
			 * Replacing one value in the question ArrayList by an input field
			 */
			question_arraylist.remove(5);
			question_arraylist.add(5, "::blank::");
		} else if(level == 2) {

			/**
			 * Generating random number for an input field
			 */
			int rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

			/**
			 * Replacing one value in the question ArrayList by an input field
			 */
			question_arraylist.remove(rand1);
			question_arraylist.add(rand1, "::blank::");
		} else {

			/**
			 * Generating random number for an input field
			 */
			int rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

			/**
			 * Replacing one value in the question ArrayList by an input field
			 */
			question_arraylist.remove(rand1);
			question_arraylist.add(rand1, "::blank::");
			question_arraylist.add("::blank::");
			question_arraylist.add("::blank::");

			/**
			 * Storing the values for last 2 input fields in the ArrayList
			 */
			answer_arraylist.add(n + (6 * x));
			answer_arraylist.add(n + (7 * x));
		}

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_decreasing_patterns_with_constant_difference()
		 @description Gets the problem set data containing answers for the input fields in the decreasing patterns with constant difference.
		 @param level - int - Chooses a level. Values are 1, 2, 3, and 4.                           
		 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_patterns_for_decreasing_patterns_with_constant_difference(int level) {

		/**
		 * Declaring the variables
		 */
		int n, x;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random values for n and x
		 */
		if(level == 1) {
			n = mg_giveRandomInteger(1, 5, random);
			x = mg_giveRandomInteger(2, 5, random);
		} else if(level == 2) {
			n = mg_giveRandomInteger(1, 50, random);
			x = mg_giveRandomInteger(2, 5, random);
		} else if(level == 3) {
			int[] n1 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
			int[] x1 = {10, 20};

			/**
			 * Generating random numbers for selecting values for n1 and x1
			 */
			int rand1 = mg_giveRandomInteger(0, n1.length - 1, random);
			int rand2 = mg_giveRandomInteger(0, x1.length - 1, random);

			/**
			 * Selecting random values for n and x
			 */
			n = n1[rand1];
			x = x1[rand2];
		} else {
			n = mg_giveRandomInteger(1, 200, random);
			x = mg_giveRandomInteger(5, 15, random);
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		ArrayList<Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList and answer ArrayList
		 */
		for(int ii=7; ii>=2; ii--) {
			question_arraylist.add(Integer.toString(n + (ii * x)));
			answer_arraylist.add(n + (ii * x));
		}

		if(level == 1) {

			/**
			 * Replacing last value in the question ArrayList by an input field
			 */
			question_arraylist.remove(5);
			question_arraylist.add(5, "::blank::");
		} else if(level == 2) {

			/**
			 * Generating random number for an input field
			 */
			int rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

			/**
			 * Replacing one value in the question ArrayList by an input field
			 */
			question_arraylist.remove(rand1);
			question_arraylist.add(rand1, "::blank::");
		} else {

			/**
			 * Generating random number for an input field
			 */
			int rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

			/**
			 * Replacing one value in the question ArrayList by an input field
			 */
			question_arraylist.remove(rand1);
			question_arraylist.add(rand1, "::blank::");
			question_arraylist.add("::blank::");
			question_arraylist.add("::blank::");

			/**
			 * Storing the values for last 2 input fields in the ArrayList
			 */
			answer_arraylist.add(n + x);
			answer_arraylist.add(n);
		}

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_increasing_patterns_with_growing_difference()
		 @description Gets the problem set data containing answers for the input fields in the increasing patterns with growing difference.
		 @param level - int - Chooses a level. Values are 1 or 2.                           
		 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_patterns_for_increasing_patterns_with_growing_difference(int level) {

		/**
		 * Declaring the variables
		 */
		int n, x, y;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random values for n and x
		 */
		if(level == 1) {
			n = mg_giveRandomInteger(1, 100, random);
			x = mg_giveRandomInteger(2, 5, random);
			y = mg_giveRandomInteger(1, 3, random);
		} else {
			n = mg_giveRandomInteger(1, 100, random);
			x = mg_giveRandomInteger(6, 10, random);
			y = mg_giveRandomInteger(1, 3, random);
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		ArrayList<Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList and answer ArrayList
		 */
		for(int ii=1; ii<=7; ii++) {
			question_arraylist.add(Integer.toString(n));
			answer_arraylist.add(n);
			n += x;
			x += y;
		}

		/**
		 * Removing last 2 values from the question ArrayList
		 */
		question_arraylist.remove(question_arraylist.size() - 1);
		question_arraylist.remove(question_arraylist.size() - 2);

		/**
		 * Generating random number for an input field
		 */
		int rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

		/**
		 * Replacing one value in the question ArrayList by an input field
		 */
		question_arraylist.remove(rand1);
		question_arraylist.add(rand1, "::blank::");

		/**
		 * Adding two input fields at the end
		 */
		question_arraylist.add("::blank::");
		question_arraylist.add("::blank::");

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_decreasing_patterns_with_growing_difference()
		 @description Gets the problem set data containing answers for the input fields in the decreasing patterns with growing difference.
		 @param level - int - Chooses a level. Values are 1 or 2.                           
		 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_patterns_for_decreasing_patterns_with_growing_difference(int level) {

		/**
		 * Declaring the variables
		 */
		int n, x, y;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Generating random values for n and x
		 */
		if(level == 1) {
			n = mg_giveRandomInteger(1, 100, random);
			x = mg_giveRandomInteger(2, 5, random);
			y = mg_giveRandomInteger(1, 3, random);
		} else {
			n = mg_giveRandomInteger(1, 100, random);
			x = mg_giveRandomInteger(6, 10, random);
			y = mg_giveRandomInteger(1, 3, random);
		}

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		ArrayList<Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Creating temporary ArrayLists for storing the reverse values of question and answer ArrayLists
		 */
		ArrayList<String> temp1 = new ArrayList<String>();
		ArrayList<Integer> temp2 = new ArrayList<>();

		/**
		 * Storing reverse values for question and answer in the temporary ArrayLists
		 */
		for(int ii=1; ii<=7; ii++) {
			temp1.add(Integer.toString(n));
			temp2.add(n);
			n += x;
			x += y;
		}

		/**
		 * Storing the values in question ArrayList and answer ArrayList
		 */
		for(int ii=temp1.size() - 1; ii>=0; ii--) {
			question_arraylist.add(temp1.get(ii));
			answer_arraylist.add(temp2.get(ii));
		}

		/**
		 * Removing last 2 values from the question ArrayList
		 */
		question_arraylist.remove(question_arraylist.size() - 1);
		question_arraylist.remove(question_arraylist.size() - 2);

		/**
		 * Generating random number for an input field
		 */
		int rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

		/**
		 * Replacing one value in the question ArrayList by an input field
		 */
		question_arraylist.remove(rand1);
		question_arraylist.add(rand1, "::blank::");

		/**
		 * Adding two input fields at the end
		 */
		question_arraylist.add("::blank::");
		question_arraylist.add("::blank::");

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
	     @name mg_get_patterns_for_geometric_patterns()
		 @description Gets the problem set data containing answers for the missing geometric patterns.
		 @param level - int - Chooses a level. Values are 1 or 2.                           
		 @return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_patterns_for_geometric_patterns(int level) {

		/**
		 * Declaring the variables
		 */
		int n, x, rand1;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating random values for n and x
		 */
		if(level == 1) {
			n = 1;
			x = mg_giveRandomInteger(2, 10, random);
		} else {
			n = mg_giveRandomInteger(2, 10, random);
			x = mg_giveRandomInteger(2, 10, random);
		}

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		ArrayList<Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList and answer ArrayList
		 */
		question_arraylist.add(Integer.toString(n));
		question_arraylist.add(Integer.toString(n * x));
		answer_arraylist.add(n);
		answer_arraylist.add(n * x);
		int anss = x;
		for(int ii = 2; ii<=6; ii++) {
			anss *= x;
			n = n * anss;
			question_arraylist.add(Integer.toString(anss));
			answer_arraylist.add(anss);
		}

		/**
		 * Removing last 2 values from the question ArrayList
		 */
		question_arraylist.remove(question_arraylist.size() - 1);
		question_arraylist.remove(question_arraylist.size() - 2);

		/**
		 * Generating random number for an input field
		 */
		rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 1, random);

		/**
		 * Replacing one value in the question ArrayList by an input field
		 */
		question_arraylist.remove(rand1);
		question_arraylist.add(rand1, "::blank::");

		/**
		 * Adding two input fields at the end
		 */
		question_arraylist.add("::blank::");
		question_arraylist.add("::blank::");

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
	@name mg_get_patterns_for_squares()
	@description Gets the problem set data containing answers for the missing squares.                           
	@return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_patterns_for_squares() {

		/**
		 * Declaring the variables
		 */
		int rand1;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		ArrayList<Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList and answer ArrayList
		 */
		for(int ii=1; ii<=10; ii++) {
			question_arraylist.add(Integer.toString(ii * ii));	
			answer_arraylist.add(ii * ii);
		}

		/**
		 * Generating random number for an input field
		 */
		rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 3, random);

		/**
		 * Replacing one value in the question ArrayList by an input field
		 */
		question_arraylist.set(rand1, "::blank::");

		/**
		 * Adding two input fields at the end
		 */
		question_arraylist.set(question_arraylist.size() - 1, "::blank::");
		question_arraylist.set(question_arraylist.size() - 2, "::blank::");

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
	@name mg_get_patterns_for_cubes()
	@description Gets the problem set data containing answers for the missing cubes.                           
	@return HashMap (question ArrayList, answer ArrayList)
	 */
	public static Map<String, Object> mg_get_patterns_for_cubes() {

		/**
		 * Declaring the variables
		 */
		int rand1;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Creating ArrayLists containing values for question and answer 
		 */
		ArrayList<String> question_arraylist = new ArrayList<String>();
		ArrayList<Integer> answer_arraylist = new ArrayList<>();

		/**
		 * Storing values for question ArrayList and answer ArrayList
		 */
		for(int ii=1; ii<=8; ii++) {
			question_arraylist.add(Integer.toString(ii * ii * ii));	
			answer_arraylist.add(ii * ii * ii);
		}

		/**
		 * Generating random number for an input field
		 */
		rand1 = mg_giveRandomInteger(0, question_arraylist.size() - 3, random);

		/**
		 * Replacing one value in the question ArrayList by an input field
		 */
		question_arraylist.set(rand1, "::blank::");

		/**
		 * Adding two input fields at the end
		 */
		question_arraylist.set(question_arraylist.size() - 1, "::blank::");
		question_arraylist.set(question_arraylist.size() - 2, "::blank::");

		/**
		 * Storing the question ArrayList and answer ArrayList in the HashMap
		 */
		result.put("question_array", question_arraylist);
		result.put("answer_array", answer_arraylist);

		/**
		 * Return the HashMap with question ArrayList, answer ArrayList
		 */ 
		return result;    
	}

	/**
     @name mg_get_perimeter_and_area_perimeter_of_shapes_with_image()
	 @description Gets the problem set data containing the perimeter of a shape whose image is shown  
	 @param level - int - choose a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (shape, image of the shape, answer, unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_perimeter_of_shapes_with_image(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int answer = 0;
		String shape_name, shape_image, units_value;
		double answer1 = 0;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		if(level == 1) {

			/**
			 * Creating an array containing images of different shapes 
			 */
			String[] shapes_images_array = {"perimeter_hexagon_18.png", "perimeter_hexagon_24.png", "perimeter_hexagon_26.png", "perimeter_hexagon_36.png", "perimeter_hexagon_90.png", "perimeter_pentagon_18.png", "perimeter_pentagon_22.png", "perimeter_pentagon_25.png", "perimeter_pentagon_28.png", "perimeter_pentagon_29.png", "perimeter_rectangle_22.png", "perimeter_rectangle_32.png", "perimeter_rectangle_44.png", "perimeter_rectangle_58.png", "perimeter_square_16.png", "perimeter_square_28.png", "perimeter_square_40.png", "perimeter_square_68.png", "perimeter_square_72.png", "perimeter_triangle_12.png", "perimeter_triangle_16.png", "perimeter_triangle_18.png", "perimeter_triangle_23.png", "perimeter_triangle_24.png", "perimeter_triangle_27.png"};

			/**
			 * Generating a random number for selecting an image of a shape
			 */
			int temp = mg_giveRandomInteger(0, shapes_images_array.length - 1, random);

			/**
			 * Selecting an image
			 */
			shape_image = shapes_images_array[temp];

			/**
			 * Splitting the image name
			 */
			String[] temp1 = shape_image.split("\\.");

			/**
			 * Getting the image name
			 */
			String temp2 = temp1[0];

			/**
			 * Splitting the image name
			 */
			String[] temp3 = temp2.split("_");

			/**
			 * Getting the shape name
			 */
			shape_name = temp3[1];

			/**
			 * Obtaining value of the area
			 */
			String temp4 = temp3[2];

			/**
			 * Getting the answer
			 */
			answer = Integer.parseInt(temp4);

			/**
			 * Storing the values in the HashMap
			 */
			result.put("answer", answer);
			result.put("shape_name", shape_name);
			result.put("image", shape_image);
		} else if(level == 2) {

			/**
			 * Creating an array containing images of different shapes 
			 */
			String[] shapes_images_array = {"perimeter_hexagon_m_18.png", "perimeter_hexagon_m_36.png", "perimeter_hexagon_m_90.png", "perimeter_rectangle_m_22.png", "perimeter_rectangle_m_32.png", "perimeter_rectangle_m_44.png", "perimeter_rectangle_m_58.png", "perimeter_square_m_16.png", "perimeter_square_m_28.png", "perimeter_square_m_40.png", "perimeter_square_m_68.png", "perimeter_square_m_72.png", "perimeter_triangle_m_27.png", "perimeter_triangle_m_39.png", "perimeter_triangle_m_45.png"};

			/**
			 * Generating a random number for selecting an image of a shape
			 */
			int temp = mg_giveRandomInteger(0, shapes_images_array.length - 1, random);

			/**
			 * Selecting an image
			 */
			shape_image = shapes_images_array[temp];

			/**
			 * Splitting the image name
			 */
			String[] temp1 = shape_image.split("\\.");

			/**
			 * Getting the image name
			 */
			String temp2 = temp1[0];

			/**
			 * Splitting the image name
			 */
			String[] temp3 = temp2.split("_");

			/**
			 * Getting the shape name
			 */
			shape_name = temp3[1];

			/**
			 * Obtaining value of the area
			 */
			String temp4 = temp3[3];

			/**
			 * Getting the answer
			 */
			answer = Integer.parseInt(temp4);

			/**
			 * Storing the values in the HashMap
			 */
			result.put("answer", answer);
			result.put("shape_name", shape_name);
			result.put("image", shape_image);
		} else {

			/**
			 * Creating an array containing images of different shapes 
			 */
			String[] shapes_images_array = {"perimeter_hexagon_23.4.png", "perimeter_hexagon_29.76.png", "perimeter_hexagon_93.36.png", "perimeter_rectangle_11.2.png", "perimeter_rectangle_34.7.png", "perimeter_rectangle_54.6.png", "perimeter_rectangle_76.4.png", "perimeter_rectangle_88.2.png", "perimeter_square_12.28.png", "perimeter_square_39.2.png", "perimeter_square_47.6.png", "perimeter_square_59.6.png", "perimeter_square_70.0.png", "perimeter_square_89.4.png", "perimeter_triangle_10.0.png", "perimeter_triangle_23.5.png", "perimeter_triangle_27.5.png", "perimeter_triangle_50.4.png", "perimeter_triangle_63.7.png", "perimeter_triangle_100.0.png"};

			/**
			 * Generating a random number for selecting an image of a shape
			 */
			int temp = mg_giveRandomInteger(0, shapes_images_array.length - 1, random);

			/**
			 * Selecting an image
			 */
			shape_image = shapes_images_array[temp];

			/**
			 * Splitting the image name
			 */
			String[] temp1 = shape_image.split("\\.");

			/**
			 * Getting the image name
			 */
			String temp2 = temp1[0];

			/**
			 * Getting the decimal value
			 */
			String temp5 = temp1[1];

			/**
			 * Splitting the image name
			 */
			String[] temp3 = temp2.split("_");

			/**
			 * Getting the shape name
			 */
			shape_name = temp3[1];

			/**
			 * Obtaining value of the area
			 */
			String temp4 = temp3[2];

			/**
			 * Getting the answer
			 */
			answer1 = Double.parseDouble(temp4.concat(".").concat(temp5));

			/**
			 * Storing the values in the HashMap
			 */
			result.put("answer", answer1);
			result.put("shape_name", shape_name);
			result.put("image", shape_image);		    
		}

		/**
		 * Creating an array for units
		 */
		String[] units_array = {"m", "cm"};

		/**
		 * Generating a random number for selecting a random object name 
		 */
		int rand1 = mg_giveRandomInteger(0, units_array.length - 1, random);

		/**
		 * Selecting an object
		 */
		units_value = units_array[rand1];	    

		/**
		 * Returning the unit's value
		 */
		result.put("unit", units_value);

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			if(level == 1 || level == 2) {

				/**
				 * Creating the ArrayList
				 */ 
				ArrayList <Integer> mcq_option = new ArrayList<>(); 

				/**
				 * Storing the value of answer in the ArrayList
				 */
				mcq_option.add(answer);

				/**
				 * Calculating the lower limit and upper limit for remaining mcq options  
				 */
				int mcq_lower_limit, mcq_upper_limit;

				if((answer - 5) <= 10) {
					mcq_lower_limit = 10;
				} else {
					mcq_lower_limit = answer - 5;
				}

				if((answer + 5) >= 100) {
					mcq_upper_limit = 100;
				} else {
					mcq_upper_limit = answer + 5;
				} 

				/**
				 * Creating an array for remaining mcq options within the calculated range  
				 */ 
				int[] array;

				/**
				 * Generating remaining mcq options within the calculated range  
				 */ 
				array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

				/**
				 * Shuffling the data 
				 */ 
				array = mg_shuffleInt(array); 

				/**
				 * Ensuring that no 2 mcq options are the same
				 */
				for(int u : array){
					if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
						mcq_option.add(u);
					}
				}

				/**
				 * Shuffling the mcq options
				 */
				Collections.shuffle(mcq_option);

				/**
				 * Returning the values of mcq options to the HashMap
				 */
				result.put("mcq_options", mcq_option);
			} else {
				/**
				 * Creating the ArrayList  
				 */ 
				ArrayList <Double> mcq_option = new ArrayList<>();

				/**
				 * Storing the value of answer in the HashMap
				 */
				mcq_option.add(answer1);

				/**
				 * Calculating the lower limit and upper limit for remaining mcq options  
				 */
				double mcq_lower_limit, mcq_upper_limit;

				if((answer1 - 5.0) <= 10.0) {
					mcq_lower_limit = 10.0;
				} else {
					mcq_lower_limit = answer1 - 5.0;
				}

				if((answer1 + 5.0) >= 100.0) {
					mcq_upper_limit = 100.0;
				} else {
					mcq_upper_limit = answer1 + 5.0;
				} 

				/**
				 * Storing double values inside the mcq options 
				 */
				do {

					/**
					 * Generating a random number within the calculated range
					 */
					double rand2 = mg_giveRandomDouble(mcq_lower_limit, mcq_upper_limit, random);

					/** 
					 * Limiting the double value to 1 decimal place
					 */
					int temp3 = (int) (rand2 * 10);
					rand2 = (double) temp3 / 10;

					/**
					 * Ensuring that no 2 mcq options are the same
					 */	
					if(!mg_containsInArray(mcq_option,rand2)){
						mcq_option.add(rand2);
					}
				} while(mcq_option.size() < 4); 

				/**
				 * Shuffling the mcq options
				 */
				Collections.shuffle(mcq_option);

				/**
				 * Returning the values of mcq options to the HashMap
				 */
				result.put("mcq_options", mcq_option);
			}
		}

		/**
		 * Return the HashMap with image, name of the shape, answer, ArrayList of mcq options
		 */ 
		return result;    
	}
	
	/**
    @name mg_get_perimeter_and_area_calculating_perimeter_of_triangle()
	 @description Gets the problem set data for perimeter of a triangle
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (values of first side, second side, third side, name of first side, name of second side, name of third side, name of triangle, answer, unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_calculating_perimeter_of_triangle(int level, boolean mcq) {
	    
		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, n3 = 0, temp, answer = 0;
		String side1_name, side2_name, side3_name, triangle_name, units_value;
		double random_number_1, random_number_2, random_number_3, temp1, answer1 = 0;
		
		/**
	     * Initializing the random generator
	     */
	    Random random = new Random();
	    
		/**
	     * Creating an array for storing the names of the triangle
	     */
	    String[] triangle_names = {"ABC", "EFG", "MNO", "IJK", "QRS"};
	    
	    /**
	     * Generating a random number for selecting a name
	     */
	    int temp4 = mg_giveRandomInteger(0, triangle_names.length - 1, random);
	    
	    /**
	     * Selecting a name
	     */
	    triangle_name = triangle_names[temp4];
	    
	    /**
	     * Creating an array for storing names of the sides of the triangle
	     */
	    String[] side_names = {"AB", "BC", "AC", "EF", "FG", "EG", "MN", "NO", "MO", "IJ", "JK", "IK", "QR", "RS", "QS"};
	    
	    /**
	     * Selecting names of the sides of the triangle  
	     */
	    side1_name = side_names[temp4 * 3];
	    side2_name = side_names[(temp4 * 3) + 1];
	    side3_name = side_names[(temp4 * 3) + 2];
	    
	    /**
	     * Creating the HashMap 
	     */
	    Map<String, Object> result = new HashMap<>();
	    
	    /**
	     * Storing the values in the HashMap
	     */
	    result.put("side1_name", side1_name);
	    result.put("side2_name", side2_name);
	    result.put("side3_name", side3_name);
	    result.put("triangle_name", triangle_name);
	    
	    if (level == 1) {
	    	
	    	/**
		     * Generating random numbers for first side, second side, and third side
		     */
	    	n1 = mg_giveRandomInteger(1, 20, random);
	    	n2 = mg_giveRandomInteger(1, 20, random);
	    	if((n1 - n2) < 0) {                   /** if n1 - n2 is less than 0 */
	    		temp = 20 + (n1 - n2); 
	    		n3 = mg_giveRandomInteger((20 - temp) + 1, (n1 + n2), random);
	    	} else {							 /** if n1 is greater than n2 */
	    		n3 = mg_giveRandomInteger((n1 - n2) + 1, (n1 + n2), random);
	    	}
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = n1 + n2 + n3;
	    
	    	/**
	    	 * Storing the values of n1, n2, n3, and answer in the HashMap
	    	 */
	    	result.put("number1", n1);
	    	result.put("number2", n2);
	    	result.put("number3", n3);
	    	result.put("answer", answer);
	    } else if (level == 2) {
	    	
	    	/**
		     * Generating random numbers for first side, second side, and third side
		     */
	    	n1 = mg_giveRandomInteger(21, 100, random);
	    	n2 = mg_giveRandomInteger(21, 100, random);
	    	if((n1 - n2) < 0) {					    /** if n1 - n2 is less than 0 */
	    		temp = 100 + (n1 - n2); 
	    		n3 = mg_giveRandomInteger((100 - temp) + 1, (n1 + n2) , random);
	    	} else {								/** if n1 is greater than n2 */
	    		n3 = mg_giveRandomInteger((n1 - n2) + 1, (n1 + n2), random);
	    	}
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = n1 + n2 + n3;
	    	
	    	/**
	    	 * Storing the values of n1, n2, n3, and answer in the HashMap
	    	 */
	    	result.put("number1", n1);
	    	result.put("number2", n2);
	    	result.put("number3", n3);
	    	result.put("answer", answer);
	    } else if (level == 3) {
	    	int temp2;
	    	
	    	/**
	    	 * Generating a random number for n1
	    	 */
	    	random_number_1 = mg_giveRandomDouble(1.0, 30.9, random);   
	    	
	    	/**
	    	 *  Limiting the double value to 1 decimal place
	    	 */
	    	temp2 = (int) (random_number_1 * 10);					
	    	random_number_1 = (double) temp2 / 10; 
	    	
	    	/**
	    	 * Generating a random number for n1
	    	 */
	    	random_number_2 = mg_giveRandomDouble(1.0, 30.9, random);
	        
	    	/**
	    	 *  Limiting the double value to 1 decimal place
	    	 */
	    	temp2 = (int) (random_number_2 * 10);					
	        random_number_2 = (double) temp2 / 10;
	    	
	        if((random_number_1 - random_number_2) < 0) {			/** if n1 - n2 < 0 */
	    		temp1 = (random_number_2 - random_number_1); 
	    		random_number_3 = mg_giveRandomDouble((temp1) + 1, (random_number_1 + random_number_2) , random);
	    	
	    		/**
		    	 *  Limiting the double value to 1 decimal place
		    	 */
	    		temp2 = (int) (random_number_3 * 10);				
		        random_number_3 = (double) temp2 / 10;
	        } else {												/** if n1 is greater than n2 */
	    		random_number_3 = mg_giveRandomDouble((random_number_1 - random_number_2) + 1, (random_number_1 + random_number_2) , random);
	    		
	    		/**
		    	 *  Limiting the double value to 1 decimal place
		    	 */
	    		temp2 = (int) (random_number_3 * 10);				
		        random_number_3 = (double) temp2 / 10;
	    	}
	    	
	        /**
	         * Calculating the answer 
	         */
	    	answer1 = random_number_1 + random_number_2 + random_number_3;
	    	
	    	/**
	    	 *  Limiting the double value to 1 decimal place
	    	 */
	    	temp2 = (int) (answer1 * 10);							
	        answer1 = (double) temp2 / 10;
	        
	        /**
	         * Storing the values of n1, n2, n3, and answer in the HashMap
	         */
	    	result.put("number1", random_number_1);
	    	result.put("number2", random_number_2);
	    	result.put("number3", random_number_3);
	    	result.put("answer", answer1);
	    }

	    /**
	     * Creating an array for units
	     */
	    String[] units_array = {"m", "cm"};
	    
	    /**
	     * Generating a random number for selecting a random object name 
	     */
	    int rand1 = mg_giveRandomInteger(0, units_array.length - 1, random);
	    
	    /**
	     * Selecting an object
	     */
	    units_value = units_array[rand1];	    
	    
	    /**
	     * Returning the unit value
	     */
	    result.put("unit", units_value);
	  	    	      	       
	    /**
	     * Creating the mcq options 
	     */
	    if(mcq == true) {
	    	
	    	if(level == 1 || level == 2) {
	    	
	    		/**
		    	 * Creating the ArrayList  
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		int mcq_lower_limit, mcq_upper_limit;
	    		
	    		if(level == 1) {
	    			if((answer - 5) <= 3) {
	    				mcq_lower_limit = 3;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 79) {
	    				mcq_upper_limit = 79;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        } else {
		        	if((answer - 5) <= 43) {
	    				mcq_lower_limit = 43;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 399) {
	    				mcq_upper_limit = 399;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        }
	    		
	    		/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }

		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
		    } else {
		    	
	    		/**
		    	 * Creating the ArrayList  
		    	 */ 
		    	ArrayList <Double> mcq_option = new ArrayList<>();
	    		
		    	/**
		    	 * Storing the value of answer in the HashMap
		    	 */
		    	mcq_option.add(answer1);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		double mcq_lower_limit, mcq_upper_limit;
	    	
				if((answer1 - 5.0) <= 3.0) {
					mcq_lower_limit = 3.0;
				} else {
					mcq_lower_limit = answer1 - 5.0;
				}
				
				if((answer1 + 5.0) >= 122.6) {
					mcq_upper_limit = 122.6;
				} else {
					mcq_upper_limit = answer1 + 5.0;
				} 
				
				do {
					
					/**
					 * Generating a random number within the calculated range 
					 */
					double rand2 = mg_giveRandomDouble(mcq_lower_limit, mcq_upper_limit, random);
					
					/** 
					 * Limiting the double value to 1 decimal place
					 */
					int temp3 = (int) (rand2 * 10);				
					rand2 = (double) temp3 / 10;
			        
					/**
					 * Ensuring that no 2 options are the same
					 */
					if(!mg_containsInArray(mcq_option,rand2)){
			        	mcq_option.add(rand2);
			        }
				} while(mcq_option.size() < 4); 
	    	    
		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
		    }
	    }   	
    	 	       
     /**
	   * Return the HashMap with values of first side, second side, third side, name of first side, name of second side, name of third side, name of triangle, answer, unit, ArrayList of mcq options
	   */ 
     return result;    
 }
	
	/**
    @name mg_get_perimeter_and_area_calculating_perimeter_of_square()
	 @description Gets the problem set data for perimeter of a square
	 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (value of a single side, answer, name of the square, unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_calculating_perimeter_of_square(int level, boolean mcq) {
	    
		/**
		 * Declaring the variables
		 */
		int n1 = 0, answer = 0;
		String square_name, units_value;
		double random_number_1, answer1 = 0;
		
		/**
	     * Initializing the random generator
	     */
	    Random random = new Random();
	    
		/**
	     * Creating an array for storing names of square
	     */
	    String[] square_names = {"ABCD", "EFGH", "IJKL", "MNOP", "QRST", "UVWX"};
	    
	    /**
	     * Generating a random number for selecting a random name
	     */
	    int temp1 = mg_giveRandomInteger(0, square_names.length - 1, random);
	    
	    /**
	     * Selecting a name
	     */
	    square_name = square_names[temp1];
	    
	    /**
	     * Creating the HashMap 
	     */
	    Map<String, Object> result = new HashMap<>();
	    
	    /**
	     * Storing the square name in the HashMap
	     */
	    result.put("square_name", square_name);
	    
	    if (level == 1) {
	    	
	    	/**
		     * Generating a random number for one of the sides of a square
		     */
	    	n1 = mg_giveRandomInteger(1, 20, random);
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = 4 * n1;
	  
	    	/**
	    	 * Storing the value of n1 and answer in the HashMap
	    	 */
	    	result.put("number1", n1);
	    	result.put("answer", answer);
	    } else if (level == 2) {
	    	
	    	/**
		     * Generating a random number for one of the sides of a square
		     */
	    	n1 = mg_giveRandomInteger(21, 100, random);
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = 4 * n1;
	    	
	    	/**
	    	 * Storing the value of n1 and answer in the HashMap
	    	 */
	    	result.put("number1", n1);
	    	result.put("answer", answer);
	    } else if (level == 3) {
	    	
	    	/**
		     * Generating a random number for one of the sides of a square
		     */
	    	n1 = mg_giveRandomInteger(101, 1000, random);
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = 4 * n1;
	    	
	    	/**
	    	 * Storing the value of n1 and answer in the HashMap
	    	 */
	    	result.put("number1", n1);
	    	result.put("answer", answer);
	    } else {
	    	
	    	/**
		     * Generating a random number for one of the sides of a square
		     */
	    	random_number_1 = mg_giveRandomDouble(1.0, 100.0, random);
	    	
	    	/** 
	    	 * Limiting the double value to 1 decimal place
	         */
	    	int temp3 = (int) (random_number_1 * 10);				
	        random_number_1 = (double) temp3 / 10;
	        
	        /**
	    	 * Calculating the answer
	    	 */
	    	answer1 = 4 * random_number_1;
	    	
	    	/**
	    	 * Storing the value of n1 and answer in the HashMap
	    	 */
	    	result.put("number1", random_number_1);
	    	result.put("answer", answer1);
	    }

	    /**
	     * Creating an array of units
	     */
	    String[] units_array = {"m", "cm"};
	    
	    /**
	     * Generating a random number for selecting a random object name 
	     */
	    int rand1 = mg_giveRandomInteger(0, units_array.length - 1, random);
	    
	    /**
	     * Selecting an object
	     */
	    units_value = units_array[rand1];	    
	    
	    /**
	     * Returning the unit value
	     */
	    result.put("unit", units_value);
	  	    	      	       
	    /**
	     * Creating the mcq options 
	     */
	    if(mcq == true) {
	    	
	    	if(level == 1 || level == 2 || level == 3) {
	    	
	    		/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		int mcq_lower_limit = 0, mcq_upper_limit = 0;
	    		if(level == 1) {
	    			if((answer - 5) <= 4) {
	    				mcq_lower_limit = 4;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 80) {
	    				mcq_upper_limit = 80;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        } else if(level == 2) {
	    			if((answer - 5) <= 84) {
	    				mcq_lower_limit = 84;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 400) {
	    				mcq_upper_limit = 400;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        } else {
	    			if((answer - 5) <= 404) {
	    				mcq_lower_limit = 404;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 4000) {
	    				mcq_upper_limit = 4000;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 			
		        } 
	    		
	    		/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }

		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);

	    	} else {
	
	    		/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Double> mcq_option = new ArrayList<>();
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer1);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		double mcq_lower_limit, mcq_upper_limit;
	    	
				if((answer1 - 5.0) <= 4.0) {
					mcq_lower_limit = 4.0;
				} else {
					mcq_lower_limit = answer1 - 5.0;
				}
				
				if((answer1 + 5.0) >= 400.0) {
					mcq_upper_limit = 400.0;
				} else {
					mcq_upper_limit = answer1 + 5.0;
				} 
				
				do {
					
					/**
					 * Generating a random within the calculated range 
					 */
					double rand2 = mg_giveRandomDouble(mcq_lower_limit, mcq_upper_limit, random);
					
					/**
					 * Limiting the double value to 1 decimal place
					 */
					int temp3 = (int) (rand2 * 10);					
					rand2 = (double) temp3 / 10;
					
					/**
					 * Ensuring no 2 options are the same
					 */
			        if(!mg_containsInArray(mcq_option,rand2)){
			        	mcq_option.add(rand2);
			        }
				} while(mcq_option.size() < 4); 
	    	    
		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
		    }
	    }
	   	 	       
    /**
     * Return the HashMap with value of a single side, answer, name of the square, unit, ArrayList of mcq options
	  */ 
    return result;    
}
	
	/**
    @name mg_get_perimeter_and_area_calculating_perimeter_of_rectangle()
	 @description Gets the problem set data for perimeter of a rectangle
	 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (value of length, value of breadth, answer, name of the rectangle, unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_calculating_perimeter_of_rectangle(int level, boolean mcq) {
	    
		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, answer = 0;
		String rectangle_name, units_value;
		double random_number_1, random_number_2, answer1 = 0;
		
		/**
	     * Initializing the random generator
	     */
	    Random random = new Random();
	    
		/**
		 * Creating an array containing names for the rectangle
		 */
	    String[] rectangle_names = {"ABCD", "EFGH", "IJKL", "MNOP", "QRST", "UVWX"};
	    
	    /**
	     * Generating a random number for selecting a name
	     */
	    int temp1 = mg_giveRandomInteger(0, rectangle_names.length - 1, random);
	    
	    /**
	     * Selecting a name
	     */
	    rectangle_name = rectangle_names[temp1];
	    
	    /**
	     * Creating the HashMap 
	     */
	    Map<String, Object> result = new HashMap<>();
	    
	    /**
	     * Storing the name of the rectangle in the HashMap
	     */
	    result.put("rectangle_name", rectangle_name);
	    
	    if (level == 1) {
	    	
	    	/**
		     * Generating random numbers for the length and breadth of the rectangle
		     */
	    	n1 = mg_giveRandomInteger(1, 20, random);
	    	do{
	    		n2 = mg_giveRandomInteger(1, 20, random);
	    	} while(n2 == n1);
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = 2 * (n1 + n2);
	    
	    	/**
	    	 * Storing the values of n1, n2, and answer
	    	 */
	    	result.put("number1", n1);
	    	result.put("number2", n2);
	    	result.put("answer", answer);
	    	
	    } else if (level == 2) {
	    	
	    	/**
	    	 * Generating random numbers for the length and breadth of the rectangle
	    	 */
	    	n1 = mg_giveRandomInteger(21, 100, random);
	    	do{
	    		n2 = mg_giveRandomInteger(21, 100, random);
	    	} while(n2 == n1);
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = 2 * (n1 + n2);
	    	
	    	/**
	    	 * Storing the values of n1, n2, and answer
	    	 */
	    	result.put("number1", n1);
	    	result.put("number2", n2);
	    	result.put("answer", answer);

	    } else if (level == 3) {
	    	
	    	/**
	    	 * Generating random numbers for the length and breadth of the rectangle
	    	 */
	    	n1 = mg_giveRandomInteger(101, 1000, random);
	    	do{
	    		n2 = mg_giveRandomInteger(101, 1000, random);
	    	} while(n2 == n1);
	    	
	    	/**
	    	 * Calculating the answer
	    	 */
	    	answer = 2 * (n1 + n2);
	    	
	    	/**
	    	 * Storing the values of n1, n2, and answer
	    	 */
	    	result.put("number1", n1);
	    	result.put("number2", n2);
	    	result.put("answer", answer);
	
	    } else {
	    	
	    	/**
	    	 * Generating random number for n1
	    	 */
	    	random_number_1 = mg_giveRandomDouble(1.0, 100.0, random);
	    	
	    	/**
	    	 * Limiting the double value to 1 decimal place
	    	 */
	    	int temp3 = (int) (random_number_1 * 10);				
	        random_number_1 = (double) temp3 / 10;
	        
	        /**
	    	 * Generating random number for n1
	    	 */
	        random_number_2 = mg_giveRandomDouble(1.0, 100.0, random);
	    	
	        /**
	    	 * Limiting the double value to 1 decimal place
	    	 */
	        int temp4 = (int) (random_number_2 * 10);				
	        do{
	        	random_number_2 = (double) temp4 / 10;
	        } while(random_number_2 == random_number_1);
	    	
	        /**
	         * Calculating the answer
	         */
	        answer1 = 2 * (random_number_1 + random_number_2);
	        
	        /**
	    	 * Limiting the double value to 1 decimal place
	    	 */
	        int temp5 = (int) (answer1 * 10);						
	        answer1 = (double) temp5 / 10;
	        
	        /**
	         * Storing the values of n1, n2, and answer in the HashMap
	         */
	    	result.put("number1", random_number_1);
	    	result.put("number2", random_number_2);
	    	result.put("answer", answer1);
	    }

	    /**
	     * Creating an array of units
	     */
	    String[] units_array = {"m", "cm"};
	    
	    /**
	     * Generating a random number for selecting a random unit 
	     */
	    int rand1 = mg_giveRandomInteger(0, units_array.length - 1, random);
	    
	    /**
	     * Selecting a unit
	     */
	    units_value = units_array[rand1];	    
	    
	    /**
	     * Returning the unit value
	     */
	    result.put("unit", units_value);
	  	    	      	       
	    /**
	     * Creating the mcq options 
	     */
	    if(mcq == true) {
	    	
	    	if(level == 1 || level == 2 || level == 3) {
	    	
	    		/**
		    	 * Creating the ArrayList  
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		int mcq_lower_limit = 0, mcq_upper_limit = 0;
	    		
	    		if(level == 1) {
	    			if((answer - 5) <= 6) {
	    				mcq_lower_limit = 6;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 78) {
	    				mcq_upper_limit = 78;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        } else if(level == 2) {
	    			if((answer - 5) <= 86) {
	    				mcq_lower_limit = 86;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 398) {
	    				mcq_upper_limit = 398;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        } else {
	    			if((answer - 5) <= 406) {
	    				mcq_lower_limit = 406;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 3998) {
	    				mcq_upper_limit = 3998;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 			
		        } 
	    		
	    		/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }

		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);

	    	} else {
	
	    		/**
		    	 * Creating the ArrayList  
		    	 */ 
		    	ArrayList <Double> mcq_option = new ArrayList<>();
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer1);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		double mcq_lower_limit, mcq_upper_limit;

				if((answer1 - 5.0) <= 6.0) {
					mcq_lower_limit = 6.0;
				} else {
					mcq_lower_limit = answer1 - 5.0;
				}
				
				if((answer1 + 5.0) >= 399.8) {
					mcq_upper_limit = 399.8;
				} else {
					mcq_upper_limit = answer1 + 5.0;
				} 
				
				do {
					
					/**
					 * Generating random number within the calculated range
					 */
					double rand2 = mg_giveRandomDouble(mcq_lower_limit, mcq_upper_limit, random);
					
					/** 
					 * Limiting the double value to 1 decimal place
					 */
					int temp3 = (int) (rand2 * 10);			
					rand2 = (double) temp3 / 10;
			        
					/**
					 * Ensuring that no 2 options are the same
					 */
					if(!mg_containsInArray(mcq_option,rand2)){
			        	mcq_option.add(rand2);
			        }
				} while(mcq_option.size() < 4); 
	    	    
		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
		    }
	    }
	   	 	       
   /**
	 * Return the HashMap with value of length, value of breadth, answer, name of the rectangle, unit, ArrayList of mcq options
	 */ 
   return result;    
}

	/**
     @name mg_get_perimeter_and_area_calculating_area_for_shapes_with_unit_boxes()
	 @description Gets the problem set data containing the area of the image shown  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image, name of the shape, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_calculating_area_for_shapes_with_unit_boxes(boolean mcq) {
	    
		/**
		 * Declaring the variables
		 */
		int answer;
		String shape_image, shape_name;
		
		/**
	     * Initializing the random generator
	     */
	    Random random = new Random();
	    
	    /**
		 * Creating an array containing images of different shapes 
		 */
	    String[] shapes_images_array = {"area_parallelogram_2.png", "area_parallelogram_4.png", "area_parallelogram_8.png", "area_parallelogram_10.png", "area_rectangle_6.png", "area_rectangle_8.png", "area_rectangle_12.png", "area_rectangle_15.png", "area_square_4.png", "area_square_8.png", "area_square_18.png", "area_square_20.png", "area_triangle_1.png", "area_triangle_4.png", "area_triangle_8.png", "area_triangle_9.png"};
	    
	    /**
	     * Generating a random number for selecting an image of shape
	     */
	    int temp = mg_giveRandomInteger(0, shapes_images_array.length - 1, random);
	    
	    /**
	     * Selecting an image
	     */
	    shape_image = shapes_images_array[temp];
	   
	    /**
	     * Splitting the image name
	     */
	    String[] temp1 = shape_image.split("\\.");
	    
	    /**
	     * Getting the image name
	     */
	    String temp2 = temp1[0];
	    
	    /**
	     * Splitting the image name
	     */
	    String[] temp3 = temp2.split("_");
	    
	    /**
	     * Getting the image name
	     */
	    shape_name = temp3[1];
	    
	    /**
	     * Obtaining value of the area
	     */
	    String temp4 = temp3[2];
	    
	    /**
	     * Getting the answer
	     */
	    answer = Integer.parseInt(temp4);
	    
	    /**
	     * Creating the HashMap 
	     */
	    Map<String, Object> result = new HashMap<>();
	    
	    /**
	     * Storing the values of image of the shape, name of the shape, and answer in the HashMap
	     */
	    result.put("image", shape_image);
	    result.put("shape_name", shape_name);
	    result.put("answer", answer);
	    	  	    	      	       
	    /**
	     * Creating the mcq options 
	     */
	    if(mcq == true) {
	    	
	    		/**
		    	 * Creating the ArrayList  
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList 
		    	 */
		    	mcq_option.add(answer);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		int mcq_lower_limit = 0, mcq_upper_limit = 0;
	    		 			
	   			if((answer - 5) <= 1) {
	   				mcq_lower_limit = 1;
	   			} else {
	       		mcq_lower_limit = answer - 5;
	   			}
		         
	   			if((answer + 5) >= 20) {
	   				mcq_upper_limit = 20;
	   			} else {
	   				mcq_upper_limit = answer + 5;
	   			} 
	    			
	    		/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }

		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
	    }
	   	 	       
	   /**
		* Return the HashMap with image, name of the shape, answer, ArrayList of mcq options
		*/ 
	   return result;    
	}
	
	/**
     @name mg_get_perimeter_and_area_calculating_area_from_nets_of_3_d_figures()
	 @description Gets the problem set data containing the area of the image shown  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (image, name of the shape, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_calculating_area_from_nets_of_3_d_figures(boolean mcq) {
	    
		/**
		 * Declaring the variables
		 */
		int answer;
		String shape_image, shape_name;
		
		/**
	     * Initializing the random generator
	     */
	    Random random = new Random();
	    
		/**
		 * Creating an array containing images of different shapes 
		 */
	    String[] shapes_images_array = {"cube_net_6.png", "cuboid_net_14.png", "hexagonal_prism_net_18.png", "rectangular_pyramid_net_14.png", "square_based_pyramid_net_3.png", "triangular_prism_net_7.png"};
	    
	    /**
	     * Generating a random number for selecting an image of shape
	     */
	    int temp = mg_giveRandomInteger(0, shapes_images_array.length - 1, random);
	    
	    /**
	     * Selecting an image
	     */
	    shape_image = shapes_images_array[temp];
	   
	    /**
	     * Splitting the image name
	     */
	    String[] temp1 = shape_image.split("\\.");
	    
	    /**
	     * Getting the image name
	     */
	    String temp2 = temp1[0];
	    
	    /**
	     * Splitting the image name
	     */
	    String[] temp3 = temp2.split("_");
	    
	    /**
	     * Obtaining the answer 
	     */
	    answer = Integer.parseInt(temp3[temp3.length - 1]);
	    
	    shape_name = temp3[0];
	    
	    /**
	     * Obtaining name of the shape 
	     */
	    for(int ii = 1 ; ii < temp3.length - 1 ; ii++) {
	    	shape_name += " " + temp3[ii];
	    }
	    
	    /**
	     * Creating the HashMap 
	     */
	    Map<String, Object> result = new HashMap<>();
	    
	    /**
	     * Storing the values in the HashMap
	     */
	    result.put("image", shape_image);
	    result.put("shape_name", shape_name);
	    result.put("answer", answer);
	    	  	    	      	       
	    /**
	     * Creating the mcq options 
	     */
	    if(mcq == true) {
	    	
	    		/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		int mcq_lower_limit = 0, mcq_upper_limit = 0;		
	   			
	    		if((answer - 5) <= 1) {
	   				mcq_lower_limit = 1;
	   			} else {
	       		mcq_lower_limit = answer - 5;
	   			}
		         
	   			if((answer + 5) >= 20) {
	   				mcq_upper_limit = 20;
	   			} else {
	   				mcq_upper_limit = answer + 5;
	   			} 
	    			
	    		/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }

		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
	    }
	   	 	       
	  /**
	   * Return the HashMap with image, name of the shape, answer, ArrayList of mcq options
	   */ 
	  return result;    
	}

	/**
    @name mg_get_perimeter_and_area_calculating_area_of_rectangle()
	 @description Gets the problem set data for area of a rectangle
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (value of length, value of breadth / width, smaller side name (breadth or width), answer, unit, sq. unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_calculating_area_of_rectangle(int level, boolean mcq) {
	    
		/**
		 * Declaring the variables
		 */
		int n1 = 0, n2 = 0, answer = 0;
		String smaller_side_name, units_value, square_units_value;
		
		/**
	     * Initializing the random generator
	     */
	    Random random = new Random();
	    
		/**
		 * Creating an array for storing the names of smaller side of the rectangle 
		 */
	    String[] smaller_side_names_array = {"breadth", "width"};
	    
	    /**
	     * Generating a random number for selecting a name
	     */
	    int temp1 = mg_giveRandomInteger(0, smaller_side_names_array.length - 1, random);
	    
	    /**
	     * Assigning name to the smaller side of the rectangle
	     */
	    smaller_side_name = smaller_side_names_array[temp1];
	    
	    /**
	     * Creating the HashMap 
	     */
	    Map<String, Object> result = new HashMap<>();
	    
	    /**
	     * Storing the name of the smaller side of the rectangle in the HashMap
	     */
	    result.put("smaller_side_name", smaller_side_name);
	    
	    if (level == 1) {
	    	
	    	/**
		     * Generating random numbers for the length and breadth / width of the rectangle
		     */
	    	n1 = mg_giveRandomInteger(1, 10, random);
	    	do{
	    		n2 = mg_giveRandomInteger(1, 10, random);
	    	} while(n2 == n1);
	    	
	    } else {
	    	
	    	/**
		     * Generating random numbers for the length and breadth / width of the rectangle
		     */
	    	n1 = mg_giveRandomInteger(11, 30, random);
	    	do{
	    		n2 = mg_giveRandomInteger(11, 30, random);
	    	} while(n2 == n1);
	    } 
	    
	    /**
   	 * Calculating the answer
   	 */
   	answer = n1 * n2;
   
   	/**
   	 * Storing the values of n1, n2, and answer in the HashMap
   	 */
   	result.put("number1", n1);
   	result.put("number2", n2);
   	result.put("answer", answer);
	    
   	/**
	     * Creating arrays for units and sq. units
	     */
	    String[] units_array = {"m", "cm"};
	    String[] square_units_array = {"sq. m", "sq. cm"};
	    
	    /**
	     * Generating a random number for selecting a random unit and sq. unit 
	     */
	    int rand1 = mg_giveRandomInteger(0, units_array.length - 1, random);
	    
	    /**
	     * Selecting a unit and sq. unit
	     */
	    units_value = units_array[rand1];
	    square_units_value = square_units_array[rand1];
	    
	    /**
	     * Returning the unit and sq. unit value
	     */
	    result.put("unit", units_value);
	    result.put("sq_unit", square_units_value);
	  	    	      	       
	    /**
	     * Creating the mcq options 
	     */
	    if(mcq == true) {
	    	
	    		/**
		    	 * Creating the ArrayList  
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
	    		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		int mcq_lower_limit = 0, mcq_upper_limit = 0;
	    		if(level == 1) {
	    			
	    			if((answer - 5) <= 1) {
	    				mcq_lower_limit = 1;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 100) {
	    				mcq_upper_limit = 100;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        } else {
	    			
	    			if((answer - 5) <= 121) {
	    				mcq_lower_limit = 121;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 900) {
	    				mcq_upper_limit = 900;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        }	
	    		
	    		/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }

		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
	    }
	   	 	       
	   /**
		* Return the HashMap with value of length, value of breadth / width, smaller side name (breadth or width), answer, unit, sq. unit, ArrayList of mcq options
		*/ 
	   return result;    
	}
	
	/**
    @name mg_get_perimeter_and_area_calculating_area_of_square()
	 @description Gets the problem set data for area of a square
	 @param level - int - Chooses a level. Values are 1 or 2.  
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap (value of one of the sides of a square (n1), answer, unit, sq. unit, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_and_area_calculating_area_of_square(int level, boolean mcq) {
	    
		/**
		 * Declaring the variables
		 */
		int n1 = 0, answer = 0;
		String units_value, square_units_value;
		
		/**
	     * Initializing the random generator
	     */
	    Random random = new Random();
	        
	    if (level == 1) {
	    	
	    	/**
		     * Generating a random number for one of the sides of a square 
		     */
	    	n1 = mg_giveRandomInteger(1, 10, random);
	    	
	    } else if (level == 2) {
	    	
	    	/**
		     * Generating a random number for one of the sides of a square 
		     */
	    	n1 = mg_giveRandomInteger(11, 30, random);
	    } 
	    
	    /**
	     * Calculating the answer
	     */
	    answer = n1 * n1;
  
	    /**
	     * Creating the HashMap 
	     */
	    Map<String, Object> result = new HashMap<>();
	    
	    /**
	     * Storing the values in the HashMap
	     */
	    result.put("number1", n1);
	    result.put("answer", answer);
	    
	    /**
	     * Creating arrays for units and sq. units
	     */
	    String[] units_array = {"m", "cm"};
	    String[] square_units_array = {"sq. m", "sq. cm"};
	    
	    /**
	     * Generating a random number for selecting a random unit and sq. unit 
	     */
	    int rand1 = mg_giveRandomInteger(0, units_array.length - 1, random);
	    
	    /**
	     * selecting a unit and sq. unit
	     */
	    units_value = units_array[rand1];
	    square_units_value = square_units_array[rand1];
	    
	    /**
	     * Returning the unit and sq. unit value to the HashMap
	     */
	    result.put("unit", units_value);
	    result.put("sq_unit", square_units_value);
	  	    	      	       
	    /**
	     * Creating the mcq options 
	     */
	    if(mcq == true) {
	    	
	    		/**
		    	 * Creating the ArrayList  
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
	    		
		    	/**
		    	 * Storing the value of answer in the HashMap
		    	 */
		    	mcq_option.add(answer);
	    	
	    		/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
	    		int mcq_lower_limit = 0, mcq_upper_limit = 0;
	    		if(level == 1) {
	    			if((answer - 5) <= 1) {
	    				mcq_lower_limit = 1;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 100) {
	    				mcq_upper_limit = 100;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			} 
		        } else {
	    			if((answer - 5) <= 121) {
	    				mcq_lower_limit = 121;
	    			} else {
	        		mcq_lower_limit = answer - 5;
	    			}
	         
	    			if((answer + 5) >= 900) {
	    				mcq_upper_limit = 900;
	    			} else {
	    				mcq_upper_limit = answer + 5;
	    			}
		        }	
	    		
	    		/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }

		    	/**
	      	  	 * Shuffling the mcq options
	      	  	 */
	      	  	Collections.shuffle(mcq_option);
	      	  	
	      	    /**
	      	  	 * Returning the values of mcq options to the HashMap
	      	  	 */
	      	  	result.put("mcq_options", mcq_option);
	    }
	   	 	       
	   /**
		* Return the HashMap with value of one of the sides of a square (n1), answer, unit, sq. unit, ArrayList of mcq options
		*/ 
	   return result;    
	}

	/**
    @name mg_get_area_for_daily_life_square_examples()
	 @description Gets the problem set data containing area of daily life square objects.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_area_for_daily_life_square_examples(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating a random value for number1
		 */
		number1 = mg_giveRandomInteger(1, 10, random);
		
		/**
		 * Obtaining the answer
		 */
		answer = number1 * number1;
				
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();

		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 12, random);
		
		if(type == 2) {
			result.put("question", "A square shaped wall painting has sides " + number1 + " feet long. What is the area of a wall painting?");
		} else if(type == 3) {
			result.put("question", "A square calendar is " + number1 + " inch tall. What is the area of calendar?");
		} else if(type == 4) {
			result.put("question", "A square shaped piece of cardboard has one side of " + number1 + " millimeter length. What is its area?");
		} else if(type == 5) {
			result.put("question", "A shop in a mall is square shaped and its side is " + number1 + " meter long. What is the area of shop?");
		} else if(type == 6) {
			result.put("question", "A square swimming pool has side measuring " + number1 + " meter. What is the area of the swimming pool?");
		} else if(type == 7) {
			result.put("question", "A square shaped water tank has one side of " + number1 + " meter. What is the area of the water tank?");
		} else if(type == 8) {
			result.put("question", "An oil tank has " + number1 + " meter side which is square in shape. What is the area of the oil tank?");
		} else if(type == 9) {
			result.put("question", "A society has decided to build a park in the corner of society. Park shape was decided to be square and side will be " + number1 + " meter. What is the area of the park?");
		} else if(type == 10) {
			result.put("question", temp.get(0) + " has a handkerchief of " + number1 + " cm long and it has square shape. What is the area of the handkerchief?");
		} else if(type == 11) {
			result.put("question", "Standard 5th classroom's window is square shaped with side " + number1 + " meter. What is the area of the window?");
		} else if(type == 12) {
			result.put("question", "Standard 4th classroom's chair seat is square shaped with side " + number1 + " centimeter. What is the area of the chair seat?");
		} else {
			result.put("question", "A square mirror has sides " + number1 + " feet long. What is the mirror's area?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_area_for_daily_life_rectangular_examples()
	 @description Gets the problem set data containing area of daily life rectangular objects.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_area_for_daily_life_rectangular_examples(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2
		 */
		number1 = mg_giveRandomInteger(5, 20, random);
		
		do{
			number2 = mg_giveRandomInteger(4, number1 - 1, random);
		} while(number2 > number1);
		
		/**
		 * Obtaining the answer
		 */
		answer = number1 * number2;
				
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 15, random);
		
		if(type == 2) {
			result.put("question", "A poster is " + number1 + " meter tall and " + number2 + " meter wide. What is its area?");
		} else if(type == 3) {
			result.put("question", "A motor garage is " + number1 + " meter long and " + number2 + " meter wide. What is its area?");
		} else if(type == 4) {
			result.put("question", "A calendar is " + number1 + " inch tall and " + number2 + " inch wide. What is the area of calendar?");
		} else if(type == 5) {
			result.put("question", "A shop in a mall is " + number1 + " meter long and " + number2 + " meter wide. What is the area of shop?");
		} else if(type == 6) {
			result.put("question", "A notebook is " + number1 + " inch tall and " + number2 + " inch wide. What is its area?");
		} else if(type == 7) {
			result.put("question", "A rectangular swimming pool measures " + number1 + " meter by " + number2 + " meter. What is the area of the swimming pool?");
		} else if(type == 8) {
			result.put("question", "A rectangular water tank lid measures " + number1 + " meter by " + number2 + " meter. What is the area of the water tank?");
		} else if(type == 9) {
			result.put("question", "An oil tank measures " + number1 + " meter by " + number2 + " meter. What will be the area of the lid on that tank?");
		} else if(type == 10) {
			result.put("question", "A society park measures " + number1 + " meter by " + number2 + " meter. What is the area of the park?");
		} else if(type == 11) {
			result.put("question", "Rohan's mother has a sari of " + number1 + " m long and " + number2 + " meter wide. What is the area of the sari?");
		} else if(type == 12) {
			result.put("question", "Standard 5th classroom has a blackboard of " + number1 + " m long and " + number2 + " meter wide. What is the area of the blackboard?");
		} else if(type == 13) {
			result.put("question", "Standard 5th classroom's door is " + number1 + " m tall and " + number2 + " meter wide. What is the area of the door?");
		} else if(type == 14) {
			result.put("question", "My bedsheet is " + number1 + " m long and " + number2 + " meter wide. What is the area of the bedsheet?");
		} else if(type == 15) {
			result.put("question", "Standard 5th classroom's table is " + number1 + " m long and " + number2 + " meter wide. What is the area of the table?");
		} else {
			result.put("question", "A rectangular piece of cardboard is " + number1 + " millimeter tall and " + number2 + " millimeter wide. What is its area?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_area_for_cost_of_land_subtype_1()
	 @description Gets the problem set data containing cost of land for the given dimensions.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_area_for_cost_of_land_subtype_1(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		String unit, sq_unit;
		int number1, number2, number3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2, number3
		 */
		number1 = mg_giveRandomInteger(10, 50, random);
		number2 = mg_giveRandomInteger(5, number1 - 5, random);
		number3 = mg_giveRandomInteger(50, 100, random);
		
		/**
		 * Creating an array containing units
		 */
		String[] unit_options = {"m", "feet"};
		String[] singular_unit_options = {"m", "foot"};
		
		/**
		 * Generating a random number for selecting a unit
		 */
		int rand1 = mg_giveRandomInteger(0, unit_options.length - 1, random);
		
		/**
		 * Selecting a unit and its equivalent sq. unit
		 */
		unit = unit_options[rand1];
		sq_unit = singular_unit_options[rand1];
		
		/**
		 * Obtaining the answer
		 */
		answer = number1 * number2 * number3;
				
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 4, random);
		
		if(type == 2) {
			result.put("question", "A garden has length " + number1 + " " + unit + " and breadth " + number2 + " " + unit + ". The cost of spreading the sand is Rs. " + number3 + " per sq " + sq_unit + ". What will be the cost if we spread the sand on the whole garden?");
		} else if(type == 3) {
			result.put("question", "A school playground is " + number1 + " " + unit + " long and " + number2 + " " + unit + " wide. The cost of spreading the sand is Rs. " + number3 + " per sq " + sq_unit + ". What will be the cost if we spread the sand on the whole playground?");
		} else if(type == 4) {
			result.put("question", temp.get(0) + " wants to purchase a land area " + number1 + " feet by " + number2 + " feet. Owner has fixed the cost of land Rs. " + number3 + " per sq foot. How many rupees does " + temp.get(0) + " have to spend for the land?");
		} else {
			result.put("question", "A wall that is " + number1 + " " + unit + " long and " + number2 + " " + unit + " wide has to be painted. If the labor charges are Rs. " + number3 + " per sq " + sq_unit + ", what is the cost of labor for painting this wall?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_area_for_cost_of_land_subtype_2()
	 @description Gets the problem set data containing cost of land for the given dimensions.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_area_for_cost_of_land_subtype_2(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2, number3
		 */
		number1 = mg_giveRandomInteger(50, 100, random);
		number2 = mg_giveRandomInteger(100, 500, random);
		number3 = mg_giveRandomInteger(50, 100, random);
				
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 2, random);
		
		if(type == 2) {
			result.put("question", "If the cost of 1 sq. m of a plot of land is Rs. " + number1 + ", find the total cost of a square plot of land having side " + number2 + " m?");
			
			/**
			 * Obtaining the answer
			 */
			answer = number1 * number2 * number2;
			
			/**
			 * Storing the answer in the HashMap
			 */
			result.put("answer", answer);
		} else {
			result.put("question", "If the cost of 1 sq. m of a plot of land is Rs. " + number1 + "; find the total cost of a plot of land that is " + number2 + " m long and " + number3 + " m broad?");
			
			/**
			 * Obtaining the answer
			 */
			answer = number1 * number2 * number3;
			
			/**
			 * Storing the answer in the HashMap
			 */
			result.put("answer", answer);
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_area_for_cost_of_laying_rectangular_floor_subtype_1()
	 @description Gets the problem set data containing cost of laying rectangular floor.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_area_for_cost_of_laying_rectangular_floor_subtype_1(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2, number3
		 */
		number1 = mg_giveRandomInteger(3, 10, random);
		number2 = mg_giveRandomInteger(2, number1 - 1, random);
		number3 = mg_giveRandomInteger(10, 50, random);
				
		/**
		 * Obtaining the answer
		 */
		answer = number1 * number2 * number3;
		
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 2, random);
		
		if(type == 2) {
			result.put("question", "One room has length " + number1 + " m and breadth " + number2 + " m. If the cost of labor for laying 1 sq m of the floor is Rs. " + number3 + ", what will be the total cost of labor?");			
		} else {
			result.put("question", "Roshani's bedroom is " + number1 + " m long and " + number2 + " m wide. If the cost of 1 sq m of the carpet is Rs. " + number3 + ", what will be the total cost of the carpet to cover the floor of bedroom?");
		}

		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_area_for_cost_of_laying_rectangular_floor_subtype_2()
	 @description Gets the problem set data containing cost of laying rectangular floor.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_area_for_cost_of_laying_rectangular_floor_subtype_2(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2, number3
		 */
		number1 = mg_giveRandomInteger(20, 50, random);
		number2 = mg_giveRandomInteger(10, number1 - 10, random);
		number3 = mg_giveRandomInteger(50, 100, random);
				
		/**
		 * Obtaining the answer
		 */
		answer = number1 * number2 * number3;
		
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Returning the question to be displayed to the HashMap
		 */
		result.put("question", "A gardener digs a flower bed that is " + number1 + " m long and " + number2 + " m wide. If the cost of labor for digging 1 sq m of the bed is Rs. " + number3 + ", what will be the total cost of labor?");			
		
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_area_for_cost_of_laying_a_square_floor()
	 @description Gets the problem set data containing cost of laying a square floor.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_area_for_cost_of_laying_a_square_floor(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();
		
		/**
		 * Generating random values for number1, number2
		 */
		number1 = mg_giveRandomInteger(50, 100, random);
		number2 = mg_giveRandomInteger(50, 100, random);
				
		/**
		 * Obtaining the answer
		 */
		answer = number1 * number1 * number2;
		
		/**
		 * Storing the answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 2, random);
		
		if(type == 2) {
			result.put("question", "A gardener digs a square shaped flower bed that is " + number1 + " m long. If the cost of labor for digging 1 sq m of the bed is Rs. " + number2 + ", what will be the total cost of labor?");
		} else {
			result.put("question", "One side of a square room is " + number1 + " m. If the cost of labor for laying 1 sq m of the floor is Rs. " + number2 + ", what will be the total cost of labor?");
		}			
		
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_perimeter_for_daily_life_examples_of_rectangles()
	 @description Gets the problem set data for perimeter of rectangles.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_for_daily_life_examples_of_rectangles(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1 and number2
		 */
		number1 = mg_giveRandomInteger(5, 15, random);

		do{
			number2 = mg_giveRandomInteger(4, number1 - 1, random);
		} while(number2 > number1);
		
		/**
		 * Obtaining the answer
		 */
		answer = 2 * (number1 + number2);
				
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 8, random);
		
		if(type == 2) {
			result.put("question", "Standard 5th classroom has a blackboard of " + number1 + " m long and " + number2 + " meter wide. What is the perimeter of the blackboard?");
		} else if(type == 3) {
			result.put("question", "Standard 5th classroom's door is " + number1 + " m tall and " + number2 + " meter wide. What is the perimeter of the door?");
		} else if(type == 4) {
			result.put("question", "My bedsheet is " + number1 + " m long and " + number2 +  " meter wide. What is the perimeter of the bedsheet?");
		} else if(type == 5) {
			result.put("question", "Standard 5th classroom's table is " + number1 + " m long and " + number2 + " meter wide. What is the perimeter of the table?");
		} else if(type == 6) {
			result.put("question", "A hockey field is " + number1 + " meter long and " + number2 + " meter wide. How long is the boundary of the field?");
		} else if(type == 7) {
			result.put("question", "Ganpat's wife works in a tailor's shop. She has to fix a lace around a table cloth. How much long lace does she need if the length of the table cloth is " + number1 + " meter and width is " + number2 + " meter?");
		} else if(type == 8) {
			result.put("question", temp.get(0) + " wants to make a display board for school. Display board is " + number1 + " meter by " + number2 + " meter. " + temp.get(0) + " wants to stick a ribbon around the board. What is the length of the ribbon does " + temp.get(0) + " need?");
		} else {
			result.put("question", "Rohan's mother has a sari of " + number1 + " m long and " + number2 + " meter wide. What is the perimeter of the sari?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0; 	
			if((answer - 5) <= 9) {
				mcq_lower_limit = 9;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 29) {
				mcq_upper_limit = 29;  
			} else {
				mcq_upper_limit = answer + 5;
			}
			
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_perimeter_for_daily_life_examples_of_square()
	 @description Gets the problem set data for perimeter of squares.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_for_daily_life_examples_of_square(boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1
		 */
		number1 = mg_giveRandomInteger(1, 10, random);
		
		/**
		 * Obtaining the answer
		 */
		answer = 4 * number1;
				
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 12, random);
		
		if(type == 2) {
			result.put("question", "A square shaped wall painting has sides " + number1 + " feet long. What is the perimeter of a wall painting?");
		} else if(type == 3) {
			result.put("question", "A square calendar is " + number1 + " inch tall. What is the perimeter of calendar?");
		} else if(type == 4) {
			result.put("question", "A square shaped piece of cardboard has one side of " + number1 + " millimeter length. What is its perimeter?");
		} else if(type == 5) {
			result.put("question", "A shop in a mall is square shaped and its side is " + number1 + " meter long. What is the perimeter of shop?");
		} else if(type == 6) {
			result.put("question", "A square swimming pool has a side measuring " + number1 + " meter. What is the perimeter of the swimming pool?");
		} else if(type == 7) {
			result.put("question", "A square shaped water tank has one side " + number1 + " meter. What is the perimeter of the water tank?");
		} else if(type == 8) {
			result.put("question", "An oil tank has a " + number1 + " meter side which is square in shape. What is the perimeter of the oil tank?");
		} else if(type == 9) {
			result.put("question", "A society has decided to build a park in the corner of society. Park shape was decided to be square and its side will be " + number1 + " meter. What is the perimeter of the park?");
		} else if(type == 10) {
			result.put("question", temp.get(0) + " has a handkerchief of " + number1 + " cm long and it has square shape. What is the perimeter of the handkerchief?");
		} else if(type == 11) {
			result.put("question", "Standard 5th classroom's window is square shaped with side " + number1 + " meter. What is the perimeter of the window?");
		} else if(type == 12) {
			result.put("question", "Standard 4th classroom's chair seat is square shaped with side " + number1 + " centimeter. What is the perimeter of the chair seat?");
		} else {
			result.put("question", "A square mirror has sides " + number1 + " feet long. What is the mirror's perimeter?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};

			/**
			 * Calculating the lower limit and upper limit for the remaining mcq options
			 */
			int mcq_lower_limit = 0, mcq_upper_limit = 0; 	
			if((answer - 5) <= 4) {
				mcq_lower_limit = 4;  
			} else {
				mcq_lower_limit = answer - 5;
			}

			if((answer + 5) >= 40) {
				mcq_upper_limit = 40;  
			} else {
				mcq_upper_limit = answer + 5;
			}
			
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_perimeter_for_multiple_rounds_around_a_rectangle()
	 @description Gets the problem set data containing perimeter for multiple rounds around a rectangle.
	 @param level - int - Chooses a level. Values are 1 and 2.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_for_multiple_rounds_around_a_rectangle(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1, number2, number3
		 */
		if(level == 1) {
			number1 = mg_giveRandomInteger(10, 100, random);
		
			do{
				number2 = mg_giveRandomInteger(10, 100, random);
			} while(number2 > number1);
		
			number3 = mg_giveRandomInteger(2, 5, random);
		} else {
			number1 = mg_giveRandomInteger(100, 500, random);
			
			do{
				number2 = mg_giveRandomInteger(50, 500, random);
			} while(number2 > number1);
		
			do{
				number3 = mg_giveRandomInteger(2, 9, random);
			} while(number3 == number2);
		}
		
		/**
		 * Obtaining the answer
		 */
		answer = number1 * 2 * (number2 + number3);
				
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 6, random);
		
		if(type == 2) {
			result.put("question", number1 + " rounds of wire are decided to be put around a field. If the field is " + number2 + " meter long and " + number3 + " meter wide, how much wire will be needed?");
		} else if(type == 3) {
			result.put("question", "Ramu's field is " + number2 + " meter long and " + number3 + " meter wide. His grandfather takes " + number1 + " rounds daily of the whole field. How much distance does Ramu's grandfather walk daily?");
		} else if(type == 4) {
			result.put("question", "The length of the rectangular farm is " + number2 + " m and its width is " + number3 + " m. A fence of " + number1 + " rounds has to be put along its edges. How much wire will be needed for fencing?");
		} else if(type == 5) {
			result.put("question", "Cows are kept in a rectangular plot of " + number2 + " m long and " + number3 + " m wide. The plot needs to be fenced around " + number1 + " times with wire. How long wire will be needed to cover the plot?");
		} else if(type == 6) {
			result.put("question", "A school has a wall compound of " + number2 + " m long and " + number3 + " m wide. Committee decided to increase the height of the wall by putting wire above the wall " + number1 + " times. How long wire will be needed to cover the wall?");
		} else {
			result.put("question", "If we take " + number1 + " rounds around the field that is " + number2 + " m long and " + number3 + " m wide. What is the distance we walk in total?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
			
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_perimeter_for_multiple_rounds_around_a_square()
	 @description Gets the problem set data containing perimeter for multiple rounds around a square.
	 @param level - int - Chooses a level. Values are 1 and 2.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_for_multiple_rounds_around_a_square(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1, number2
		 */
		if(level == 1) {
			number1 = mg_giveRandomInteger(2, 9, random);
			number2 = mg_giveRandomInteger(10, 100, random);
		} else {
			number1 = mg_giveRandomInteger(2, 9, random);	
			number2 = mg_giveRandomInteger(100, 500, random);
		}
		
		/**
		 * Obtaining the answer
		 */
		answer = number1 * 4 * number2;
				
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 7, random);
		
		if(type == 2) {
			result.put("question", "A square shaped water tank has one side of " + number2 + " meter. How much wire do we need to put a wire fencing " + number1 + " times?");
		} else if(type == 3) {
			result.put("question", "Buffaloes are kept in a square shaped plot having side " + number2 + " meter. The plot needs to be fenced around " + number1 + " times with wire. How long wire will be needed to cover the plot?");
		} else if(type == 4) {
			result.put("question", "If we take " + number1 + " rounds around the field that is square shaped of side " + number2 + " m long. What is the distance we walk?");
		} else if(type == 5) {
			result.put("question", "Ramu's field has same length from all four sides. The length of the side is " + number2 + " meter. His grandfather takes " + number1 + " rounds of the whole field daily. How much distance does Ramu's grandfather walk daily?");
		} else if(type == 6) {
			result.put("question", "A school has a wall compound of " + number2 + " m long from all four sides. Committee decided to increase the height of the wall by putting wire above the wall " + number1 + " times. How long wire will be needed to cover the wall?");
		} else if(type == 7) {
			result.put("question", "A square shaped playground is protected by putting a fence " + number1 + " times. The length of one side of the playground is " + number2 + " meter. How long wire is used to protect the playground?");
		} else {
			result.put("question", temp.get(0) + " completes " + number1 + " rounds around a square park of side " + number2 + " m. Find the distance covered by " + temp.get(0) + "?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
			
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
    @name mg_get_perimeter_for_cost_of_fencing_a_single_round()
	 @description Gets the problem set data containing cost for fencing a single round of rectangle.
	 @param level - int - Chooses a level. Values are 1 and 2.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_for_cost_of_fencing_a_single_round(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1, number2, number3
		 */
		if(level == 1) {
			number1 = mg_giveRandomInteger(10, 100, random);
			
			do{
				number2 = mg_giveRandomInteger(10, 100, random);
			} while(number2 > number1);
			
			number3 = mg_giveRandomInteger(10, 100, random);
		} else {
			number1 = mg_giveRandomInteger(100, 500, random);
			
			do{
				number2 = mg_giveRandomInteger(50, 100, random);
			} while(number2 > number1);
			
			number3 = mg_giveRandomInteger(10, 100, random);
		}
		
		/**
		 * Obtaining the answer
		 */
		answer = number3 * 2 * (number1 + number2);
				
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Creating a temporary ArrayList for storing the value of name 
		 */
		ArrayList<String> temp = mg_getRandomNames();
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 3, random);
		
		if(type == 2) {
			result.put("question", temp.get(0) + " wants to make a display board for school. Display board is " + number1 + " meter by " + number2 + " meter. " + temp.get(0) + " wants to stick a ribbon around the board. If ribbon costs Rs. " + number3 + " per meter, what will be the total cost of ribbon?");
		} else if(type == 3) {
			result.put("question", "A society park measures " + number1 + " meter by " + number2 + " meter. Society wants to put a wire compound around the park. What will be the cost of putting a compound if the cost of wire is Rs. " + number3 + " per meter?");
		} else {
			result.put("question", "Ganpat's wife works in a tailor's shop. She has to fix a lace around a table cloth. What will be the cost of the lace if the length of the table cloth is " + number1 + " meter, width is " + number2 + " meter and the cost of one meter lace is Rs. " + number3 + "?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
			
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

	/**
     @name mg_get_perimeter_for_cost_of_fencing_multiple_rounds()
	 @description Gets the problem set data containing cost for fencing multiple rounds of rectangle.
	 @param level - int - Chooses a level. Values are 1 and 2.    
	 @param mcq - boolean - Multiple choice options required true / false - default is false                        
	 @return HashMap(question, answer, ArrayList of mcq options)
	 */
	public static Map<String, Object> mg_get_perimeter_for_cost_of_fencing_multiple_rounds(int level, boolean mcq) {

		/**
		 * Declaring the variables
		 */
		int number1, number2, number3, number4, answer;

		/**
		 * Initializing the random generator
		 */
		Random random = new Random();

		/**
		 * Creating the HashMap 
		 */
		Map<String, Object> result = new HashMap<>();

		/**
		 * Generating a random values for number1, number2, number3, number4
		 */
		if(level == 1) {
			number1 = mg_giveRandomInteger(10, 100, random);
			
			do{
				number2 = mg_giveRandomInteger(10, 100, random);
			} while(number2 > number1);
			
			number3 = mg_giveRandomInteger(2, 5, random);
			
			number4 = mg_giveRandomInteger(10, 100, random);
		} else {
			number1 = mg_giveRandomInteger(100, 500, random);
			
			do{
				number2 = mg_giveRandomInteger(50, 100, random);
			} while(number2 > number1);
			
			number3 = mg_giveRandomInteger(2, 5, random);
			
			number4 = mg_giveRandomInteger(10, 100, random);
		}
		
		/**
		 * Obtaining the answer
		 */
		answer = number4 * number3 * 2 * (number1 + number2);
				
		/**
		 * Storing the value of answer in the HashMap
		 */
		result.put("answer", answer);
		
		/**
		 * Generating a random number for selecting a question
		 */
		int type = mg_giveRandomInteger(1, 3, random);
		
		if(type == 2) {
			result.put("question", "Mangal society has a park measuring " + number1 + " meter by " + number2 + " meter. Society wants to put " + number3 + " rounds of wire around the park. What will be the cost of putting a compound if the cost of wire is Rs. " + number4 + " per meter?");
		} else if(type == 3) {
			result.put("question", "The length of the rectangular farm is " + number1 + " m and width is " + number2 + " m. A fence of " + number3 + " rounds has to be put along its edges. If the wire costs " + number4 + " rupees per meter, what will be the total cost of wire needed for fencing?");
		} else {
			result.put("question", "The length of the rectangular plot is " + number1 + " m and width is " + number2 + " m. A fence of " + number3 + " rounds has to be made along its edges. If the wire costs " + number4 + " rupees per meter, what will be the total cost of wire needed for fencing?");
		}
				
		/**
		 * Creating the mcq options 
		 */
		if(mcq == true) {

			/**
			 * Creating the ArrayList 
			 */ 
			ArrayList <Integer> mcq_option = new ArrayList<>(); 

			/**
			 * Storing the value of answer in the ArrayList
			 */
			mcq_option.add(answer);

			/**
			 * Creating an int array
			 */
			int[] array = {0};
			
			/**
			 * Generating remaining mcq options within the calculated range
			 */
			array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

			/**
			 * Shuffling the data
			 */
			array = mg_shuffleInt(array); 

			/**
			 * Ensuring that no 2 options are the same
			 */
			for(int u : array) {   
				if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
					mcq_option.add(u);
				}
			}

			/**
			 * Shuffling the mcq options
			 */
			Collections.shuffle(mcq_option);

			/**
			 * Storing the mcq options in the HashMap
			 */
			result.put("mcq_options", mcq_option);
		}

		/**
		 * Return the HashMap with question, answer, ArrayList of mcq options
		 */ 
		return result;    
	}

		/**
	     @name mg_get_place_values_for_making_teens()
		 @description Gets the problem set data for identifying the number of more objects required to get the required answer
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (name of the object (object), image of the object (object_image), random number for the total number of objects (n1), answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_for_making_teens(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, answer;
			String object, object_image;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Array of object names
		     */
		    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
		    
		    /**
		     * Generating a random number for getting the index position of an object from the above array  
		     */
		    int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		    
		    /**
		     * Selecting an object from the above array and creating its image  
		     */	
		    object = objects_array[rand1]; 
		    object_image = object.concat(".png");
		    
		    /**
		     * Generating a random number for the total number of objects
		     */
		    n1 = mg_giveRandomInteger(11, 19, random);
		    
		    /**
		     * Calculating the answer
		     */
		    answer = n1 - 10;
		    
		    /**
		     *  Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Returning the object name, object image, total number of objects, and answer
		     */
		    result.put("object", object);
		    result.put("image", object_image);
		    result.put("number", n1);
		    result.put("number_statc", 10);
		    result.put("answer", answer);
		    	      	       
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
	  	
		    	/**
		    	 * Creating the ArrayList options 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList 
		    	 */
		    	mcq_option.add(answer);
		    	
		    	/**
		    	 * Calculating the lower limit and upper limit for the remaining mcq options  
		    	 */ 
		        int mcq_lower_limit, mcq_upper_limit;
		        if((answer - 5) <= 1) {
		        	mcq_lower_limit = 1;
		        } else {
		        	mcq_lower_limit = answer - 5;
		        }
		          
		        if((answer + 5) >= 9) {
		         	mcq_upper_limit = 9;	
		        } else {
		            mcq_upper_limit = answer + 5;
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		
		    	/**
	     	  	 * Shuffling the mcq options
	     	  	 */
	     	  	Collections.shuffle(mcq_option);
	     	  	
	     	    /**
	     	  	 * Returning the values of mcq options to the HashMap
	     	  	 */
	     	  	result.put("mcq_options", mcq_option);
		    } 
	     	 	       
	      /**
		   * Return the HashMap with name of the object (object), image of the object (object_image), random number for the total number of objects (n1), answer, ArrayList of mcq options
		   */ 
	      return result;    
	    }
		
		/**
	     @name mg_get_place_values_for_total_number_of_objects_with_images()
		 @description Gets the problem set data for the total number of objects, which is received by adding a random number with 10
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (image of the object (object_image), random number (n1), answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_for_total_number_of_objects_with_images(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, answer;
			String object, object_image;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Array of object names
		     */
		    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
		    
		    /**
		     * Generating a random number for getting the index position of an object from the above array  
		     */
		    int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		    
		    /**
		     * Selecting an object from the above array and creating its image 
		     */	
		    object = objects_array[rand1]; 
		    object_image = object.concat(".png");
		    
		    /**
		     * Generating a random number
		     */
		    n1 = mg_giveRandomInteger(1, 9, random);
		    
		    /**
		     * Calculating the answer
		     */
		    answer = 10 + n1;
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Returning the object image, random number, and answer
		     */
		    result.put("image", object_image);
		    result.put("number", n1);
		    result.put("answer", answer);
		    	      	       
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
	 	
		    	/**
		    	 * Creating the ArrayList options 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		    	
		    	/**
		    	 * Calculating the lower limit and upper limit for the remaining mcq options  
		    	 */ 
		        int mcq_lower_limit, mcq_upper_limit;
		        if((answer - 5) <= 11) {
		        	mcq_lower_limit = 11;
		        } else {
		        	mcq_lower_limit = answer - 5;
		        }
		          
		        if((answer + 5) >= 19) {
		         	mcq_upper_limit = 19;
		        } else {
		            mcq_upper_limit = answer + 5;
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		
		    	/**
	    	  	 * Shuffling the mcq options
	    	  	 */
	    	  	Collections.shuffle(mcq_option);
	    	  	
	    	    /**
	    	  	 * Returning the values of mcq options to the HashMap
	    	  	 */
	    	  	result.put("mcq_options", mcq_option);
		    } 
	    	 	       
	     /**
		  * Return the HashMap with name of the image of the object (object_image), random number (n1), answer, ArrayList of mcq options
		  */ 
	     return result;    
	   }
		
		/**
	     @name mg_get_place_values_for_total_number_of_objects_without_images()
		 @description Gets the problem set data for the number that needs to be added to 10 to get the random value for total number of objects
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (random number for total number of objects, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_for_total_number_of_objects_without_images(boolean mcq) {
		    
			Map<String, Object> result = mg_get_place_values_for_making_teens(mcq);
			result.remove("object");
			result.remove("image");	
			   	 	       
		    /**
			 * Return the HashMap with random number for total number of objects, answer, ArrayList of mcq options
			 */ 
		    return result;    
	    }
		
		/**
	     @name mg_get_place_values_counting_objects()
		 @description Gets the problem set data for identifying the group that has a particular number of objects
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (name of the object (object), image of the object (object_iamge), random number for the total number of objects (n1), ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_counting_objects(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1;
			String object, object_image;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Array of object names
		     */
		    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
		    
		    /**
		     * Generating a random number for getting the index position of an object from the above array  
		     */
		    int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		    
		    /**
		     * Selecting an object from the above array and creating its image  
		     */	
		    object = objects_array[rand1]; 
		    object_image = object.concat(".png");
		    
		    /**
		     * Generating a random number for the total number of objects
		     */
		    n1 = mg_giveRandomInteger(11, 19, random);
		    
		    /**
		     *  Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Returning the object name, object image, and total number of objects
		     */
		    result.put("object", object);
		    result.put("image", object_image);
		    result.put("answer", n1);
		    result.put("number", n1);
		    	      	       
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
	 	
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer
		    	 */
		    	mcq_option.add(n1);
		    	
		    	/**
		    	 * Creating the wrong mcq options
		    	 */
		    	int wrong_1;
		    	wrong_1 = 10;
		    	
		    	int wrong_2;
		    	wrong_2 = n1 + 1 ;
		    	
		    	int wrong_3;
		    	wrong_3 = n1 - 1;
		    	
		    	int wrong_4;	    	
		    	wrong_4 = n1 + 2;
		    	
		    	int wrong_5;	    	
		    	wrong_5 = n1 - 2;
		    	
		    	/**
				 * Creating an array for wrong mcq options
				 */
				int[] value_option = {wrong_1, wrong_2, wrong_3, wrong_4, wrong_5};
				
				/**
				 * Shuffling the wrong mcq options
				 */
				value_option = mg_shuffleInt(value_option); 

				/**
		         * Ensuring that no 2 mcq options are the same
		         */
	            for(int u : value_option){
	                if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
	                    mcq_option.add(u);
	                }
	            }
		
		    	/**
	    	  	 * Shuffling the mcq options
	    	  	 */
	    	  	Collections.shuffle(mcq_option);
	    	  	
	    	    /**
	    	  	 * Returning the values of mcq options to the HashMap
	    	  	 */
	    	  	result.put("mcq_options", mcq_option);
		    } 
	    	 	       
	     /**
		  * Return the HashMap with name of the object (object), image of the object (object_iamge), random number for the total number of objects (n1), ArrayList of mcq options
		  */ 
	     return result;    
	   }

		/**
	     @name mg_get_place_values_groups_of_ten_objects()
		 @description Gets the problem set data for identifying the number of groups that have 10 objects
		 @param level - int - Chooses a level. Values can be 1 or 2.
		 @param object_name_flag - boolean - if true, returns object name and object image, else returns only the image of the object - default is false
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (name of the object (object), image of the object (object_image), random number for the total number of objects (n1), answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_groups_of_ten_objects(int level, boolean object_name_flag, boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int random_number_1, n1;
			String object, object_image;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Array of object names
		     */
		    String[] objects_array = {"buttons_bundle", "crayons_bundle", "markers_bundle", "pencils_bundle"};
		    
		    /**
		     * Generating a random number for getting the index position of an object from the above array  
		     */
		    int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		    
		    /**
		     * Selecting an object from the above array and creating its image 
		     */	
		    object = objects_array[rand1]; 
		    object_image = object.concat(".png");
		    
		    /**
		     * Generating a random number for the total number of objects
		     */
		    if(level == 1) {
		    	random_number_1 = mg_giveRandomInteger(1, 10, random);
		    } else {
		    	random_number_1 = mg_giveRandomInteger(1, 50, random);
		    }
		    
		    /**
		     * Calculating the total number of objects
		     */
		    n1 = 10 * random_number_1;
		    
		    /**
		     *  Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Returning the object name, object image, total number of objects, and number of groups i.e. answer
		     */
		    if(object_name_flag == true) {
		    	if(level == 1) {
		    		result.put("object", object.replace("_bundle", ""));
		    		result.put("bundled_image", object_image);	
		    	} else {
		    		result.put("object", object.replace("_bundle", ""));
		    	}
		    	
		    } else {
		    	if(level == 1) {
		    		result.put("bundled_image", object_image);
		    	}
		    }
		    
		    /**
		     * Storing the value of n1 and answer in the HashMap
		     */
		    result.put("number", n1);
		    result.put("answer", random_number_1);
		    	      	       
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(random_number_1);
		    	
		    	/**
		    	 * Calculating the upper limit and lower limit for the remaining mcq options
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        if(level == 1) {
		        	if((random_number_1 - 3) <= 1) {
		        		mcq_lower_limit = 1;
		        	} else {
		        		mcq_lower_limit = random_number_1 - 3;
		        	}
		           
			        if((random_number_1 + 3) >= 10) {
			         	mcq_upper_limit = 10;
			        } else {
			            mcq_upper_limit = random_number_1 + 3;
			        }
		        } else {
		        	if((random_number_1 - 5) <= 1) {
		        		mcq_lower_limit = 1;
		        	} else {
		        		mcq_lower_limit = random_number_1 - 5;
		        	}
		           
			        if((random_number_1 + 5) >= 50) {
			         	mcq_upper_limit = 50;
			        } else {
			            mcq_upper_limit = random_number_1 + 5;
			        }
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
	   	  	 	 * Shuffling the mcq options
	   	  	 	 */
	   	  		Collections.shuffle(mcq_option);
	   	  	
	   	  		/**
	   	  		 * Returning the values of mcq options to the HashMap
	   	  		 */
	   	  		result.put("mcq_options", mcq_option);
		    } 
	   	 	       
	    /**
		 * Return the HashMap with name of the object (object), image of the object (object_image), random number for the total number of objects (n1), answer, ArrayList of mcq options
		 */ 
	    return result;    
	  }
		
		/**
	     @name mg_get_place_values_groups_of_hundred_objects()
		 @description Gets the problem set data for identifying the number of groups that have 100 objects
		 @param level - int - Chooses a level. Values can be 1 or 2.
		 @param object_name_flag - boolean - if true, returns object name - default is false
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (name of the object (object), random number for the total number of objects (n1), answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_groups_of_hundred_objects(int level, boolean object_name_flag, boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int random_number_1, n1;
			String object;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Array of object names
		     */
		    String[] objects_array = {"erasers", "pens", "pencils", "sharpners", "apples", "oranges", "mangoes", "chocolates"};
		    
		    /**
		     * Generating a random number for getting the index position of an object from the above array  
		     */
		    int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		    
		    /**
		     * Selecting an object from the above array  
		     */	
		    object = objects_array[rand1]; 
		    
		    /**
		     * Generating a random number for the total number of objects
		     */
		    if(level == 1) {
		    	random_number_1 = mg_giveRandomInteger(1, 10, random);
		    } else {
		    	random_number_1 = mg_giveRandomInteger(1, 50, random);
		    }
		    
		    /**
		     * Calculating the total number of objects
		     */
		    n1 = 100 * random_number_1;
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Returning the object name to the HashMap if object_name_flag is set to true  
		     */
		    if(object_name_flag == true) {
	    		result.put("object", object);	
		    }
		    
		    /**
		     * Returning the total number of objects and number of groups i.e. answer to the HashMap 
		     */
		    result.put("number", n1);
		    result.put("answer", random_number_1);
		    	      	       
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(random_number_1);
		    	
		    	/**
		    	 * Calculating the lower limit and upper limit for the remaining mcq options
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        if(level == 1) {
		        	if((random_number_1 - 3) <= 1) {
		        		mcq_lower_limit = 1;
		        	} else {
		        		mcq_lower_limit = random_number_1 - 3;
		        	}
		          
			        if((random_number_1 + 3) >= 10) {
			         	mcq_upper_limit = 10;
			        } else {
			            mcq_upper_limit = random_number_1 + 3;
			        }
		        } else {
		        	if((random_number_1 - 5) <= 1) {
		        		mcq_lower_limit = 1;
		        	} else {
		        		mcq_lower_limit = random_number_1 - 5;
		        	}
		          
			        if((random_number_1 + 5) >= 50) {
			         	mcq_upper_limit = 50;      	
			        } else {
			            mcq_upper_limit = random_number_1 + 5;
			        }
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
	  	  	 	 * Shuffling the mcq options
	  	  	 	 */
	  	  		Collections.shuffle(mcq_option);
	  	  	
	  	  		/**
	  	  		 * Returning the values of mcq options to the HashMap
	  	  		 */
	  	  		result.put("mcq_options", mcq_option);
		    } 
	  	 	       
		   /**
			* Return the HashMap with name of the object (object), random number for the total number of objects (n1), answer, ArrayList of mcq options
			*/ 
		   return result;    
	 }
		
		/**
	     @name mg_get_place_values_convert_between_tens_and_units()
		 @description Gets the problem set data for tens in terms of units or vice versa 
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (random number, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_convert_between_tens_and_units(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, n2, answer;
			
			/**
		     * Initializing random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating a random number 
		     */
	    	n1 = mg_giveRandomInteger(1, 10, random);
	    	
	    	/**
		   	 * Calculating the equivalent value in units of the above random number
		   	 */
	    	n2 = 10 * n1;
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		   /**
		    * Generating a random number for selecting an input field 
		    */
		    int rand1 = mg_giveRandomInteger(0, 1, random);
		   
		    /**
		     * Returning the random number, answer
		     */
		    if(rand1 == 0) {
		    	result.put("number1", n1);
		    	answer = n2;
		    	result.put("number2", "::blank::");
			    result.put("answer", answer);
		    } else {
		    	result.put("number2", n2);
		    	answer = n1;
		    	result.put("number1", "::blank::");
		    	result.put("answer", answer);
		    }
		    	      	       
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		    	 
		    	/**
		    	 * Calculating the lower limit and upper limit for the remaining mcq options
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        if(rand1 == 0) {
		        	if((answer - 5) <= 10) {
		        		mcq_lower_limit = 10;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		           
			        if((answer + 5) >= 100) {
			         	mcq_upper_limit = 100;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else {
		        	if((answer - 3) <= 1) {
		        		mcq_lower_limit = 1;
		        	} else {
		        		mcq_lower_limit = answer - 3;
		        	}
		          
			        if((answer + 3) >= 10) {
			         	mcq_upper_limit = 10;
			        } else {
			            mcq_upper_limit = answer + 3;
			        }
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
	 	  	 	 * Shuffling the mcq options
	 	  	 	 */
	 	  		Collections.shuffle(mcq_option);
	 	  	
	 	  		/**
	 	  		 * Returning the values of mcq options to the HashMap
	 	  		 */
	 	  		result.put("mcq_options", mcq_option);
		    } 
	 	 	       
		  /**
		   * Return the HashMap with random number, answer, ArrayList of mcq options
		   */ 
		  return result;    
	    }

		/**
	     @name mg_get_place_values_convert_between_hundreds_and_tens()
		 @description Gets the problem set data for hundreds in terms of tens or vice versa 
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (random number, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_convert_between_hundreds_and_tens(boolean mcq) {
		    
			Map<String, Object> result = mg_get_place_values_convert_between_tens_and_units(mcq);
					 	       
			 /**
			  * Return the HashMap with random number, answer, ArrayList of mcq options
			  */ 
			 return result;    
	    }

		/**
	     @name mg_get_place_values_convert_between_hundreds_and_units()
		 @description Gets the problem set data for hundreds in terms of units or vice versa 
		 @param mcq - boolean - Multiple choice options required true / false - default is false                        
		 @return HashMap (random number, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_convert_between_hundreds_and_units(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, n2, answer;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating a random number 
		     */
		   	n1 = mg_giveRandomInteger(1, 10, random);
		   	
		   	/**
		   	 * Calculating the equivalent value in units of the above random number
		   	 */
		   	n2 = 100 * n1;
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Returning the random number, answer
		     */
		    int rand1 = mg_giveRandomInteger(0, 1, random);
		    if(rand1 == 0) {								/** if n1 is replaced by an input field */
		    	result.put("number1", n1);
		    	answer = n2;
		    	result.put("number2", "::blank::");
		    	result.put("answer", answer);
		    } else {										/** if n2 is replaced by an input field */
		    	result.put("number2", n2);
		    	answer = n1;
		    	result.put("number1", "::blank::");
			    result.put("answer", answer);
		    }
		    	      	       
		    /**
		     *  Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList options 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		    	
		    	/**
		    	 * Calculating the upper limit and lower limit for the remaining mcq options
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        if(rand1 == 0) {
		        	if((answer - 5) <= 100) {
		        		mcq_lower_limit = 100;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 1000) {
			         	mcq_upper_limit = 1000;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else {
		        	if((answer - 3) <= 1) {
		        		mcq_lower_limit = 1;
		        	} else {
		        		mcq_lower_limit = answer - 3;
		        	}
		          
			        if((answer + 3) >= 10) {
			         	mcq_upper_limit = 10;
			        } else {
			            mcq_upper_limit = answer + 3;
			        }
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 
		 	       
		 /**
		  * Return the HashMap with random number, answer, ArrayList of mcq options
		  */ 
		 return result;    
	    }

		/**
	     @name mg_get_place_values_counting_tens_and_units()
		 @description Gets the problem set data for the number of tens and units in a given number  
		 @param level - int - Chooses a level. Values are 1 or 2.                        
		 @return HashMap (image of the object, random number (n1), answer in tens, answer in units)
		 */
		public static Map<String, Object> mg_get_place_values_counting_tens_and_units(int level) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, answer_tens, answer_units;
			String image1, image2;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Array of object names
		     */
		    String[] objects_array = {"buttons_individual", "crayons_individual", "markers_individual", "pencils_individual"};
		    String[] objects_bundle_array = {"buttons_bundle", "crayons_bundle", "markers_bundle", "pencils_bundle"};
		    
		    /**
		     * Generating a random number for getting the index position of an object from the above array  
		     */
		    int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		    
		    /**
		     * Selecting an object from the above array and returning its image  
		     */	
		    image1 = objects_array[rand1].concat(".png");
		    image2 = objects_bundle_array[rand1].concat(".png");
		    result.put("image", image1);
		    result.put("bundled_image", image2);
		    
		    /**
		     * Generating a random number 
		     */
	    	if(level == 1) {
	    		n1 = mg_giveRandomInteger(11, 99, random);
	    	} else {
	    		n1 = mg_giveRandomInteger(100, 999, random);
	    	}
	    	
	    	/**
	    	 * Calculating the number of tens and units
	    	 */
	    	answer_tens = n1 / 10;
	    	answer_units = n1 % 10;
	        
	    	/**
	    	 * Returning the random number, number of tens, and number of units
	    	 */
	    	result.put("number", n1);
	    	result.put("answer1", answer_tens);
	    	result.put("answer2", answer_units);
		    	 	       
		 /**
		  * Return the HashMap with image of the object, random number (n1), answer in tens, answer in units
		  */ 
		 return result;    
	   }
		
		/**
	     @name mg_get_place_values_for_identifying_the_number()
		 @description Gets the problem set data containing the value of the number shown  
		 @param level - int - Chooses a level. Values are 1 or 2.                        
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (image of the object (unit), image of the object (bundle), random number (n1), answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_for_identifying_the_number(int level, boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, answer;
			String object_bundle_image, object_image;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		     
		    /**
		     * Array of object names
		     */
		    String[] objects_array = {"buttons", "crayons", "markers", "pencils"};
		    
		    /**
		     * Generating a random number for getting the index position of an object from the above array  
		     */
		    int rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
		    
		    /**
		     * Selecting an object from the above array and returning its images (one showing bundle of the object and other showing unit of the same object)   
		     */	
		    object_image = objects_array[rand1].concat("_individual.png");
		    object_bundle_image = objects_array[rand1].concat("_bundle.png");
		   
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the object image and bundled object image in the HashMap
		     */
		    result.put("image", object_image);
		    result.put("bundled_image", object_bundle_image);
		    
		    /**
		     * Generating a random number 
		     */
		    if(level == 1) {
		    	n1 = mg_giveRandomInteger(11, 99, random);
		    } else {
		    	n1 = mg_giveRandomInteger(100, 999, random);
		    }
	   	
		    /**
		     * Obtaining the answer
		     */
		    answer = n1;
	       
		   	/**
		   	 * Returning the the value of n1, answer
		   	 */
		   	result.put("number", n1);
		   	result.put("answer", answer);

		   	/**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		    	 
		    	/**
		    	 * Calculating the lower limit and upper limit for the remaining mcq options  
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        if(level == 1) {
		        	if((answer - 5) <= 11) {
		        		mcq_lower_limit = 11;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		           
			        if((answer + 5) >= 99) {
			         	mcq_upper_limit = 99;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else {
		        	if((answer - 5) <= 100) {
		        		mcq_lower_limit = 100;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 999) {
			         	mcq_upper_limit = 999;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 

		 /**
		  * Return the HashMap with image of the object (unit), image of the object (bundle), random number (n1), answer, ArrayList of mcq options 
		  */ 
		 return result;    
	  }
		
		/**
	     @name mg_get_place_values_identifying_place_value_of_the_underlined_digit()
		 @description Gets the problem set data containing the place value of the underlined digit 
		 @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.                        
		 @return HashMap (random number with one digit underlined, answer)
		 */
		public static Map<String, Object> mg_get_place_values_identifying_place_value_of_the_underlined_digit(int level) {
		    
			/**
			 * Declaring the variables
			 */
			int n1 = 0, answer = 0;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		     
		    /**
		     * Generating a random number 
		     */
		    if(level == 1) {
		    	n1 = mg_giveRandomInteger(10, 99, random);
		    } else if(level == 2) {
		    	n1 = mg_giveRandomInteger(100, 999, random);
		    } else if(level == 3) {
		    	n1 = mg_giveRandomInteger(1000, 9999, random);
		    } else if(level == 4) {
		    	n1 = mg_giveRandomInteger(10000, 99999, random);
		    } else {
		    	n1 = mg_giveRandomInteger(100000, 999999, random);
		    }
		    
		    /**
		     * Storing the value of generated random number in a String variable
		     */
		    String random_number = Integer.toString(n1);
		    
		    /**
		     * Splitting the random number 
		     */
		    String[] temp = random_number.split("");
		    
		    /**
		     * Underlining the random number at a random place value
		     */
		    int rand = mg_giveRandomInteger(0, temp.length - 1, random);
		    String underlined_number = "";
		    for(int i=0; i<temp.length ; i++){
				
		    	/**
		    	 * Underlining the number at a random position
		    	 */
		    	if(rand == i){
					   underlined_number = underlined_number.concat("<u>").concat(temp[i]).concat("</u>");
		    	} else {
					   underlined_number = underlined_number.concat(temp[i]);
		    	}	   
			 }
		    
		    /**
		     * Getting the index position of the underlined digit
		     */
		    rand = temp.length - 1 - rand;
		    
		    /**
		     *  Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the underlined number in the HashMap
		     */
		    result.put("number", underlined_number);
		    
		    /**
		     * Getting the place value of the underlined digit
		     */
		    if(rand == 0) {
		    	answer = n1 % 10;
		    } else if (rand == 1) {
		    	answer = ((n1 % 100) / 10) * 10;
		    } else if (rand == 2) {
		    	answer = ((n1 % 1000) / 100) * 100;
		    } else if (rand == 3) {
		    	answer = ((n1 % 10000) / 1000) * 1000;
		    } else if (rand == 4) {
		    	answer = ((n1 % 100000) / 10000) * 10000;
		    } else if (rand == 5) {
		    	answer = ((n1 % 1000000) / 100000) * 100000;
		    } else {
		    	answer = ((n1 % 10000000) / 1000000) * 1000000;
		    }
		    
		    /**
		     * Returning the answer
		     */
		    result.put("answer", answer);
		   	          
		 /**
		  * Return the HashMap with random number with one digit underlined, answer 
		  */ 
		 return result;    
	 }
		
		/**
	     @name mg_get_place_values_expanded_form()
		 @description Gets the problem set data containing the expanded form of the random number  
		 @param level - int - Chooses a level. Values are 1, 2, 3, 4 or 5.                        
		 @return HashMap (random number with one digit underlined, answer_units, answer_tens, answer_hundreds, answer_thousands, answer_ten_thousands, answer_lakhs)
		 */
		public static Map<String, Object> mg_get_place_values_expanded_form(int level) {
		    
			/**
			 * Declaring the variables
			 */
			int n1 = 0, answer_units = 0, answer_tens = 0, answer_hundreds = 0, answer_thousands = 0, answer_ten_thousands = 0, answer_lakhs = 0;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    if(level == 1) {
		    	
		    	/**
			     * Generating a random number 
			     */
		    	n1 = mg_giveRandomInteger(10, 99, random);
		    	
		    	/**
		    	 * Calculating the value of units and tens
		    	 */
		    	answer_units = n1 % 10;
		    	answer_tens = (n1 / 10) * 10;
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
			    result.put("number1", n1);
			    result.put("answer1", answer_units);
			    result.put("answer2", answer_tens);
		    } else if(level == 2) {
		    	
		    	/**
			     * Generating a random number 
			     */
		    	n1 = mg_giveRandomInteger(100, 999, random);
		    	
		    	/**
		    	 * Calculating the value of units, tens, and hundreds
		    	 */
		    	answer_units = n1 % 10;
		    	answer_tens = ((n1 % 100) / 10) * 10;
		    	answer_hundreds = ((n1 % 1000) / 100) * 100;
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
		    	result.put("number1", n1);
		    	result.put("answer1", answer_units);
		    	result.put("answer2", answer_tens);
		    	result.put("answer3", answer_hundreds);
		    } else if(level == 3) {
		    	
		    	/**
			     * Generating a random number 
			     */
		    	n1 = mg_giveRandomInteger(1000, 9999, random);
		    	
		    	/**
		    	 * Calculating the value of units, tens, hundreds, and thousands
		    	 */
		    	answer_units = n1 % 10;
		    	answer_tens = ((n1 % 100) / 10) * 10;
		    	answer_hundreds = ((n1 % 1000) / 100) * 100;
		    	answer_thousands = ((n1 % 10000) / 1000) * 1000;
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
		    	result.put("number1", n1);
		    	result.put("answer1", answer_units);
		    	result.put("answer2", answer_tens);
		    	result.put("answer3", answer_hundreds);
		    	result.put("answer4", answer_thousands);
		    } else if(level == 4) {
		    	
		    	/**
			     * Generating a random number 
			     */
		    	n1 = mg_giveRandomInteger(10000, 99999, random);
		    	
		    	/**
		    	 * Calculating the value of units, tens, hundreds, thousands, and ten thousands
		    	 */
		    	answer_units = n1 % 10;
		    	answer_tens = ((n1 % 100) / 10) * 10;
		    	answer_hundreds = ((n1 % 1000) / 100) * 100;
		    	answer_thousands = ((n1 % 10000) / 1000) * 1000;
		    	answer_ten_thousands = ((n1 % 100000) / 10000) * 10000;
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
		    	result.put("number1", n1);
		    	result.put("answer1", answer_units);
		    	result.put("answer2", answer_tens);
		    	result.put("answer3", answer_hundreds);
		    	result.put("answer4", answer_thousands);
		    	result.put("answer5", answer_ten_thousands);
		    } else {
		    	
		    	/**
			     * Generating a random number 
			     */
		    	n1 = mg_giveRandomInteger(100000, 999999, random);
		    	
		    	/**
		    	 * Calculating the value of units, tens, hundreds, thousands, ten thousands, and lakhs
		    	 */
		    	answer_units = n1 % 10;
		    	answer_tens = ((n1 % 100) / 10) * 10;
		    	answer_hundreds = ((n1 % 1000) / 100) * 100;
		    	answer_thousands = ((n1 % 10000) / 1000) * 1000;
		    	answer_ten_thousands = ((n1 % 100000) / 10000) * 10000;
		    	answer_lakhs = ((n1 % 1000000) / 100000) * 100000; 
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
		    	result.put("number1", n1);
		    	result.put("answer1", answer_units);
		    	result.put("answer2", answer_tens);
		    	result.put("answer3", answer_hundreds);
		    	result.put("answer4", answer_thousands);
		    	result.put("answer5", answer_ten_thousands);
		    	result.put("answer6", answer_lakhs);
		    }         
		
		 /**
		  * Return the HashMap with random number with one digit underlined, answer_units, answer_tens, answer_hundreds, answer_thousands, answer_ten_thousands, answer_lakhs 
		  */ 
		 return result;    
	}

		/**
	     @name mg_get_place_values_converting_from_expanded_to_normal_form()
		 @description Gets the problem set data containing the answer received by converting expanded to normal form                          
		 @param level - int - Chooses a level. Values are 1, 2 or 3.
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (first random number, second random number, third random number, fourth random number, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_converting_from_expanded_to_normal_form(int level, boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, n2, n3, n4, answer = 0;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    if(level == 1) {
		    	
		    	/**
			     * Generating random numbers 
			     */
		    	n1 = 10 * mg_giveRandomInteger(1, 9, random);
		    	n2 = mg_giveRandomInteger(1, 9, random);
		    	
		    	/**
		    	 * Calculating the answer
		    	 */
		    	answer = n1 + n2;
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
			    result.put("number1", n1);
			    result.put("number2", n2);
			    result.put("answer", answer);
		    } else if(level == 2) {
		    	
		    	/**
			     * Generating random numbers 
			     */
		    	n1 = 100 * mg_giveRandomInteger(1, 9, random);
		    	n2 = 10 * mg_giveRandomInteger(1, 9, random);
		    	n3 = mg_giveRandomInteger(1, 9, random);
		    	
		    	/**
		    	 * Calculating the answer
		    	 */
		    	answer = n1 + n2 + n3;
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
			    result.put("number1", n1);
			    result.put("number2", n2);
			    result.put("number3", n3);
			    result.put("answer", answer);
		    } else {
		    	
		    	/**
			     * Generating random numbers 
			     */
		    	n1 = 1000 * mg_giveRandomInteger(1, 9, random);
		    	n2 = 100 * mg_giveRandomInteger(1, 9, random);
		    	n3 = 10 * mg_giveRandomInteger(1, 9, random);
		    	n4 = mg_giveRandomInteger(1, 9, random);
		    	
		    	/**
		    	 * Calculating the answer
		    	 */
		    	answer = n1 + n2 + n3 + n4;
		    	
		    	/**
			     * Storing the values in the HashMap
			     */
			    result.put("number1", n1);
			    result.put("number2", n2);
			    result.put("number3", n3);
			    result.put("number4", n4);
			    result.put("answer", answer);
		    } 
		    
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		    	 
		    	/**
		    	 * Calculating the lower limit and upper limit for the remaining mcq options  
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        
		        if(level == 1) {
		        	if((answer - 5) <= 11) {
		        		mcq_lower_limit = 11;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 99) {
			         	mcq_upper_limit = 99;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }		        
		        } else if(level == 2) {
		        	if((answer - 5) <= 111) {
		        		mcq_lower_limit = 111;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 999) {
			         	mcq_upper_limit = 999;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else {
		        	if((answer - 5) <= 1111) {
		        		mcq_lower_limit = 1111;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 9999) {
			         	mcq_upper_limit = 9999;         	
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        }
		           
		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 
		
		 /**
		  * Return the HashMap with first random number, second random number, third random number, fourth random number, answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}

		/**
	     @name mg_get_place_values_expanded_form_with_fill_in_the_blanks()
		 @description Gets the problem set data containing the answer for a random blank place value                          
		 @param mcq - boolean - Multiple choice options required true / false - default is false
		 @return HashMap (random number, value at thousands place, value at hundreds place, value at tens place, value at units place, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_expanded_form_with_fill_in_the_blanks(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int th1, h1, t1, u1, n1, answer = 0;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating a random number 
		     */
		    n1 = mg_giveRandomInteger(101, 9999, random);
		    
		    /**
		     * Calculating the values at thousands, hundreds, tens, and units place
		     */
		    th1 = 1000 * (n1 / 1000);
		    h1 = 100 * ((n1 - th1) / 100);
		    t1 = 10 * ((n1 - th1 - h1) / 10);
		    u1 = n1 - th1 - h1 - t1;
		    
		    /**
		     * Random number for underlining a place value in the number
		     */
		    int rand1 = mg_giveRandomInteger(0, 3, random); 
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    if(rand1 == 0) {				/** if units digit is underlined */
			    result.put("number", n1);
			    result.put("thousands_place", th1);
			    result.put("hundreds_place", h1);
			    result.put("tens_place", t1);
			    result.put("units_place", "::blank::");
			    result.put("answer", u1);
			    answer = u1;
		    } else if(rand1 == 1) {			/** if tens digit is underlined */
		    	result.put("number", n1);
			    result.put("thousands_place", th1);
			    result.put("hundreds_place", h1);
			    result.put("answer", t1);
			    result.put("tens_place", "::blank::");
			    result.put("units_place", u1);
			    answer = t1;
		    } else if(rand1 == 2) {			/** if hundreds digit is underlined */
		    	result.put("number", n1);
			    result.put("thousands_place", th1);
			    result.put("hundreds_place", "::blank::");
			    result.put("answer", h1);
			    result.put("tens_place", t1);
			    result.put("units_place", u1);
			    answer = h1; 
		    } else {			/** if thousands digit is underlined */
		    	result.put("number", n1);
		    	result.put("thousands_place", "::blank::");
			    result.put("answer", th1);
			    result.put("hundreds_place", h1);
			    result.put("tens_place", t1);
			    result.put("units_place", u1);
			    answer = th1;
		    } 
		    
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	mcq_option.add(answer);
		    	
		    	/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		        
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(0, 9).toArray();
		        
		    	/**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array);
		        
		        if(rand1 == 0) {
			           
			        /**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
			                mcq_option.add(u);
			            }
			        }   
		        } else if(rand1 == 1) {
		        	
		        	/**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,10 * u) && mcq_option.size() < 4) {
			                mcq_option.add(10 * u);
			            }
			        }
		        } else if(rand1 == 2) {
		        	
		        	/**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,100 * u) && mcq_option.size() < 4) {
			                mcq_option.add(100 * u);
			            }
			        }       	
		        } else {
		        	
		        	/**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,1000 * u) && mcq_option.size() < 4) {
			                mcq_option.add(1000 * u);
			            }
			        }
		        }
		         
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 
		
		 /**
		  * Return the HashMap with random number, value at thousands place, value at hundreds place, value at tens place, value at units place, answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}

		/**
	     @name mg_get_place_values_converting_numbers_to_tens_and_units()
		 @description Gets the problem set data containing the tens and units place values of a random number                         
		 @return HashMap (random number, value at tens place or value at units place, answer, answer for the total number of units)
		 */
		public static Map<String, Object> mg_get_place_values_converting_numbers_to_tens_and_units() {
		    
			/**
			 * Declaring the variables
			 */
			int n1, t1, u1;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating a random number for tens and units position values 
		     */
		    t1 = mg_giveRandomInteger(1, 9, random);
		    u1 = mg_giveRandomInteger(0, 9, random);
		    
		    /**
		     * Calculating the random number
		     */
		    n1 = 10 * t1 + u1;
		    
		    /**
		     * Random number for underlining a place value in the number
		     */
		    int rand1 = mg_giveRandomInteger(0, 1, random); 
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    result.put("number", n1);
		    result.put("answer1", n1);
		   
		    if(rand1 == 0) {                          /** if units digit is underlined */
			    result.put("tens_place", t1);
			    result.put("units_place", "::blank::");
			    result.put("answer2", u1);
		    } else {					  /** if tens digit is underlined */
			    result.put("answer2", t1);
			    result.put("tens_place", "::blank::");
			    result.put("units_place", u1);
		    } 
		    	
		 /**
		  * Return the HashMap with random number, value at tens place or value at units place, answer, answer for the total number of units 
		  */ 
		 return result;    
	}
		
		/**
	     @name mg_get_place_values_tens_in_expanded_form()
		 @description Gets the problem set data containing the number at a particular position in the expanded form
		 @param mcq - boolean - Multiple choice options required true / false - default is false                         
		 @return HashMap (random number (n1), tens place value or units place value (t1 or u1), answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_tens_in_expanded_form(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, t1, u1, answer = 0;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating a random number for tens and units position values 
		     */
		    t1 = 10 * mg_giveRandomInteger(1, 9, random);
		    u1 = mg_giveRandomInteger(0, 9, random);
		    
		    /**
		     * Calculating the random number
		     */
		    n1 = t1 + u1;
		   
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    result.put("number", n1);
		   
		    /**
		     * Random number for underlining a place value in the number
		     */
		    int rand1 = mg_giveRandomInteger(0, 1, random);
		    
		    if(rand1 == 0) {                       /** if units digit is underlined */
			    result.put("tens_place", t1 / 10);
			    result.put("units_place", "::blank::");
			    result.put("answer", u1);
			    answer = u1;
		    } else {				   /** if tens digit is underlined */
			    result.put("answer", t1 / 10);
			    result.put("tens_place", "::blank::");
			    result.put("units_place", u1);
			    answer = t1;
		    } 

		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		    	
		    	/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		        
		        if(rand1 == 0) {
			    
		        	/**
			      	 * Generating remaining mcq options within the calculated range  
			      	 */ 
			        array = IntStream.rangeClosed(0, 9).toArray();
			    
			        /**
			    	 * Shuffling the data 
			    	 */ 
			        array = mg_shuffleInt(array);
			        
			        /**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
			                mcq_option.add(u);
			            }
			        } 
		        } else {
		        	
		        	/**
			      	 * Generating remaining mcq options within the calculated range  
			      	 */
			        array = IntStream.rangeClosed(1, 9).toArray();
			   
			        /**
			    	 * Shuffling the data 
			    	 */
			        array = mg_shuffleInt(array);
			   
			        /**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,10 * u) && mcq_option.size() < 4) {
			                mcq_option.add(10 * u);
			            }
			        }     	
		        } 
		         
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 

		 /**
		  * Return the HashMap with random number (n1), tens place value or units place value (t1 or u1), answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}

		/**
	     @name mg_get_place_values_converting_tens_and_units_to_numbers()
		 @description Gets the problem set data containing the answer, which is received by adding tens place value and units place value
		 @param int - level - Chooses a level. Values are 1 or 2.
		 @param mcq - boolean - Multiple choice options required true / false - default is false                         
		 @return HashMap (tens place value, units place value, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_converting_tens_and_units_to_numbers(int level, boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int t1 = 0, u1 = 0, answer = 0;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating a random number for tens and units position values 
		     */
		    if(level == 1) {
		    	t1 = mg_giveRandomInteger(1, 9, random);
		    	u1 = mg_giveRandomInteger(1, 9, random);
		    } else {
		    	t1 = mg_giveRandomInteger(1, 9, random);
		    	u1 = mg_giveRandomInteger(1, 100 - (t1 * 10), random);
		    }
		    
		    /**
		     * Calculating the answer
		     */
		    answer = 10 * t1 + u1;
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    result.put("tens_place1", t1);
		    result.put("units_place1", u1);
		    result.put("answer", answer);
		   
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		        
		    	/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        if(level == 1) {
		        	if((answer - 5) <= 11) {
		        		mcq_lower_limit = 11;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 99) {
			         	mcq_upper_limit = 99;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else {
		        	if((answer - 5) <= 11) {
		        		mcq_lower_limit = 11;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 100) {
			         	mcq_upper_limit = 100;         	
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } 

		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 

		 /**
		  * Return the HashMap with tens place value, units place value, answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}
		
		/**
	     @name mg_get_place_values_converting_numbers_to_hundreds_tens_and_units()
		 @description Gets the problem set data containing the hundreds, tens, and units place values of a random number                         
		 @return HashMap (random number, value at hundreds place or value at tens place, value at units place, answer, answer for the total number of tens, answer for the total number of units)
		 */
		public static Map<String, Object> mg_get_place_values_converting_numbers_to_hundreds_tens_and_units() {
		    
			/**
			 * Declaring the variables
			 */
			int n1, h1, t1, u1;
			
			/**
		     * Initializing random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating random number for hundreds, tens, and units position values 
		     */
		    h1 = mg_giveRandomInteger(1, 9, random);
		    t1 = mg_giveRandomInteger(0, 9, random);
		    u1 = mg_giveRandomInteger(0, 9, random);
		    
		    /**
		     * Calculating the random number
		     */
		    n1 = 100 * h1 + 10 * t1 + u1;
		    
		    /**
		     * Random number for underlining a place value in the number
		     */
		    int rand1 = mg_giveRandomInteger(0, 1, random); 
		    
		    /**
		     *  Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    result.put("number", n1);
		    result.put("units_place", u1);
		    result.put("answer2", n1 / 10);
		    result.put("answer3", n1);
		   
		    if(rand1 == 0) {                       /** if tens digit is underlined */
			    result.put("hundreds_place", h1);
			    result.put("tens_place", "::blank::");
			    result.put("answer1", t1);
		    } else {				    /** if hundreds digit is underlined */
			    result.put("answer1", h1);
			    result.put("hundreds_place", "::blank::");
			    result.put("tens_place", t1);
		    } 
		    	
		 /**
		  * Return the HashMap with random number, value at hundreds place or value at tens place, value at units place, answer, answer for the total number of tens, answer for the total number of units 
		  */ 
		 return result;    
	}
		
		/**
	     @name mg_get_place_values_hundreds_in_expanded_form()
		 @description Gets the problem set data containing a number at a particular position in the expanded form 
		 @param mcq - boolean - Multiple choice options required true / false - default is false                         
		 @return HashMap (random number, hundreds place value and / or tens place value and / or units place value, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_hundreds_in_expanded_form(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1, h1, t1, u1, answer = 0;
			
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating random numbers for hundreds, tens, and units position values 
		     */
		    h1 = 100 * mg_giveRandomInteger(1, 9, random);
		    t1 = 10 * mg_giveRandomInteger(0, 9, random);
		    u1 = mg_giveRandomInteger(0, 9, random);
		    
		    /**
		     * Calculating the random number
		     */
		    n1 = h1 + t1 + u1;
		  
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the value of n1 in the HashMap
		     */
		    result.put("number", n1);
		  
		    /**
		     * Random number for underlining a place value in the number
		     */
		    int rand1 = mg_giveRandomInteger(0, 2, random); 
		    
		    if(rand1 == 0) {                       /** if units digit is underlined */
		    	result.put("hundreds_place", h1);
			    result.put("tens_place", t1);
			    result.put("units_place", "::blank::");
			    result.put("answer", u1);
			    answer = u1;
		    } else if(rand1 == 1) {				   /** if tens digit is underlined */
		    	result.put("hundreds_place", h1);
		    	result.put("tens_place", "::blank::");
			    result.put("answer", t1);
			    result.put("units_place", u1);
			    answer = t1;		    
		    } else {				   /** if hundreds digit is underlined */
		    	result.put("answer", h1);
		    	result.put("hundreds_place", "::blank::");
			    result.put("tens_place", t1);
			    result.put("units_place", u1);
			    answer = h1;
		    } 

		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		    	
		    	/**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		        
		        if(rand1 == 0) {
			    
		        	/**
			      	 * Generating remaining mcq options within the calculated range  
			      	 */ 
			        array = IntStream.rangeClosed(0, 9).toArray();
			    
			        /**
			    	 * Shuffling the data 
			    	 */ 
			        array = mg_shuffleInt(array);
			        
			        /**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
			                mcq_option.add(u);
			            }
			        }
		        	    
		        } else if(rand1 == 1) {
		        	
		        	/**
			      	 * Generating remaining mcq options within the calculated range  
			      	 */
			        array = IntStream.rangeClosed(0, 9).toArray();
			   
			        /**
			    	 * Shuffling the data 
			    	 */
			        array = mg_shuffleInt(array);
			   
			        /**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,10 * u) && mcq_option.size() < 4) {
			                mcq_option.add(10 * u);
			            }
			        }     	
		        
		        } else {        
			        
		        	/**
			      	 * Generating remaining mcq options within the calculated range  
			      	 */
		        	array = IntStream.rangeClosed(1, 9).toArray();
			   
			        /**
			    	 * Shuffling the data 
			    	 */
			        array = mg_shuffleInt(array);
			   
			        /**
			         * Ensuring that no 2 mcq options are the same
			         */
			        for(int u : array){
			            if(!mg_containsInArray(mcq_option,100 * u) && mcq_option.size() < 4) {
			                mcq_option.add(100 * u);
			            }
			        }     	
		        } 
		         
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 

		 /**
		  * Return the HashMap with random number, hundreds place value and / or tens place value and / or units place value, answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}

		/**
	     @name mg_get_place_values_converting_hundreds_tens_and_units_to_numbers()
		 @description Gets the problem set data containing the answer, which is received by adding hundreds place value, tens place value, and units place value
		 @param int - level - Chooses a level. Values are 1, 2, 3 or 4.
		 @param mcq - boolean - Multiple choice options required true / false - default is false                         
		 @return HashMap (hundreds place value, tens place value, units place value, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_converting_hundreds_tens_and_units_to_numbers(int level, boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int h1 = 0, t1 = 0, u1 = 0, answer = 0;
			
			/**
		     * Initialize random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating random numbers for hundreds, tens, and units position values 
		     */
		    if(level == 1) {
		    	h1 = mg_giveRandomInteger(1, 9, random);
		    	t1 = mg_giveRandomInteger(1, 9, random);
		    	u1 = mg_giveRandomInteger(1, 9, random);
		    	
		    } else if(level == 2) {
		    	h1 = mg_giveRandomInteger(1, 8, random);
		    	t1 = mg_giveRandomInteger(1, 9, random);
		    	u1 = mg_giveRandomInteger(1, 99, random);
		    
		    } else if(level == 3) {
		    	h1 = mg_giveRandomInteger(1, 9, random);
		    	t1 = mg_giveRandomInteger(1, 99 - (h1 * 10), random);
		    	u1 = mg_giveRandomInteger(1, 9, random);
		    
		    } else {
		    	h1 = mg_giveRandomInteger(1, 8, random);
		    	t1 = mg_giveRandomInteger(1, 90 - (h1 * 10), random);
		    	u1 = mg_giveRandomInteger(1, 99, random);
		    }
		    
		    /**
		     * Calculating the answer
		     */
		    answer = (h1 * 100) + (10 * t1) + u1;
		    
		    /**
		     *  Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    result.put("hundreds_place1", h1);
		    result.put("tens_place1", t1);
		    result.put("units_place1", u1);
		    result.put("answer", answer);
		   
		    /**
		     *  Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the value of answer in the ArrayList
		    	 */
		    	mcq_option.add(answer);
		        
		    	/**
		    	 * Calculating the lower limit and upper limit for remaining mcq options  
		    	 */
		        int mcq_lower_limit, mcq_upper_limit;
		        if(level == 1) {
		        	if((answer - 5) <= 111) {
		        		mcq_lower_limit = 111;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 999) {
			         	mcq_upper_limit = 999;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else if(level == 2) {
		        	if((answer - 5) <= 111) {
		        		mcq_lower_limit = 111;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 989) {
			         	mcq_upper_limit = 989;	
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else if(level == 3) {
		        	if((answer - 5) <= 111) {
		        		mcq_lower_limit = 111;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 999) {
			         	mcq_upper_limit = 999;	
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } else {        	
		        	if((answer - 5) <= 111) {
		        		mcq_lower_limit = 111;
		        	} else {
		        		mcq_lower_limit = answer - 5;
		        	}
		          
			        if((answer + 5) >= 979) {
			         	mcq_upper_limit = 979;
			        } else {
			            mcq_upper_limit = answer + 5;
			        }
		        } 

		        /**
		         * Creating an array for remaining mcq options within the calculated range  
		         */ 
		        int[] array;
		         
		        /**
		      	 * Generating remaining mcq options within the calculated range  
		      	 */ 
		        array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
		          
		        /**
		    	 * Shuffling the data 
		    	 */ 
		        array = mg_shuffleInt(array); 
		           
		        /**
		         * Ensuring that no 2 mcq options are the same
		         */
		        for(int u : array){
		            if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
		                mcq_option.add(u);
		            }
		        }
		        
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 

		 /**
		  * Return the HashMap with hundreds place value, tens place value, units place value, answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}

		/**
	    @name mg_get_place_values_for_regrouping_tens_and_ones()
	    @description Gets the problem set data for addition of 2 numbers                            
	    @return HashMap (first random number, second random number, answer in terms of units, number of tens in the answer, number of units in the answer)
		 */ 
		public static Map<String, Object> mg_get_place_values_for_regrouping_tens_and_ones() {
		
			/**
			 * Declaring the variables
			 */
			int n1, n2, n3, n4, n5;
		
			/**
			 * Initializing the random generator
			 */
			Random random = new Random();
		
			/**
			 * Generating first and second random number
			 */
			n1 = mg_giveRandomInteger(1, 30, random);
			n2 = mg_giveRandomInteger(1, 30, random);
		
			/**
			 * Calculating the result
			 */
			n3 = n1 + n2;
		
			/**
			 * Creating the HashMap
			 */
			Map<String, Object> result = new HashMap<>();
		
			/**
			 * Storing the values of n1, n2 and n3 in the HashMap
			 */
			result.put("number1", n1);
			result.put("number2", n2);
			result.put("answer1", n3);
		
			/**
			 * Calculating the number of tens and units in the answer
			 */
			n4 = n3 / 10;
			n5 = n3 % 10;
		
			/**
			 * Storing the values of n4 and n5 in the HashMap
			 */
			result.put("answer2", n4);
			result.put("answer3", n5);
		
			/**
			 * Return the HashMap with first random number, second random number, answer in terms of units, number of tens in the answer, number of units in the answer
			 */                     
			return result;
		}

		/**
	     @name mg_get_place_values_comparing_numbers_by_place_values_tens()
		 @description Gets the problem set data containing the answer which is obtained by comparing two random numbers
		 @param mcq - boolean - Multiple choice options required true / false - default is false                         
		 @return HashMap (first random number, second random number, comparison value, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_comparing_numbers_by_place_values_tens(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1 = 0, n2 = 0, random_number_1, random_number_2;
			String comparison_value;
			
			/**
		     * Initializing random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating random numbers for tens and units position values 
		     */
	    	n1 = mg_giveRandomInteger(1, 9, random);
	    	do{
	    		n2 = mg_giveRandomInteger(1, 9, random);
	    	} while(n2 == n1);
		    
	    	/**
	    	 * Calculating the two random numbers
	    	 */
		    random_number_1 = (n1 * 10) + n2;
		    random_number_2 = (n2 * 10) + n1;
		    
		    /**
		     * Array of comparison values
		     */
		    String[] comparison_array = {"greater", "larger", "bigger", "smaller", "less"};
		    
		    /**
		     * Generating a random number for selecting a random comparison value 
		     */
		    int rand1 = mg_giveRandomInteger(0, comparison_array.length - 1, random);
		    
		    /**
		     * Selecting a comparison value
		     */
		    comparison_value = comparison_array[rand1];
		    
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    result.put("number1", random_number_1);
		    result.put("number2", random_number_2);
		    result.put("comparison_value", comparison_value);
		    
		    /**
		     * Getting the answer based on comparison value
		     */
		    if(comparison_value == "greater" || comparison_value == "larger" || comparison_value == "bigger") {
		    	if(random_number_1 > random_number_2) {       /** if first random number is greater than second random number */
		    		result.put("answer", random_number_1);
		    	} else {
		    		result.put("answer", random_number_2);
		    	}
		    } else {
		    	if(random_number_1 < random_number_2) {		  /** if first random number is smaller than second random number */
		    		result.put("answer", random_number_1); 	
		    	} else {
		    		result.put("answer", random_number_2);
		    	}
		    }
		    
		    /**
		     *  Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>();
		    	
		    	/**
		    	 * Storing the options in the ArrayList
		    	 */
		    	mcq_option.add(random_number_1);
		    	mcq_option.add(random_number_2);
		        
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 

		 /**
		  * Return the HashMap with first random number, second random number, comparison value, answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}
		
		/**
	     @name mg_get_place_values_comparing_numbers_by_place_values_hundreds()
		 @description Gets the problem set data containing the answer which is obtained by comparing two random numbers
		 @param mcq - boolean - Multiple choice options required true / false - default is false                         
		 @return HashMap (first random number, second random number, third random number, comparison value, answer, ArrayList of mcq options)
		 */
		public static Map<String, Object> mg_get_place_values_comparing_numbers_by_place_values_hundreds(boolean mcq) {
		    
			/**
			 * Declaring the variables
			 */
			int n1 = 0, n2 = 0, n3, random_number_1, random_number_2;
			String comparison_value;
		
			/**
		     * Initializing the random generator
		     */
		    Random random = new Random();
		    
		    /**
		     * Generating random numbers for hundreds, tens, and units position values 
		     */
		    n1 = mg_giveRandomInteger(1, 9, random);
		    n2 = mg_giveRandomInteger(1, 9, random);
		    do{
		    	n3 = mg_giveRandomInteger(1, 9, random);
		    } while(n3 == n1 || n3 == n2);
		    
		    /**
		     * Calculating and storing the random numbers in an array  
		     */
		    int[] options_array = {(n1 * 100) + (n2 * 10) + n3, (n1 * 100) + (n3 * 10) + n2, (n2 * 100) + (n1 * 10) + n3, (n2 * 100) + (n3 * 10) + n1, (n3 * 100) + (n1 * 10) + n2, (n3 * 100) + (n2 * 10) + n1};
		   
		    /**
		     * Generating random numbers for selecting two random options 
		     */
		    int rand1, rand2;
		    rand1 = mg_giveRandomInteger(0, options_array.length - 1, random);
		    
		    do{
		    	rand2 = mg_giveRandomInteger(0, options_array.length - 1, random);
		    } while(rand2 == rand1);
		    
		    /**
		     * Selecting two options
		     */
		    random_number_1 = options_array[rand1];
		    random_number_2 = options_array[rand2];
		   
		    /**
		     * Creating the HashMap 
		     */
		    Map<String, Object> result = new HashMap<>();
		    
		    /**
		     * Storing the values in the HashMap
		     */
		    result.put("number1", random_number_1);
		    result.put("number2", random_number_2);
		  
		    /**
		     * Array of comparison values
		     */
		    String[] comparison_array = {"greater", "larger", "bigger", "smaller", "less"};
		    
		    /**
		     * Generating a random number for selecting a random comparison value 
		     */
		    int rand3 = mg_giveRandomInteger(0, comparison_array.length - 1, random);
		    
		    /**
		     * Selecting a comparison value and returning its value to the HashMap
		     */
		    comparison_value = comparison_array[rand3];
		    result.put("comparison_value", comparison_value);
		    
		    /**
		     * Getting the answer based on comparison value
		     */
		    if(comparison_value == "greater" || comparison_value == "larger" || comparison_value == "bigger") {
		    	if(random_number_1 > random_number_2) {          /** if first random number is greater than second random number */
		    		result.put("answer", random_number_1);
		    	} else {
		    		result.put("answer", random_number_2);
		    	}
		    } else {
		    	if(random_number_1 < random_number_2) {          /** if first random number is smaller than second random number */
		    		result.put("answer", random_number_1);	
		    	} else {
		    		result.put("answer", random_number_2);
		    	}
		    }
		    
		    /**
		     * Creating the mcq options 
		     */
		    if(mcq == true) {
		
		    	/**
		    	 * Creating the ArrayList 
		    	 */ 
		    	ArrayList <Integer> mcq_option = new ArrayList<>(); 
		    	
		    	/**
		    	 * Storing the options in the ArrayList
		    	 */
		    	mcq_option.add(random_number_1);
		    	mcq_option.add(random_number_2);
		        
		    	/**
		  	 	 * Shuffling the mcq options
		  	 	 */
		  		Collections.shuffle(mcq_option);
		  	
		  		/**
		  		 * Returning the values of mcq options to the HashMap
		  		 */
		  		result.put("mcq_options", mcq_option);
		    } 

		 /**
		  * Return the HashMap with first random number, second random number, comparison value, answer, ArrayList of mcq options 
		  */ 
		 return result;    
	}

			/**
		     @name mg_get_position_which_object_is_inside_or_outside_the_box()
			 @description Gets the problem set data for identifying which object is inside or outside the box
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is inside the box, image of object which is outside the box, position value (inside / outside or in / out), answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_which_object_is_inside_or_outside_the_box(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_inside_the_box, object_inside_the_box_image, object_outside_the_box, object_outside_the_box_image, position_value;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_in_box_array = {"car","clock","pencil","vegetables","telephone"};
			    String[] objects_outside_box_array = {"book","bulb","die","marker","sleepers"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is inside the box 
			     */
			    rand1 = mg_giveRandomInteger(0, objects_in_box_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is not inside the box 
			     */
		       rand2 = mg_giveRandomInteger(0, objects_outside_box_array.length - 1, random);
			    
			    /**
			     * Selecting object which is inside the box and its image 
			     */	
			    object_inside_the_box = objects_in_box_array[rand1]; 
			    object_inside_the_box_image = object_inside_the_box.concat("_inside_the_box.png");
			    
			    /**
			     * Selecting object which is outside the box and its image 
			     */
			    object_outside_the_box = objects_outside_box_array[rand2];
			    object_outside_the_box_image = object_outside_the_box.concat("_outside_the_box.png");
			   
			    /**
			     * Returning the object name and object image
			     */
			    result.put("image1", object_inside_the_box_image);
			    result.put("image2", object_outside_the_box_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"inside", "in", "outside", "out"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand3 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand3];
			    result.put("position_value", position_value);
			    	    
			    /**
			     * Getting the answer based on position value
			     */
			    if(position_value == "inside" || position_value == "in") {		/** if object is inside the box */
			    	result.put("answer", object_inside_the_box);
			    	result.put("image", object_inside_the_box_image);
			    } else {														/** if object is outside the box */
			    	result.put("answer", object_outside_the_box);
			    	result.put("image", object_outside_the_box_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
		   	
			    	/**
			    	 * Creating the ArrayList  
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	mcq_option.add(object_inside_the_box);
					mcq_option.add(object_outside_the_box);
			
			    	/**
		      	  	 * Shuffling the mcq options
		      	  	 */
		      	  	Collections.shuffle(mcq_option);
		      	  	
		      	    /**
		      	  	 * Returning the values of mcq options to the HashMap
		      	  	 */
		      	  	result.put("mcq_options", mcq_option);
			    } 
		      	 	       
		      /**
			   * Return the HashMap with name of the object inside the box, image of the object which is inside the box, name of the object which is outside the box, image of object which is outside the box, position value (inside / outside or in / out), answer, ArrayList of mcq options
			   */ 
		       return result;    
		   }
			
			/**
		     @name mg_get_position_of_object_whether_inside_or_outside_the_box()
			 @description Gets the problem set data for identifying whether an object is inside or outside the box
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is inside the box, image of object which is outside the box, object name, answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_of_object_whether_inside_or_outside_the_box(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_inside_the_box, object_inside_the_box_image, object_outside_the_box, object_outside_the_box_image, object, position_value = null, temp = null;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3, rand4;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_in_box_array = {"car","clock","pencil","vegetables","telephone"};
			    String[] objects_outside_box_array = {"book","bulb","die","marker","sleepers"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is inside the box 
			     */
			    rand1 = mg_giveRandomInteger(0, objects_in_box_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is not inside the box 
			     */
		       rand2 = mg_giveRandomInteger(0, objects_outside_box_array.length - 1, random);
			    
			    /**
			     * Selecting object which is inside the box and its image 
			     */	
			    object_inside_the_box = objects_in_box_array[rand1]; 
			    object_inside_the_box_image = object_inside_the_box.concat("_inside_the_box.png");
			   
			    /**
			     * Selecting object which is outside the box and its image
			     */
			    object_outside_the_box = objects_outside_box_array[rand2];
			    object_outside_the_box_image = object_outside_the_box.concat("_outside_the_box.png");
			   
			    /**
			     * Randomly selecting an image out of the two images 
			     */
			    String[] object_array = {object_inside_the_box, object_outside_the_box};
			    rand4 = mg_giveRandomInteger(0, object_array.length - 1, random);
			    object = object_array[rand4];
			    
			    /**
			     * Returning the object images and object names 
			     */
			    result.put("image1", object_inside_the_box_image);
			    result.put("image2", object_outside_the_box_image);
			    result.put("object", object);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"inside", "in", "outside", "out"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand3 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand3];
			    
			    /**
			     * Position values for the wrong options
			     */
			    if(position_value == "inside") {
			    	temp = "outside";
			    } else if(position_value == "in") {
			    	temp = "out";
			    } else if(position_value == "outside") {
			    	temp = "inside";
			    } else {  
			  		temp = "in";
			    }
			   	    
			    /**
			     * Getting the answer
			     */
			    if(position_value == "inside" || position_value == "in") {			/** if the object is inside the box */
			    	if(object == object_inside_the_box) {
				    	result.put("answer", position_value.concat(" the box"));
			    	} else {
				    	result.put("answer", temp.concat(" of the box"));
				    }
			    	result.put("image", object_inside_the_box_image);
			    } else {															/** if the object is outside the box */ 	
			    	if(object == object_outside_the_box) {
				    	result.put("answer", position_value.concat(" of the box"));
			    	} else {
				    	result.put("answer", temp.concat(" the box"));
				    }
			    	result.put("image", object_outside_the_box_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
		  	
			    	/**
			    	 * Creating the ArrayList 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	if(position_value == "inside" || position_value == "in") {
			    		mcq_option.add(position_value.concat(" the box"));
			    		mcq_option.add(temp.concat(" of the box"));
			    	} else {
			    		mcq_option.add(position_value.concat(" of the box"));
			    		mcq_option.add(temp.concat(" the box"));
			    	}
			    	
			    	/**
		     	  	 * Shuffling the mcq options
		     	  	 */
		     	  	Collections.shuffle(mcq_option);
		     	  	
		     	    /**
		     	  	 * Returning the values of mcq options to the HashMap
		     	  	 */
		     	  	result.put("mcq_options", mcq_option);
			    } 
		     	 	       
		      /**
			   * Return the HashMap with image of the object which is inside the box, image of object which is outside the box, object name, answer, ArrayList of mcq options
			   */ 
		      return result;    
		  }
			
			/**
		     @name mg_get_position_which_object_is_on_left_or_right_of_another_object()
			 @description Gets the problem set data for identifying the object on the left or right of another object
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is on the left, image of object which is on the right, position value (left or right), answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_which_object_is_on_left_or_right_of_another_object(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_on_the_left_side, object_on_the_left_side_image, object_on_the_right_side, object_on_the_right_side_image, position_value;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is on the left of another image 
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is on the right of another image 
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Selecting object which is to the left of another object and its image
			     */	
			    object_on_the_left_side = objects_array[rand1]; 
			    object_on_the_left_side_image = object_on_the_left_side.concat(".png");
			    
			    /**
			     * Selecting object which is to the right of another object and its image
			     */
			    object_on_the_right_side = objects_array[rand2];
			    object_on_the_right_side_image = object_on_the_right_side.concat(".png");
			   
			    /**
			     * Returning the object names and object images to the HashMap
			     */
			    result.put("image1", object_on_the_left_side_image);
			    result.put("image2", object_on_the_right_side_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"left", "right"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand3 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand3];
			    result.put("position_value", position_value);
			    	    
			    /**
			     * Getting the answer based on position value
			     */
			    if(position_value == "left") {								/** if the object is on the left */
			    	result.put("answer", object_on_the_left_side);
			    	result.put("image", object_on_the_left_side_image);
			    } else {													/** if the object is on the right */
			    	result.put("answer", object_on_the_right_side);
			    	result.put("image", object_on_the_right_side_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
		  	
			    	/**
			    	 * Creating the ArrayList  
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(object_on_the_left_side);
					mcq_option.add(object_on_the_right_side);
			
			    	/**
		     	  	 * Shuffling the mcq options
		     	  	 */
		     	  	Collections.shuffle(mcq_option);
		     	  	
		     	    /**
		     	  	 * Returning the values of mcq options to the HashMap
		     	  	 */
		     	  	result.put("mcq_options", mcq_option);
			    } 
		     	 	       
		      /**
			   * Return the HashMap with image of the object which is on the left, image of object which is on the right, position value (left or right), answer, ArrayList of mcq options
			   */ 
		      return result;    
		  }
			
			/**
		     @name mg_get_position_of_object_whether_left_or_right()
			 @description Gets the problem set data for identifying whether an object is to the left or right of another object
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is on the left side, image of object which is on the right side, object name, answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_of_object_whether_left_or_right(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_on_the_left_side, object_on_the_left_side_image, object_on_the_right_side, object_on_the_right_side_image, object, position_value = null, temp = null;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3, rand4;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is to the left of another image 
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is to the right of another image
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Selecting object which is to the left and its image 
			     */	
			    object_on_the_left_side = objects_array[rand1]; 
			    object_on_the_left_side_image = object_on_the_left_side.concat(".png");
			    
			    /**
			     * Selecting object which is to the right and its image 
			     */
			    object_on_the_right_side = objects_array[rand2];
			    object_on_the_right_side_image = object_on_the_right_side.concat(".png");
			   
			    /**
			     * Randomly selecting an image out of the two images 
			     */
			    String[] object_array = {object_on_the_left_side, object_on_the_right_side};
			    rand4 = mg_giveRandomInteger(0, object_array.length - 1, random);
			    object = object_array[rand4];
			    
			    /**
			     * Returning the object images and object name 
			     */    
			    result.put("object", object);
			    result.put("image1", object_on_the_left_side_image);
			    result.put("image2", object_on_the_right_side_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"left", "right"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand3 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand3];
			    
			    /**
			     * Position values for the wrong options
			     */
			    if(position_value == "left") {
			    	temp = "right";
			    } else {
			    	temp = "left";   	
			    } 
			   	    
			    /**
			     * Getting the answer
			     */
			    if(position_value == "left") {						/** if the object is on the left */
			    	if(object == object_on_the_left_side) {
				    	result.put("answer", position_value);    	
			    	} else {										
				    	result.put("answer", temp);
				    }
			    	result.put("image", object_on_the_left_side_image);
			    } else {											/** if the object is on the right */
			    	if(object == object_on_the_right_side) {
				    	result.put("answer", position_value);
			    	} else {
				    	result.put("answer", temp);
				    }
			    	result.put("image", object_on_the_right_side_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
		 	
			    	/**
			    	 * Creating the ArrayList 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(position_value);
					mcq_option.add(temp);
			
			    	/**
		    	  	 * Shuffling the mcq options
		    	  	 */
		    	  	Collections.shuffle(mcq_option);
		    	  	
		    	    /**
		    	  	 * Returning the values of mcq options to the HashMap
		    	  	 */
		    	  	result.put("mcq_options", mcq_option);
			    } 
		    	 	       
		    /**
			 * Return the HashMap with image of the object which is on the left side, image of object which is on the right side, object name, answer, ArrayList of mcq options
			 */ 
		     return result;    
		 }
			
			/**
		     @name mg_get_position_which_object_is_on_the_left_right_or_in_the_middle()
			 @description Gets the problem set data for identifying the object on the left, right or in the middle
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is on the left, image of the object which is in the middle, image of object which is on the right, position value (left, right, middle), answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_which_object_is_on_the_left_right_or_in_the_middle(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_on_the_left_side, object_on_the_left_side_image, object_in_the_middle, object_in_the_middle_image, object_on_the_right_side, object_on_the_right_side_image, position_value;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3, rand4;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is on the left  
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is in the middle 
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Generating a random number for selecting a random object name which is on the right 
			     */
			    do{
			       rand3 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand3 == rand1 || rand3 == rand2);
			    
			    /**
			     * Selecting object which is on the left side and its image
			     */	
			    object_on_the_left_side = objects_array[rand1]; 
			    object_on_the_left_side_image = object_on_the_left_side.concat(".png");
			    
			    /**
			     * Selecting object which is in the middle and its image
			     */
			    object_in_the_middle = objects_array[rand2]; 
			    object_in_the_middle_image = object_in_the_middle.concat(".png");
			    
			    /**
			     * Selecting object which is on the right side and its image
			     */	
			    object_on_the_right_side = objects_array[rand3];
			    object_on_the_right_side_image = object_on_the_right_side.concat(".png");
			   
			    /**
			     * Returning the object names and object images to the HashMap
			     */
			    result.put("image1", object_on_the_left_side_image);
			    result.put("image2", object_in_the_middle_image);
			    result.put("image3", object_on_the_right_side_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"on the left", "in the middle", "on the right"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand4 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value and storing it in the HashMap
			     */
			    position_value = position_array[rand4];
			    result.put("position_value", position_value);
			    	    
			    /**
			     * Getting the answer based on position value
			     */
			    if(position_value == "on the left") {					/** if object is on the left */
			    	result.put("answer", object_on_the_left_side);
			    	result.put("image", object_on_the_left_side_image);
			    }else if(position_value == "in the middle") {			/** if object is in the middle */
			    	result.put("answer", object_in_the_middle);
			    	result.put("image", object_in_the_middle_image);
			    } else {												/** if object is on the right */
			    	result.put("answer", object_on_the_right_side);
			    	result.put("image", object_on_the_right_side_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
		 	
			    	/**
			    	 * Creating the ArrayList options 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(object_on_the_left_side);
			    	mcq_option.add(object_in_the_middle);
					mcq_option.add(object_on_the_right_side);
			
			    	/**
		    	  	 * Shuffling the mcq options
		    	  	 */
		    	  	Collections.shuffle(mcq_option);
		    	  	
		    	    /**
		    	  	 * Returning the values of mcq options to the HashMap
		    	  	 */
		    	  	result.put("mcq_options", mcq_option);
			    } 
		    	 	       
		      /**
			   * Return the HashMap with image of the object which is on the left, image of the object which is in the middle, image of object which is on the right, position value (left, middle or right), answer, ArrayList of mcq options
			   */ 
		      return result;    
		 }
			
			/**
		     @name mg_get_position_of_object_whether_on_the_left_right_or_in_the_middle()
			 @description Gets the problem set data for identifying whether an object is on the left, right or in the middle
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is on the left side, image of the object which is in the middle, image of object which is on the right side, object name, answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_of_object_whether_on_the_left_right_or_in_the_middle(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_on_the_left_side, object_on_the_left_side_image, object_in_the_middle, object_in_the_middle_image, object_on_the_right_side, object_on_the_right_side_image, object, position_value = null, temp1 = null, temp2 = null;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3, rand4, rand5;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is on the left  
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is in the middle
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Generating a random number for selecting a random object name which is on the right
			     */
			    do{
			       rand3 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand3 == rand1 || rand3 == rand2);
			    
			    /**
			     * Selecting object which is on the left side and its image
			     */	
			    object_on_the_left_side = objects_array[rand1]; 
			    object_on_the_left_side_image = object_on_the_left_side.concat(".png");
			    
			    /**
			     * Selecting object which is in the middle and its image
			     */
			    object_in_the_middle = objects_array[rand2]; 
			    object_in_the_middle_image = object_in_the_middle.concat(".png");
			    
			    /**
			     * Selecting object which is on the right side and its image
			     */
			    object_on_the_right_side = objects_array[rand3];
			    object_on_the_right_side_image = object_on_the_right_side.concat(".png");
			   
			    /**
			     * Randomly selecting an image out of the three images 
			     */
			    String[] object_array = {object_on_the_left_side, object_in_the_middle, object_on_the_right_side};
			    rand4 = mg_giveRandomInteger(0, object_array.length - 1, random);
			    object = object_array[rand4];
			    
			    /**
			     * Returning the object images and object name 
			     */
			    result.put("object", object);
			    result.put("image1", object_on_the_left_side_image);
			    result.put("image2", object_in_the_middle_image);
			    result.put("image3", object_on_the_right_side_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"on the left", "in the middle", "on the right"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand5 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand5];
			    
			    /**
			     * Position values for the wrong options
			     */
			    if(position_value == "on the left") {
			    	temp1 = "in the middle";
			    	temp2 = "on the right";
			    } else if(position_value == "in the middle") {
			    	temp1 = "on the left";
			    	temp2 = "on the right";
			    }else {
			    	temp1 = "on the left";
			    	temp2 = "in the middle";
			    } 
			   	    
			    /**
			     * Getting the answer
			     */
			    if(position_value == "on the left") {					/** if object is on the left */
			    	if(object == object_on_the_left_side) {
				    	result.put("answer", position_value);
			    	} else if(object == object_in_the_middle){
				    	result.put("answer", temp1);
				    } else {
				    	result.put("answer", temp2);
				    } 
			    	result.put("image", object_on_the_left_side_image);
			    } else if(position_value == "in the middle") {			/** if object is in the middle */
			    	if(object == object_on_the_left_side) {
				    	result.put("answer", temp1);
			    	} else if(object == object_in_the_middle){
				    	result.put("answer", position_value);
				    } else {
				    	result.put("answer", temp2);
				    } 
			    	result.put("image", object_in_the_middle_image);
			    } else {												/** if object is on the right */
			    	if(object == object_on_the_right_side) {
				    	result.put("answer", position_value);
			    	} else if(object == object_in_the_middle){
				    	result.put("answer", temp2);
				    } else {
				    	result.put("answer", temp1);
				    }
			    	result.put("image", object_on_the_right_side_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
			
			    	/**
			    	 * Creating the ArrayList 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(position_value);
					mcq_option.add(temp1);
					mcq_option.add(temp2);
			
			    	/**
		   	  	 	 * Shuffling the mcq options
		   	  	 	 */
		   	  		Collections.shuffle(mcq_option);
		   	  	
		   	  		/**
		   	  		 * Returning the values of mcq options to the HashMap
		   	  		 */
		   	  		result.put("mcq_options", mcq_option);
			    } 
		   	 	       
		    /**
			 * Return the HashMap with image of the object which is on the left side, image of the object which is in the middle, image of object which is on the right side, object name, answer, ArrayList of mcq options
			 */ 
		    return result;    
		}
			
			/**
		     @name mg_get_position_which_object_is_at_the_top_or_bottom_of_another_object()
			 @description Gets the problem set data for identifying which object is at the top or bottom of another object
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is at the top, image of object which is at the bottom, position value (top or bottom), answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_which_object_is_at_the_top_or_bottom_of_another_object(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_at_the_top, object_at_the_top_image, object_at_the_bottom, object_at_the_bottom_image, position_value;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the top of another image 
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the bottom of another image 
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Selecting object which is at the top of another object and its image
			     */	
			    object_at_the_top = objects_array[rand1]; 
			    object_at_the_top_image = object_at_the_top.concat(".png");
			    
			    /**
			     * Selecting object which is at the bottom of another object and its image
			     */
			    object_at_the_bottom = objects_array[rand2];
			    object_at_the_bottom_image = object_at_the_bottom.concat(".png");
			   
			    /**
			     * Returning the object images to the HashMap
			     */
			    result.put("top_image", object_at_the_top_image);
			    result.put("bottom_image", object_at_the_bottom_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"top", "bottom"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand3 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand3];
			    result.put("position_value", position_value);
			    	    
			    /**
			     * Getting the answer based on position value
			     */
			    if(position_value == "top") {
			    	result.put("answer", object_at_the_top);
			    	result.put("image", object_at_the_top_image);
			    } else {
			    	result.put("answer", object_at_the_bottom);
			    	result.put("image", object_at_the_bottom_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
		 	
			    	/**
			    	 * Creating the ArrayList 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(object_at_the_top);
					mcq_option.add(object_at_the_bottom);
			
			    	/**
		    	  	 * Shuffling the mcq options
		    	  	 */
		    	  	Collections.shuffle(mcq_option);
		    	  	
		    	    /**
		    	  	 * Returning the values of mcq options to the HashMap
		    	  	 */
		    	  	result.put("mcq_options", mcq_option);
			    } 
		    	 	       
		    /**
			 * Return the HashMap with image of the object which is at the top, image of object which is at the bottom, position value (top or bottom), answer, ArrayList of mcq options
		     */ 
		     return result;    
		 }
			
			/**
		     @name mg_get_position_of_object_whether_at_the_top_or_bottom()
			 @description Gets the problem set data for identifying whether an object is at the top or bottom of another object
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is at the top, image of the object which is at the bottom, object name, answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_of_object_whether_at_the_top_or_bottom(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_at_the_top, object_at_the_top_image, object_at_the_bottom, object_at_the_bottom_image, object, position_value = null, temp = null;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3, rand4;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the top of another image 
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the bottom of another image
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Selecting object which is at the top and its image 
			     */	
			    object_at_the_top = objects_array[rand1]; 
			    object_at_the_top_image = object_at_the_top.concat(".png");
			    
			    /**
			     * Selecting object which is at the bottom and its image 
			     */
			    object_at_the_bottom = objects_array[rand2];
			    object_at_the_bottom_image = object_at_the_bottom.concat(".png");
			   
			    /**
			     * Randomly selecting an object out of the two images 
			     */
			    String[] object_array = {object_at_the_top, object_at_the_bottom};
			    rand4 = mg_giveRandomInteger(0, object_array.length - 1, random);
			    object = object_array[rand4];
			    
			    /**
			     * Returning the object images and object name 
			     */
			    result.put("object", object);
			    result.put("top_image", object_at_the_top_image);
			    result.put("bottom_image", object_at_the_bottom_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"top", "bottom"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand3 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand3];
			    
			    /**
			     * Position values for the wrong options
			     */
			    if(position_value == "top") {
			    	temp = "bottom";
			    } else {
			    	temp = "top";   	
			    } 
			   	    
			    /**
			     * Getting the answer
			     */
			    if(position_value == "top") {						/** if object is on the top */
			    	if(object == object_at_the_top) {
				    	result.put("answer", position_value);
			    	} else {
				    	result.put("answer", temp);
				    }
			    	result.put("image", object_at_the_top_image);
			    } else {											/** if object is at the bottom */
			    	if(object == object_at_the_bottom) {
				    	result.put("answer", position_value);
			    	} else {
				    	result.put("answer", temp);
				    }
			    	result.put("image", object_at_the_bottom_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
			
			    	/**
			    	 * Creating the ArrayList 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(position_value);
					mcq_option.add(temp);
			
			    	/**
		   	  	     * Shuffling the mcq options
		   	  	     */
		   	  	    Collections.shuffle(mcq_option);
		   	  	
		   	       /**
		   	  	    * Returning the values of mcq options to the HashMap
		   	  	    */
		   	  	   result.put("mcq_options", mcq_option);
			    } 
		   	 	       
		   /**
			* Return the HashMap with image of the object which is at the top, image of object which is at the bottom, object name, answer, ArrayList of mcq options
			*/ 
		    return result;    
		}
			
			/**
		     @name mg_get_position_which_object_is_at_the_top_bottom_or_in_the_middle()
			 @description Gets the problem set data for identifying which object is at the top, bottom or in the middle
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is at the top, image of the object which is in the middle, image of object which is at the bottom, position value (on the top, in the middle, at the bottom), answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_which_object_is_at_the_top_bottom_or_in_the_middle(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_at_the_top, object_at_the_top_image, object_in_the_middle, object_in_the_middle_image, object_at_the_bottom, object_at_the_bottom_image, position_value;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3, rand4;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the top
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is in the middle 
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the bottom 
			     */
			    do{
			       rand3 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand3 == rand1 || rand3 == rand2);
			    
			    /**
			     * Selecting object which is at the top and its image
			     */	
			    object_at_the_top = objects_array[rand1]; 
			    object_at_the_top_image = object_at_the_top.concat(".png");
			   
			    /**
			     * Selecting object which is in the middle and its image
			     */
			    object_in_the_middle = objects_array[rand2]; 
			    object_in_the_middle_image = object_in_the_middle.concat(".png");
			    
			    /**
			     * Selecting object which is at the bottom and its image
			     */
			    object_at_the_bottom = objects_array[rand3];
			    object_at_the_bottom_image = object_at_the_bottom.concat(".png");
			   
			    /**
			     * Returning the object names and object images to the HashMap
			     */
			    result.put("top_image", object_at_the_top_image);
			    result.put("middle_image", object_in_the_middle_image);
			    result.put("bottom_image", object_at_the_bottom_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"on the top", "in the middle", "on the bottom"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand4 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand4];
			    result.put("position_value", position_value);
			    	    
			    /**
			     * Getting the answer based on position value
			     */
			    if(position_value == "on the top") {						/** if object is on the top */
			    	result.put("answer", object_at_the_top);
			    	result.put("image", object_at_the_top_image);
			    } else if(position_value == "in the middle") {				/** if object is in the middle */
			    	result.put("answer", object_in_the_middle); 
			    	result.put("image", object_in_the_middle_image);
			    } else {													/** if object is at the bottom */
			    	result.put("answer", object_at_the_bottom);
			    	result.put("image", object_at_the_bottom_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
			
			    	/**
			    	 * Creating the ArrayList 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(object_at_the_top);
			    	mcq_option.add(object_in_the_middle);
					mcq_option.add(object_at_the_bottom);
			
			    	/**
		   	  	     * Shuffling the mcq options
		   	  	     */
		   	  		Collections.shuffle(mcq_option);
		   	  	
		   	        /**
		   	         * Returning the values of mcq options to the HashMap
		   	         */
		   	  		result.put("mcq_options", mcq_option);
			    } 
		   	 	       
		      /**
			   * Return the HashMap with image of the object which is at the top, image of the object which is in the middle, image of object which is at the bottom, position value (on the top, in the middle or at the bottom), answer, ArrayList of mcq options
			   */ 
		      return result;    
		}
			
			/**
		     @name mg_get_position_of_object_whether_at_the_top_bottom_or_in_the_middle()
			 @description Gets the problem set data for identifying whether an object is at the top, bottom or in the middle
			 @param mcq - boolean - Multiple choice options required true / false - default is false                        
			 @return HashMap (image of the object which is on the top, image of the object which is in the middle, image of object which is on the bottom, object name, answer, ArrayList of mcq options)
			 */
			public static Map<String, Object> mg_get_position_of_object_whether_at_the_top_bottom_or_in_the_middle(boolean mcq) {
			    
				/**
				 * Declaring the variables
				 */
				String object_at_the_top, object_at_the_top_image, object_in_the_middle, object_in_the_middle_image, object_at_the_bottom, object_at_the_bottom_image, object, position_value = null, temp1 = null, temp2 = null;
				
				/**
			     * Initializing the random generator
			     */
			    Random random = new Random();
			    
			    /**
			     * Creating the HashMap 
			     */
			    Map<String, Object> result = new HashMap<>();
			    
			    int rand1, rand2, rand3, rand4, rand5;
			    
			    /**
			     * Array of object names
			     */
			    String[] objects_array = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the top  
			     */
			    rand1 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    
			    /**
			     * Generating a random number for selecting a random object name which is in the middle
			     */
			    do{
			       rand2 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand2 == rand1);
			    
			    /**
			     * Generating a random number for selecting a random object name which is at the bottom
			     */
			    do{
			       rand3 = mg_giveRandomInteger(0, objects_array.length - 1, random);
			    }while(rand3 == rand1 || rand3 == rand2);
			    
			    /**
			     * Selecting object which is on the top and its image 
			     */	
			    object_at_the_top = objects_array[rand1]; 
			    object_at_the_top_image = object_at_the_top.concat(".png");
			    
			    /**
			     * Selecting object which is in the middle and its image
			     */
			    object_in_the_middle = objects_array[rand2]; 
			    object_in_the_middle_image = object_in_the_middle.concat(".png");
			    
			    /**
			     * Selecting object which is at the bottom and its image
			     */
			    object_at_the_bottom = objects_array[rand3];
			    object_at_the_bottom_image = object_at_the_bottom.concat(".png");
			   
			    /**
			     * Randomly selecting an object out of the three images 
			     */
			    String[] object_array = {object_at_the_top, object_in_the_middle, object_at_the_bottom};
			    rand4 = mg_giveRandomInteger(0, object_array.length - 1, random);
			    object = object_array[rand4];
			    
			    /**
			     * Returning the object's images and object's name 
			     */
			    result.put("object", object);
			    result.put("top_image", object_at_the_top_image);
			    result.put("middle_image", object_in_the_middle_image);
			    result.put("bottom_image", object_at_the_bottom_image);
			    
			    /**
			     * Array of position values
			     */
			    String[] position_array = {"on the top", "in the middle", "on the bottom"};
			    
			    /**
			     * Generating a random number for selecting a random value 
			     */
			    rand5 = mg_giveRandomInteger(0, position_array.length - 1, random);
			    
			    /**
			     * Selecting a position value
			     */
			    position_value = position_array[rand5];
			    
			    /**
			     * Position values for the wrong options
			     */
			    if(position_value == "on the top") {
			    	temp1 = "in the middle";
			    	temp2 = "on the bottom";
			    } else if(position_value == "in the middle") {
			    	temp1 = "on the top";
			    	temp2 = "on the bottom";
			    } else {
			    	temp1 = "on the top";
			    	temp2 = "in the middle";
			    } 
			   	    
			    /**
			     * Getting the answer
			     */
			    if(position_value == "on the top") {				/** if object is on the top */
			    	if(object == object_at_the_top) {
				    	result.put("answer", position_value);  
			    	} else if(object == object_in_the_middle) {
				    	result.put("answer", temp1);
				    } else {
				    	result.put("answer", temp2);
				    } 
			    	result.put("image", object_at_the_top_image);
			    } else if(position_value == "in the middle") {		/** if object is in the middle */
			    	if(object == object_at_the_top) {
				    	result.put("answer", temp1);
			    	} else if(object == object_in_the_middle) {
				    	result.put("answer", position_value);
				    } else {
				    	result.put("answer", temp2);
				    } 
			    	result.put("image", object_in_the_middle_image);
			    } else {											/** if object is at the bottom */
			    	if(object == object_at_the_bottom) {
				    	result.put("answer", position_value);
			    	} else if(object == object_in_the_middle) {
				    	result.put("answer", temp2);
				    } else {
				    	result.put("answer", temp1);
				    }
			    	result.put("image", object_at_the_bottom_image);
			    }	
			    	      	       
			    /**
			     * Creating the mcq options 
			     */
			    if(mcq == true) {
			
			    	/**
			    	 * Creating the ArrayList 
			    	 */ 
			    	ArrayList <String> mcq_option = new ArrayList<>(); 
			    	
			    	/**
			    	 * Storing the values in the ArrayList
			    	 */
			    	mcq_option.add(position_value);
					mcq_option.add(temp1);
					mcq_option.add(temp2);
			
			    	/**
		  	  	 	 * Shuffling the mcq options
		  	  	 	 */
		  	  		Collections.shuffle(mcq_option);
		  	  	
		  	  		/**
		  	  		 * Returning the values of mcq options to the HashMap
		  	  		 */
		  	  		result.put("mcq_options", mcq_option);
			    } 
		  	 	       
		    /**
			 * Return the HashMap with image of the object which is on the top, image of the object which is in the middle, image of object which is on the bottom, object name, answer, ArrayList of mcq options
			 */ 
		    return result;    
		}

				/**
			     @name mg_get_subtraction_of_two_numbers_with_images()
				 @description Gets the problem set data for subtraction of 2 numbers and displays the output in the form of an image                             
				 @param level - int - Chooses a level. Values are 1 or 2.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, image, image_title, image_url, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_images(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 5, random);
					} else {
						n1 = mg_giveRandomInteger(2, 10, random);
					} 

					n2 = mg_giveRandomInteger(1, n1 - 1, random);

					/**
					 * Calculating the answer
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap 
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Array of images
					 */
					String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

					/**
					 * Selecting a random image
					 */
					int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

					String image = images[random_index];
					String imagename = image.concat(".png");
					String imagetitle = image;

					/**
					 * Storing the values of image
					 */
					result.put("image", imagename);
					result.put("image_title", imagetitle);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};	

						if(level == 1) {

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(1, 4).toArray();

						} else {

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(1, 9).toArray();
						} 

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random number (the answer), ArrayList of mcq options, image, image_title, image_url 
					 */
					return result;    
				}

				/**
			     @name mg_get_subtraction_of_two_numbers()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, answer, ArrayList of mcq options)
				 */       
				public static Map<String, Object> mg_get_subtraction_of_two_numbers(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 5, random);
						n2 = mg_giveRandomInteger(1, n1 - 1, random);
					} else if(level == 2) {
						n1 = mg_giveRandomInteger(2, 10, random);
						n2 = mg_giveRandomInteger(1, n1 - 1, random);
					} else if(level == 3) {
						n1 = mg_giveRandomInteger(11, 20, random);
						n2 = mg_giveRandomInteger(1, 9, random);
					} else {
						n1 = mg_giveRandomInteger(11, 20, random);
						n2 = mg_giveRandomInteger(10, n1 - 1, random);
					}

					/**
					 * Calculating the answer
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, third random number, and answers in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(1, 4).toArray();

						} else if(level == 2) {

							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 9) {
								mcq_upper_limit = 9;  
							} else {
								mcq_upper_limit = answer + 5;
							}	

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						} else if(level == 3) {

							if((answer - 5) <= 2) {
								mcq_lower_limit = 2;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 19) {
								mcq_upper_limit = 19;  
							} else {
								mcq_upper_limit = answer + 5;
							}	

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						} else {

							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 19) {
								mcq_upper_limit = 19;  
							} else {
								mcq_upper_limit = answer + 5;
							}	

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
						}

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}	    

				/**
			     @name mg_get_subtraction_subtraction_word_problems()
				 @description Gets the problem set data for subtraction of 2 numbers and returns the result in words
				 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, answer, answer in words, n1 in words, name, object, pronoun, ArrayList of mcq options)
				 */       
				public static Map<String, Object> mg_get_subtraction_subtraction_word_problems(int level, boolean mcq) {

					Map<String, Object> result = mg_get_subtraction_of_two_numbers(level, mcq);

					/**
					 * Storing the value of answer in words  
					 */
					result.put("answer_in_words", mg_convert((int)result.get("answer")));

					/**
					 * Storing the n1 in words
					 */
					result.put("number1_in_words", mg_convert((int)result.get("number1")));

					/**
					 * Creating a temporary ArrayList
					 */
					ArrayList<String> temp = mg_getRandomNames();
					result.put("name", temp.get(0));
					result.put("object", temp.get(3));
					result.put("pronoun", temp.get(12));

					/**
					 * Return the HashMap with first random number, second random number, answer, answer in words, n1 in words, name, object, pronoun, ArrayList of mcq options
					 */ 
					return result;    
				}

				/**
			     @name mg_get_subtraction_showing_related_subtraction_of_two_numbers()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param level - int - Chooses a level. Values are 1 or 2.
				 @return HashMap (first random number, second random number, third random number, answer1, and answer2)
				 */       
				public static Map<String, Object> mg_get_subtraction_showing_related_subtraction_of_two_numbers(int level) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2, n3;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 10, random);
					} else {
						n1 = mg_giveRandomInteger(11, 20, random);
					} 

					n2 = mg_giveRandomInteger(1, n1 - 1, random);

					/**
					 * Calculating the answer
					 */
					n3 = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, third random number, and answers in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("number1_related", n1);
					result.put("number2_related", n3);
					result.put("answer", n3);
					result.put("answer_related", n2);   

					/**
					 * Return the HashMap with first random number, second random number, third random number, answer1, and answer2
					 */ 
					return result;    
				} 

				/**
			     @name mg_get_subtraction_of_two_numbers_with_images_filling_the_missing_number()
				 @description Gets the problem set data for subtraction of 2 numbers and displaying the output in the form of an image                             
				 @param level - int - Chooses a level. Values are 1 or 2.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (image, image title, first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */       
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_images_filling_the_missing_number(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2, n3, answer = 0;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 5, random);
					} else {
						n1 = mg_giveRandomInteger(2, 9, random);
					} 

					n2 = mg_giveRandomInteger(1, n1 - 1, random);

					/**
					 * Calculating the answer
					 */
					n3 = n1 - n2;

					/**
					 * Generating random number for input field
					 */
					int rand1 = mg_giveRandomInteger(0, 1, random);

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					if(rand1 == 0) {                /** number2 will be the input field */
						result.put("number1", n1);
						result.put("number2", "::blank::");
						result.put("answer", n2);
						result.put("number3", n3);
						answer = n2;
					} else {			/** number1 will be the input field */
						result.put("number1", "::blank::");
						result.put("answer", n1);
						result.put("number2", n2);
						result.put("number3", n3);
						answer = n1;
					}

					/**
					 * Array of images
					 */
					String[] images = {"apple","ball","bicycle","book","car","diya","mango","orange","eraser","bulb"};

					/**
					 * Selecting a random image
					 */
					int random_index = mg_giveRandomInteger( 0, images.length - 1, random);

					String image = images[random_index];
					String imagename = image.concat(".png");
					String imagetitle = image;

					/**
					 * Storing the value of random image
					 */
					result.put("image", imagename );
					result.put("image_title", imagetitle );

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};	

						if(level == 1) {
							if(rand1 == 0) {

								/**
								 * Generating remaining mcq options within the calculated range
								 */
								array = IntStream.rangeClosed(1, 4).toArray();

							} else {

								/**
								 * Generating remaining mcq options within the calculated range
								 */
								array = IntStream.rangeClosed(2, 5).toArray();      		
							}
						} else {	
							if(rand1 == 0) {

								/**
								 * Generating remaining mcq options within the calculated range
								 */
								array = IntStream.rangeClosed(1, 8).toArray();

							} else {

								/**
								 * Generating remaining mcq options within the calculated range
								 */
								array = IntStream.rangeClosed(2, 9).toArray();      		
							}	    	
						} 

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with image, image title, first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options 
					 */ 
					return result;    
				}

				/**
			     @name mg_get_subtraction_of_two_numbers_by_comparison()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param level - int - Chooses a level. Values are 1 or 2.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */    
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_by_comparison(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 10, random);
					} else {
						n1 = mg_giveRandomInteger(11, 20, random);
					} 

					n2 = mg_giveRandomInteger(1, n1 - 1, random);

					/**
					 * Calculating the answer
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {   			
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 9) {
								mcq_upper_limit = 9;  
							} else {
								mcq_upper_limit = answer + 5;
							}

						} else {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 19) {
								mcq_upper_limit = 19;  
							} else {
								mcq_upper_limit = answer + 5;
							}	
						} 

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}	    

				/**
			     @name mg_get_subtraction_of_two_numbers_assisted()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param level - int - Chooses a level. Values are 1 or 2.
				 @return HashMap (number1, number2, number3, answer1, answer2)
				 */    
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_assisted(int level) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2, n3;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 10, random);
					} else if(level == 2) {
						n1 = mg_giveRandomInteger(11, 20, random);
					} 

					n2 = mg_giveRandomInteger(1, n1 - 1, random);

					/**
					 * Calculating the answer
					 */
					n3 = n1 - n2;

					/**
					 * Generating random number for input field
					 */
					int rand1 = mg_giveRandomInteger(0, 1, random);

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					if(rand1 == 0) {				/** n2 will be the input field */
						result.put("answer2", n2);
						result.put("number_1", n1);
						result.put("number_2", "::blank::");
					} else {						/** n1 will be the input field */
						result.put("answer2", n1);
						result.put("number_1", "::blank::");
						result.put("number_2", n2);
					}
					
					result.put("answer1", n3);
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("number3", "::blank::");
					result.put("number_3", n3);
					
					/**
					 * Return the HashMap with number1, number2, number3, answer1, answer2
					 */ 
					return result;
				}	    

				/**
			     @name mg_get_subtraction_of_two_numbers_non_assisted()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param level - int - Chooses a level. Values are 1, 2 or 3.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */    
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_non_assisted(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1, n2, n3, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 10, random);
					} else if(level == 2) {
						n1 = mg_giveRandomInteger(11, 20, random);
					} else {
						n1 = mg_giveRandomInteger(21, 100, random);
					}

					n2 = mg_giveRandomInteger(1, n1 - 1, random);

					/**
					 * Calculating the answer
					 */
					n3 = n1 - n2;

					/**
					 * Generating random number for input field
					 */
					int rand1 = mg_giveRandomInteger(0, 2, random);
					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					if(rand1 == 0) {                /** n3 will be the input field */
						result.put("number1", n1);
						result.put("number2", n2);
						result.put("number3", "::blank::");
						result.put("answer", n3);
						answer = n3;
					} else if(rand1 == 1) {			/** n2 will be the input field */
						result.put("number1", n1);
						result.put("number2", "::blank::");
						result.put("answer", n2);
						result.put("number3", n3);
						answer = n2;
					} else {						/** n1 will be the input field */
						result.put("number1", "::blank::");
						result.put("answer", n1);
						result.put("number2", n2);
						result.put("number3", n3);
						answer = n1;
					}

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {

							if(rand1 == 0) {

								if((answer - 5) <= 1) {
									mcq_lower_limit = 1;  
								} else {
									mcq_lower_limit = answer - 5;
								}

								if((answer + 5) >= 9) {
									mcq_upper_limit = 9;  
								} else {
									mcq_upper_limit = answer + 5;
								}

								/**
								 * Generating remaining mcq options within the calculated range
								 */
								array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

							} else if(rand1 == 1) {

								/**
								 * Generating remaining mcq options within the calculated range
								 */
								array = IntStream.rangeClosed(1, 9).toArray();

							} else if(rand1 == 2) {

								/**
								 * Generating remaining mcq options within the calculated range
								 */
								array = IntStream.rangeClosed(2, 10).toArray();
							}

						} else if(level == 2) {

							if(rand1 == 0) {

								if((answer - 5) <= 1) {
									mcq_lower_limit = 1;  
								} else {
									mcq_lower_limit = answer - 5;
								}

								if((answer + 5) >= 19) {
									mcq_upper_limit = 19;  
								} else {
									mcq_upper_limit = answer + 5;
								}

							} else if(rand1 == 1) {

								if((answer - 5) <= 1) {
									mcq_lower_limit = 1;  
								} else {
									mcq_lower_limit = answer - 5;
								}

								if((answer + 5) >= 19) {
									mcq_upper_limit = 19;  
								} else {
									mcq_upper_limit = answer + 5;
								}

							} else {

								if((answer - 5) <= 11) {
									mcq_lower_limit = 11;  
								} else {
									mcq_lower_limit = answer - 5;
								}

								if((answer + 5) >= 20) {
									mcq_upper_limit = 20;  
								} else {
									mcq_upper_limit = answer + 5;
								}	
							}

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						} else {

							if(rand1 == 0) {
								if((answer - 5) <= 1) {
									mcq_lower_limit = 1;  
								} else {
									mcq_lower_limit = answer - 5;
								}

								if((answer + 5) >= 99) {
									mcq_upper_limit = 99;  
								} else {
									mcq_upper_limit = answer + 5;
								}  		

							} else if(rand1 == 1) {

								if((answer - 5) <= 1) {
									mcq_lower_limit = 1;  
								} else {
									mcq_lower_limit = answer - 5;
								}

								if((answer + 5) >= 99) {
									mcq_upper_limit = 99;  
								} else {
									mcq_upper_limit = answer + 5;
								}

							} else {

								if((answer - 5) <= 21) {
									mcq_lower_limit = 21;  
								} else {
									mcq_lower_limit = answer - 5;
								}

								if((answer + 5) >= 100) {
									mcq_upper_limit = 100;  
								} else {
									mcq_upper_limit = answer + 5;
								} 
							}

							/**
							 * Generating remaining mcq options within the calculated range
							 */
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();
						}

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}	    

				/**
			     @name mg_get_subtraction_of_a_number_with_zero()
				 @description Gets the problem set data for subtraction of 2 numbers, where is the first is of 1 or 2 digits, while the second number is zero                             
				 @param level - int - Chooses a level. Values are 1 or 2.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */    
				public static Map<String, Object> mg_get_subtraction_of_a_number_with_zero(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1, n2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(1, 10, random);
					} else {
						n1 = mg_giveRandomInteger(11, 99, random);
					}
					n2 = 0;

					/**
					 * Calculating the answer
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {

							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 10) {
								mcq_upper_limit = 10;  
							} else {
								mcq_upper_limit = answer + 5;
							}

						} else if(level == 2) {

							if((answer - 5) <= 11) {
								mcq_lower_limit = 11;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 99) {
								mcq_upper_limit = 99;  
							} else {
								mcq_upper_limit = answer + 5;
							}  		
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}	    

				/**
			     @name mg_get_subtraction_of_two_numbers_with_subtracting_tens()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_subtracting_tens(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1, n2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					n2 = 10 * mg_giveRandomInteger(1, 9, random);
					do{
						n1 = mg_giveRandomInteger(1, 99, random);
					} while(n1 < n2);

					/**
					 * Calculating the answer
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 0) {
							mcq_lower_limit = 0;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 89) {
							mcq_upper_limit = 89;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;    
				}

				/**
			     @name mg_get_subtraction_relating_addition_and_subtraction()
				 @description Gets the problem set data for subtraction of 2 numbers, where first is of two digits and second number is of one digit                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_relating_addition_and_subtraction(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1, n2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number 
					 */
					n1 = mg_giveRandomInteger(10, 30, random);
					n2 = mg_giveRandomInteger(1, 9, random);

					/**
					 * Calculating the answer
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 1) {
							mcq_lower_limit = 1;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 29) {
							mcq_upper_limit = 29;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}   

				/**
			      @name mg_get_subtraction_by_counting_backward_using_number_lines()
				  @description Gets the problem set data subtracting 2 number using number line 
				  @param level - int - Chooses a level. Values are 1 or 2, default is 1
				  @param mcq - boolean - Multiple choice options required true / false - default is false     
				  @return HashMap (first random number, second random number, answer, image, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_by_counting_backward_using_number_lines(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1, n2, answer, rand1;
					String image;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Array of images
					 */
					String[] images_level1 = {"5_3_8_s_number_line","6_2_8_s_number_line","7_4_8_s_number_line","9_4_8_s_number_line","8_3_8_s_number_line", "10_2_8_s_number_line", "5_2_8_s_number_line","6_4_8_s_number_line","7_2_8_s_number_line","9_3_8_s_number_line"};
					String[] images_level2 = {"15_3_8_s_number_line","23_5_8_s_number_line","36_6_8_s_number_line","42_5_8_s_number_line","55_6_8_s_number_line","67_3_8_s_number_line","74_6_8_s_number_line","87_4_8_s_number_line","90_5_8_s_number_line","17_5_8_s_number_line"};

					/**
					 * Generating first and second random number
					 */
					if(level == 2) {
						rand1 = mg_giveRandomInteger(0, images_level1.length - 1, random);
						String[] temp = images_level2[rand1].split("_");

						n1 = Integer.parseInt(temp[0]);
						n2 = Integer.parseInt(temp[1]);
						answer = n1 - n2;

						image = images_level2[rand1] + ".png";
					} else {
						rand1 = mg_giveRandomInteger(0, images_level2.length - 1, random);
						String[] temp = images_level1[rand1].split("_");

						n1 = Integer.parseInt(temp[0]);
						n2 = Integer.parseInt(temp[1]);
						answer = n1 - n2;

						image = images_level1[rand1] + ".png";
					}

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing number1, number2, answer, and image name in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);
					result.put("image", image);

					/**
					 * Creating the mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating ArrayList
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Creating an int array
						 */
						int[] array;
						int answer_lower_limit, answer_upper_limit;

						/**
						 * Adding answer as mcq option in ArrayList 
						 */
						mcq_option.add(answer);

						/**
						 * Generating remaining mcq options within a range
						 */
						if(answer - 5 < 1) {
							answer_lower_limit = 1;
						} else {
							answer_lower_limit = answer - 5;
						}

						answer_upper_limit = answer + 5;

						array = IntStream.rangeClosed(answer_lower_limit, answer_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for (int u : array) {
							if (!mg_containsInArray(mcq_option, u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the remaining mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random number, image, ArrayList of mcq options
					 */  
					return result;
				}

				/**
			     @name mg_get_subtraction_of_two_numbers_with_one_digit_and_two_digits()
				 @description Gets the problem set data for subtraction of 2 numbers, where first is of two digits and second number is of one digit                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_one_digit_and_two_digits(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int t1 = 0, u1 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating tens digit for the first number
					 */
					t1 = mg_giveRandomInteger(1, 9, random);

					/**
					 * Generating units digit for the first and second number
					 */
					u1 = mg_giveRandomInteger(1, 9, random);
					u2 = mg_giveRandomInteger(0, u1 - 1, random);

					/**
					 * Generating first and second random number 
					 */
					random_number_1 = ((t1) * 10) + u1;
					random_number_2 = u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 11) {
							mcq_lower_limit = 11;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 99) {
							mcq_upper_limit = 99;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}   

				/**
			     @name mg_get_subtraction_of_two_numbers_with_two_digits()
				 @description Gets the problem set data for subtraction of 2 numbers, where both numbers are of 2 digits                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_two_digits(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int t1 = 0, t2 = 0, u1 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating tens digit for the first and second number
					 */
					t1 = mg_giveRandomInteger(2, 9, random);
					t2 = mg_giveRandomInteger(1, t1 - 1, random);

					/**
					 * Generating units digit for the first and second number
					 */
					u1 = mg_giveRandomInteger(1, 9, random);
					u2 = mg_giveRandomInteger(0, u1 - 1, random);

					/**
					 * Generating first and second random number 
					 */
					random_number_1 = ((t1) * 10) + u1;
					random_number_2 = ((t2) * 10) + u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 11) {
							mcq_lower_limit = 11;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 89) {
							mcq_upper_limit = 89;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */
					return result;
				}        

				/**
			     @name mg_get_subtraction_of_one_digit_and_three_digits()
				 @description Gets the problem set data for subtraction of 2 numbers, where the first number is a 3-digits number and the second is a 1-digit number                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_one_digit_and_three_digits(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int h1 = 0, t1 = 0, u1 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating hundreds digit for the first number
					 */
					h1 = mg_giveRandomInteger(1, 9, random);

					/**
					 * Generating tens digit for the first number
					 */
					t1 = mg_giveRandomInteger(1, 9, random);

					/**
					 * Generating units digit for the first and second number
					 */
					u1 = mg_giveRandomInteger(2, 9, random);
					u2 = mg_giveRandomInteger(1, u1 - 1, random);

					/**
					 * Generating first and second random number 
					 */
					random_number_1 = ((h1) * 100) + ((t1) * 10) + u1;
					random_number_2 = u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating the mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 111) {
							mcq_lower_limit = 111;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 998) {
							mcq_upper_limit = 998;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */
					return result;
				}

				/**
			     @name mg_get_subtraction_of_two_digits_and_three_digits()
				 @description Gets the problem set data for subtraction of 2 numbers, where the first number is a 3-digits number and the second is a 2-digits number                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_digits_and_three_digits(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int h1 = 0, t1 = 0, u1 = 0, t2 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating hundreds digit for the first number
					 */
					h1 = mg_giveRandomInteger(1, 9, random);

					/**
					 * Generating tens digit for the first and second number
					 */
					t1 = mg_giveRandomInteger(2, 9, random);
					t2 = mg_giveRandomInteger(1, t1 - 1, random);

					/**
					 * Generating units digit for the first and second number
					 */
					u1 = mg_giveRandomInteger(2, 9, random);
					u2 = mg_giveRandomInteger(1, u1 - 1, random);

					/**
					 * Generating first and second random number 
					 */
					random_number_1 = ((h1) * 100) + ((t1) * 10) + u1;
					random_number_2 = ((t2) * 10) + u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 111) {
							mcq_lower_limit = 111;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 988) {
							mcq_upper_limit = 988;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */
					return result;
				}

				/**
			     @name mg_get_subtraction_two_numbers_with_three_digits()
				 @description Gets the problem set data for subtraction of 2 numbers, where both the numbers are of 3-digits                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */ 
				public static Map<String, Object> mg_get_subtraction_two_numbers_with_three_digits(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int h1 = 0, t1 = 0, u1 = 0, h2 = 0, t2 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating hundreds digit for the first and second number
					 */
					h1 = mg_giveRandomInteger(2, 9, random);
					h2 = mg_giveRandomInteger(1, h1 - 1, random);

					/**
					 * Generating tens digit for the first and second number
					 */
					t1 = mg_giveRandomInteger(2, 9, random);
					t2 = mg_giveRandomInteger(1, t1 - 1, random);

					/**
					 * Generating units digit for the first and second number
					 */
					u1 = mg_giveRandomInteger(2, 9, random);
					u2 = mg_giveRandomInteger(1, u1 - 1, random);

					/**
					 * Generating first and second random number 
					 */
					random_number_1 = ((h1) * 100) + ((t1) * 10) + u1;
					random_number_2 = ((h2) * 100) + ((t2) * 10) + u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 111) {
							mcq_lower_limit = 111;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 888) {
							mcq_upper_limit = 888;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}

				/**
			     @name mg_get_subtraction_of_one_digit_and_two_digits_with_borrowing()
				 @description Gets the problem set data for subtraction of 2 numbers, where the first number is of two digits and the second number is of one digit                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_one_digit_and_two_digits_with_borrowing(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int t1 = 0, u1 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating tens and units digit for the first number. Also, generating units digit for the second number.
					 */	
					t1 = mg_giveRandomInteger(1, 9, random);

					u1 = mg_giveRandomInteger(1, 8, random);
					u2 = mg_giveRandomInteger(u1 + 1, 9, random);

					/**
					 * Calculating first and second random number
					 */
					random_number_1 = (10 * (t1)) + u1;
					random_number_2 = u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 2) {
							mcq_lower_limit = 2;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 89) {
							mcq_upper_limit = 89;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}   

				/**
			     @name mg_get_subtraction_of_two_numbers_with_two_digits_with_borrowing()
				 @description Gets the problem set data for subtraction of 2 numbers, where both numbers are of 2 digits                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */ 
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_two_digits_with_borrowing(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int t1 = 0, u1 = 0, t2 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating tens and units digit for the first and second number
					 */	
					t1 = mg_giveRandomInteger(2, 9, random);
					t2 = mg_giveRandomInteger(1, t1 - 1, random);

					u1 = mg_giveRandomInteger(1, 8, random);
					u2 = mg_giveRandomInteger(u1 + 1, 9, random);

					/**
					 * Calculating first and second random number
					 */
					random_number_1 = (10 * (t1)) + u1;
					random_number_2 = (10 * (t2)) + u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 2) {
							mcq_lower_limit = 2;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 79) {
							mcq_upper_limit = 79;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */
					return result;
				}        

				/**
			     @name mg_get_subtraction_of_two_numbers_with_one_digit_and_three_digits_with_borrowing()
				 @description Gets the problem set data for subtraction of 2 numbers, where first number is of three digits and the second number is of one digit                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_one_digit_and_three_digits_with_borrowing(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int h1 = 0, t1 = 0, u1 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating hundreds, tens, and units digit for the first number. Also, generating units digit for the second number.
					 */
					h1 = mg_giveRandomInteger(1, 9, random);

					t1 = mg_giveRandomInteger(1, 9, random);

					u1 = mg_giveRandomInteger(1, 8, random);
					u2 = mg_giveRandomInteger(u1 + 1, 9, random);

					/**
					 * Calculating first and second random number
					 */
					random_number_1 = (100 * (h1)) + (10 * (t1)) + u1;
					random_number_2 = u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if((answer - 5) <= 102) {
							mcq_lower_limit = 102;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 989) {
							mcq_upper_limit = 989;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}        

				/**
			     @name mg_get_subtraction_of_two_numbers_with_two_digits_and_three_digits_with_borrowing()
				 @description Gets the problem set data for subtraction of 2 numbers, where first number is of three digits and the second number is of two digits                             
				 @param level - int - Chooses a level. Values are 1 or 2.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */ 
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_two_digits_and_three_digits_with_borrowing(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int h1 = 0, t1 = 0, u1 = 0, t2 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating hundreds, tens, and units digit for the first number. Also, generating tens and units digit for the second number.
					 */
					if(level == 1) {

						h1 = mg_giveRandomInteger(1, 9, random);

						t1 = mg_giveRandomInteger(2, 9, random);
						t2 = mg_giveRandomInteger(1, t1 - 1, random);

						u1 = mg_giveRandomInteger(1, 8, random);
						u2 = mg_giveRandomInteger(u1 + 1, 9, random);

					} else if(level == 2) {

						h1 = mg_giveRandomInteger(1, 9, random);

						t1 = mg_giveRandomInteger(1, 8, random);
						t2 = mg_giveRandomInteger(t1 + 1, 9, random);

						u1 = mg_giveRandomInteger(1, 8, random);
						u2 = mg_giveRandomInteger(u1 + 1, 9, random);	
					}

					/**
					 * Calculating first and second random number
					 */
					random_number_1 = (100 * (h1)) + (10 * (t1)) + u1;
					random_number_2 = (10 * (t2)) + u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {

							if((answer - 5) <= 102) {
								mcq_lower_limit = 102;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 979) {
								mcq_upper_limit = 979;  
							} else {
								mcq_upper_limit = answer + 5;
							}

						} else if(level == 2) {

							if((answer - 5) <= 12) {
								mcq_lower_limit = 12;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 889) {
								mcq_upper_limit = 889;  
							} else {
								mcq_upper_limit = answer + 5;
							}	
						}	

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq option
					 */ 
					return result;
				}        

				/**
			     @name mg_get_subtraction_of_two_numbers_with_three_digits_with_borrowing()
				 @description Gets the problem set data for subtraction of 2 numbers, where both the numbers are of three digits                             
				 @param level - int - Chooses a level. Values are 1, 2 or 3.
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_with_three_digits_with_borrowing(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int h1 = 0, t1 = 0, u1 = 0, h2 = 0, t2 = 0, u2 = 0, random_number_1, random_number_2, answer;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating hundreds, tens, and units digit for the first and second number
					 */
					if(level == 1) {

						h1 = mg_giveRandomInteger(2, 9, random);
						h2 = mg_giveRandomInteger(1, h1 - 1, random);

						t1 = mg_giveRandomInteger(2, 9, random);
						t2 = mg_giveRandomInteger(1, t1 - 1, random);

						u1 = mg_giveRandomInteger(1, 8, random);
						u2 = mg_giveRandomInteger(u1 + 1, 9, random);

					} else if(level == 2) {

						h1 = mg_giveRandomInteger(2, 9, random);
						h2 = mg_giveRandomInteger(1, h1 - 1, random);

						t1 = mg_giveRandomInteger(1, 8, random);
						t2 = mg_giveRandomInteger(t1 + 1, 9, random);

						u1 = mg_giveRandomInteger(2, 9, random);
						u2 = mg_giveRandomInteger(1, u1 - 1, random);

					} else if(level == 3) {

						h1 = mg_giveRandomInteger(2, 9, random);
						h2 = mg_giveRandomInteger(1, h1 - 1, random);

						t1 = mg_giveRandomInteger(1, 8, random);
						t2 = mg_giveRandomInteger(t1 + 1, 9, random);

						u1 = mg_giveRandomInteger(1, 8, random);
						u2 = mg_giveRandomInteger(u1 + 1, 9, random);        
					}

					/**
					 * Calculating first and second random number
					 */
					random_number_1 = (100 * (h1)) + (10 * (t1)) + u1;
					random_number_2 = (100 * (h2)) + (10 * (t2)) + u2;

					/**
					 * Calculating the answer
					 */
					answer = random_number_1 - random_number_2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", random_number_1);
					result.put("number2", random_number_2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if (mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {

							if((answer - 5) <= 102) {
								mcq_lower_limit = 102;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 879) {
								mcq_upper_limit = 879;  
							} else {
								mcq_upper_limit = answer + 5;
							}

						} else if(level == 2) {

							if((answer - 5) <= 21) {
								mcq_lower_limit = 21;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 798) {
								mcq_upper_limit = 798;  
							} else {
								mcq_upper_limit = answer + 5;
							}

						} else if(level == 3) {

							if((answer - 5) <= 12) {
								mcq_lower_limit = 12;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 789) {
								mcq_upper_limit = 789;  
							} else {
								mcq_upper_limit = answer + 5;
							} 		
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq options
					 */ 
					return result;
				}

				/**
			     @name mg_get_subtraction_of_two_numbers_upto_four_digits()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_upto_four_digits(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2 = 0, answer = 0;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number
					 */
					n1 = mg_giveRandomInteger(1000, 9999, random); 
					n2 = mg_giveRandomInteger(10, n1 - 1, random);

					/**
					 * Calculating the result
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	
						if((answer - 5) <= 1) {
							mcq_lower_limit = 1;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 99989) {
							mcq_upper_limit = 99989;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq options
					 */
					return result;    
				}

				/**
			     @name mg_get_subtraction_of_two_numbers_upto_five_digits()
				 @description Gets the problem set data for subtraction of 2 numbers                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_of_two_numbers_upto_five_digits(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2 = 0, answer = 0;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number
					 */
					n1 = mg_giveRandomInteger(10000, 99999, random); 
					n2 = mg_giveRandomInteger(10, n1 - 1, random);

					/**
					 * Calculating the result
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	
						if((answer - 5) <= 1) {
							mcq_lower_limit = 1;  
						} else {
							mcq_lower_limit = answer - 5;
						}

						if((answer + 5) >= 99989) {
							mcq_upper_limit = 99989;  
						} else {
							mcq_upper_limit = answer + 5;
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array){
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq options
					 */
					return result;    
				}

				/**
			     @name mg_get_subtraction_vertical_ordered_subtraction_of_two_numbers()
				 @description Gets the problem set data for subtraction of 2 numbers
				 @param level - int - Chooses a level. Values are 1, 2 or 3.                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_vertical_ordered_subtraction_of_two_numbers(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2 = 0, answer = 0;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(100, 999, random);
					} else if(level == 2) {
						n1 = mg_giveRandomInteger(1000, 9999, random);
					} else {
						n1 = mg_giveRandomInteger(10000, 99999, random); 
					}

					n2 = mg_giveRandomInteger(1, n1 - 1, random);

					/**
					 * Calculating the result
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0;

						if(level == 1) {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 998) {
								mcq_upper_limit = 998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else if(level == 2) {

							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 9998) {
								mcq_upper_limit = 9998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 99998) {
								mcq_upper_limit = 99998;  
							} else {
								mcq_upper_limit = answer + 5;
							}	
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array){
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq options
					 */
					return result;    
				}

				/**
			     @name mg_get_subtraction_vertical_unordered_subtraction_of_two_numbers()
				 @description Gets the problem set data for subtraction of 2 numbers
				 @param level - int - Chooses a level. Values are 1, 2 or 3.                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_vertical_unordered_subtraction_of_two_numbers(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1 = 0, n2 = 0, answer = 0;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(1, 999, random);
						do{
							n2 = mg_giveRandomInteger(1, 999, random);
						} while(n2 > n1 || n2 == n1);

					} else if(level == 2) {
						n1 = mg_giveRandomInteger(1, 9999, random);
						do{
							n2 = mg_giveRandomInteger(1, 9999, random);
						} while(n2 > n1 || n2 == n1);

					} else if(level == 3) {
						n1 = mg_giveRandomInteger(1, 99999, random);
						do{
							n2 = mg_giveRandomInteger(1, 99999, random);
						} while(n2 > n1 || n2 == n1);

					}

					/**
					 * Calculating the result
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0;

						if(level == 1) {     	
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 998) {
								mcq_upper_limit = 998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else if(level == 2) {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 9998) {
								mcq_upper_limit = 9998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else if(level == 3) {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 99998) {
								mcq_upper_limit = 99998;  
							} else {
								mcq_upper_limit = answer + 5;
							}	
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array){
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq options
					 */
					return result;    
				}

				/**
			     @name mg_get_subtraction_horizontal_ordered_subtraction_of_two_numbers()
				 @description Gets the problem set data for subtraction of 2 numbers
				 @param level - int - Chooses a level. Values are 1, 2, 3 or 4.                             
				 @param mcq - boolean - Multiple choice options required true / false - default is false
				 @return HashMap (first random number, second random number, subtraction of the 2 random number, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_horizontal_ordered_subtraction_of_two_numbers(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int n1, n2, answer = 0;

					/**
					 * Initializing random generator
					 */
					Random random = new Random();

					/**
					 * Generating first and second random number
					 */
					if(level == 1) {
						n1 = mg_giveRandomInteger(2, 999, random);
						do{
							n2 = mg_giveRandomInteger(1, n1 - 1, random);
						} while(n2 > n1);
					} else if(level == 2) {
						n1 = mg_giveRandomInteger(1000, 9999, random);
						do{
							n2 = mg_giveRandomInteger(1, n1 - 1, random);
						} while(n2 > n1);
					} else if(level == 3) {
						n1 = mg_giveRandomInteger(10000, 99999, random);
						do{
							n2 = mg_giveRandomInteger(1, n1 - 1, random);
						} while(n2 > n1);
					} else {
						n1 = mg_giveRandomInteger(100000, 999999, random);
						do{
							n2 = mg_giveRandomInteger(1, n1 - 1, random);
						} while(n2 > n1);	
					}

					/**
					 * Calculating the result
					 */
					answer = n1 - n2;

					/**
					 * Creating the HashMap
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Storing the values of first random number, second random number, and answer in the HashMap
					 */
					result.put("number1", n1);
					result.put("number2", n2);
					result.put("answer", answer);

					/**
					 * Creating mcq options
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList	
						 */
						ArrayList<Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0;
						if(level == 1) {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 998) {
								mcq_upper_limit = 998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else if(level == 2) {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 9998) {
								mcq_upper_limit = 9998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else if(level == 3) {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 99998) {
								mcq_upper_limit = 99998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else {
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 999998) {
								mcq_upper_limit = 999998;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array){
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with first random number, second random number, subtraction of the 2 random numbers(the answer), ArrayList of mcq options
					 */
					return result;    
				}

				/**
			     @name mg_get_subtraction_for_daily_life_examples_type_1()
				 @description Gets the problem set data containing subtraction of 2 numbers.
				 @param level - int - Chooses a level. Values are 1, 2 or 3.     
				 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
				 @return HashMap(question, answer, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_for_daily_life_examples_type_1(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int number1, number2, answer;
					
					/**
					 * Initializing the random generator
					 */
					Random random = new Random();

					/**
					 * Creating the HashMap 
					 */
					Map<String, Object> result = new HashMap<>();
					
					/**
					 * Generating random values for number1 and number2
					 */	
					if(level == 1) {
						number1 = mg_giveRandomInteger(3, 20, random);
						
						do{
							number2 = mg_giveRandomInteger(2, 19, random);
						} while(number2 == number1 || number2 > number1);
					} else if(level == 2) {
						number1 = mg_giveRandomInteger(10, 90, random);
						
						do{
							number2 = mg_giveRandomInteger(9, 80, random);
						} while(number2 == number1 || number2 > number1);
					} else {
						number1 = mg_giveRandomInteger(100, 900, random);
						
						do{
							number2 = mg_giveRandomInteger(99, 800, random);
						} while(number2 == number1 || number2 > number1);
					}
					
					/**
					 * Calculating the answer
					 */
					answer = number1 - number2;
					
					/**
					 * Storing the answer in the HashMap
					 */
					result.put("answer", answer);
					
					/**
					 * Creating a temporary ArrayList for storing the values of name and object
					 */
					ArrayList<String> temp = mg_getRandomNames();
					
					String temp1;
					if(temp.get(13) == "his") {
						temp1 = "him";
					} else {
						temp1 = "her";
					}
					
					/**
					 * Generating a random number for selecting a question
					 */
					int type = mg_giveRandomInteger(1, 19, random);
					
					if(type == 2) {
						result.put("question", number1 + " " + temp.get(3) + " were in the shop. " + number2 + " " + temp.get(3) + " were sold. How many " + temp.get(3) + " are left in the shop?");
					} else if(type == 3) {
						result.put("question", temp.get(0) + " had " + number1 + " " + temp.get(3) + ". " + temp.get(12) + " gave " + number2 + " to " + temp.get(1) + ". How many are left with " + temp1 + "?");
					} else if(type == 4) {
						result.put("question", temp.get(0) + " has " + number1 + " chocolates. " + temp.get(12) + " shared " + number2 + " of them with " + temp.get(13) + " friends. How many does " + temp.get(12).toLowerCase() + " have now?");
					} else if(type == 5) {
						result.put("question", temp.get(0) + " found " + number1 + " seashells on the beach. " + temp.get(12) +  " gave " + temp.get(1) + " " + number2 + " of the seashells. How many seashells does " + temp.get(12).toLowerCase() + " now have?");
					} else if(type == 6) {
						result.put("question", temp.get(0) + " has " + number1 + " violet marbles, " + temp.get(12).toLowerCase() +  " gave " + temp.get(1) + " " + number2 + " of the marbles. How many violet marbles does " + temp.get(12).toLowerCase() + " now have?");
					} else if(type == 7) {
						result.put("question", temp.get(0) + " had Rs. " + number1 + " in " + temp.get(13) +  " bank. " + temp.get(12) + " spent " + number2 + " of " + temp.get(13) + " rupees. How many rupees does " + temp.get(12).toLowerCase() + " have now?");
					} else if(type == 8) {
						result.put("question", "There were " + number1 + " " + temp.get(9) + " in the basket. " + temp.get(0) +  " ate " + number2 + " of them. How many " + temp.get(9) + " are in the basket now?");
					} else if(type == 9) {
						result.put("question", temp.get(0) + " made " + number1 + " paper boats and set them afloat in the river. " + number2 +  " boats sank. How many boats are still floating?");
					} else if(type == 10) {
						result.put("question", "Grandpa had " + number1 + " biscuits in a packet. He ate " + number2 + " of them with tea. How many biscuits are left in a packet?");
					} else if(type == 11) {
						result.put("question", "One school has " + number1 + " children in a class. " + number2 + " children went for the sports activity, how many are remained in the class?");
					} else if(type == 12) {
						result.put("question", "A vegetable seller sold " + number1 + " kgs of vegetables in 2 days. He sold " + number2 + " kgs of vegetables today. How many kgs of vegetable were sold by him yesterday?");
					} else if(type == 13) {
						result.put("question", "There were " + number1 + " books on the bookshelf. Librarian removed " + number2 + " books from there. How many books are there on the shelf now?");
					} else if(type == 14) {
						result.put("question", temp.get(0) + " has " + number1 + " cookies. " + temp.get(12) + " shared " + number2 + " of them with " + temp.get(13) + " friends. How many does " + temp.get(12).toLowerCase() + " have now?");
					} else if(type == 15) {
						result.put("question", "A classroom has " + number1 + " seats. " + number2 + " seats are occupied by students. How many seats are vacant?");
					} else if(type == 16) {
						result.put("question", "A shopkeeper sold " + number1 + " chairs in two months. In March, he sold " + number2 + " chairs. How many chairs were sold in April?");
					} else if(type == 17) {
						result.put("question", "There were " + number1 + " shirts for sale. " + temp.get(0) + " bought " + number2 + " shirts. How many shirts are there in the shop now?");
					} else if(type == 18) {
						result.put("question", temp.get(0) + " has " + number1 + " books of stories. " + temp.get(12) + " gave some books to cousin and now " + number2 + " books are with " + temp1 + ". How many books did " + temp.get(12).toLowerCase() + " give to cousin?");
					} else {
						result.put("question", temp.get(0) + " had " + number1 + " sweets. " + temp.get(12) + " ate " + number2 + ". How many sweets left?");
					}
					
					/**
					 * Creating the mcq options 
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList 
						 */ 
						ArrayList <Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in the ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {   			
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 18) {
								mcq_upper_limit = 18;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else if(level == 2) {   			
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 81) {
								mcq_upper_limit = 81;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else {   			
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 801) {
								mcq_upper_limit = 801;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with question, answer, ArrayList of mcq options
					 */ 
					return result;    
				}

				/**
			     @name mg_get_subtraction_for_daily_life_examples_type_2()
				 @description Gets the problem set data containing subtraction of 2 numbers.
				 @param level - int - Chooses a level. Values are 1, 2 or 3.     
				 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
				 @return HashMap(question, answer, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_for_daily_life_examples_type_2(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int number1, number2, answer;
					String common_name, special_name1, special_name2; 
					
					/**
					 * Initializing the random generator
					 */
					Random random = new Random();

					/**
					 * Creating the HashMap 
					 */
					Map<String, Object> result = new HashMap<>();
					
					/**
					 * Generating random values for number1 and number2
					 */	
					if(level == 1) {
						number1 = mg_giveRandomInteger(10, 99, random);
						
						do{
							number2 = mg_giveRandomInteger(9, 90, random);
						} while(number2 == number1 || number2 > number1);
					} else if(level == 2) {
						number1 = mg_giveRandomInteger(100, 999, random);
						
						do{
							number2 = mg_giveRandomInteger(99, 900, random);
						} while(number2 == number1 || number2 > number1);
					} else {
						number1 = mg_giveRandomInteger(1000, 9999, random);
						
						do{
							number2 = mg_giveRandomInteger(999, 9000, random);
						} while(number2 == number1 || number2 > number1);
					}
					
					/**
					 * Calculating the answer
					 */
					answer = number1 - number2;
					
					/**
					 * Storing the answer in the HashMap
					 */
					result.put("answer", answer);
					
					/**
					 * Creating a temporary ArrayList for storing the values of name and object
					 */
					ArrayList<String> temp = mg_getRandomNames();

					/**
					 * Creating an ArrayList for storing common names 
					 */
					ArrayList<String> common_names = new ArrayList<String>(Arrays.asList("children", "trees", "animals", "fruits", "birds"));

					/**
					 * Creating ArrayLists containing special names related to common names in the above array
					 */
					ArrayList<String> children_options = new ArrayList<String>(Arrays.asList("boys", "girls"));
					ArrayList<String> animals_options = new ArrayList<String>(Arrays.asList("deers", "horses", "lions", "tigers", "goats", "elephants", "leopards", "cheetahs", "hyenas", "bears"));
					ArrayList<String> fruits_options = new ArrayList<String>(Arrays.asList("custard apples", "apples", "pears", "grapes", "oranges", "papayas", "watermelons", "bananas", "mangoes", "chikoos"));
					ArrayList<String> birds_options = new ArrayList<String>(Arrays.asList("sparrows", "pigeons", "crows", "ducks", "peacocks", "parrots", "cuckoos", "mynahs", "hens", "ostriches"));
					ArrayList<String> trees_options = new ArrayList<String>(Arrays.asList("mango", "peepal", "orange", "jamun", "banana", "coconut", "papaya", "babul", "banyan", "almond"));

					/** 
					 * Selecting a random common name 
					 */
					common_name =  common_names.get(mg_giveRandomInteger(0, common_names.size() - 1, random));
					
					/** 
					 * Obtaining special names
					 */
					if(common_name == "children") {
						
						/**
						 * Generating 2 random numbers for selecting 2 random values
						 */
						int rand1, rand2;
						rand1 = mg_giveRandomInteger(0, children_options.size() - 1, random);
						
						do{
							rand2 = mg_giveRandomInteger(0, children_options.size() - 1, random);
						} while(rand2 == rand1);
						
						special_name1 = children_options.get(rand1);
						special_name2 = children_options.get(rand2);
					} else if (common_name == "trees") {
						
						/**
						 * Generating 2 random numbers for selecting 2 random values
						 */
						int rand1, rand2;
						rand1 = mg_giveRandomInteger(0, trees_options.size() - 1, random);
						
						do{
							rand2 = mg_giveRandomInteger(0, trees_options.size() - 1, random);
						} while(rand2 == rand1);
						
						special_name1 = trees_options.get(rand1);
						special_name2 = trees_options.get(rand2);
					} else if (common_name == "animals") {
						
						/**
						 * Generating 2 random numbers for selecting 2 random values
						 */
						int rand1, rand2;
						rand1 = mg_giveRandomInteger(0, animals_options.size() - 1, random);
						
						do{
							rand2 = mg_giveRandomInteger(0, animals_options.size() - 1, random);
						} while(rand2 == rand1);
						
						special_name1 = animals_options.get(rand1);
						special_name2 = animals_options.get(rand2);
					} else if (common_name == "fruits") {
						
						/**
						 * Generating 2 random numbers for selecting 2 random values
						 */
						int rand1, rand2;
						rand1 = mg_giveRandomInteger(0, fruits_options.size() - 1, random);
						
						do{
							rand2 = mg_giveRandomInteger(0, fruits_options.size() - 1, random);
						} while(rand2 == rand1);
						
						special_name1 = fruits_options.get(rand1);
						special_name2 = fruits_options.get(rand2);
					} else {
						
						/**
						 * Generating 2 random numbers for selecting 2 random values
						 */
						int rand1, rand2;
						rand1 = mg_giveRandomInteger(0, birds_options.size() - 1, random);
						
						do{
							rand2 = mg_giveRandomInteger(0, birds_options.size() - 1, random);
						} while(rand2 == rand1);
						
						special_name1 = birds_options.get(rand1);
						special_name2 = birds_options.get(rand2);
					}
					
					/**
					 * Generating a random number for selecting a question
					 */
					int type = mg_giveRandomInteger(1, 6, random);
					
					if(type == 2) {
						result.put("question", temp.get(0) + " bought " + temp.get(3) + " for Rs. " + number1 + " and " + temp.get(4) + " for Rs. " + number2 + ". Then how many rupees did " + temp.get(12).toLowerCase() + " spend less for buying " + temp.get(4) + "?");
					} else if(type == 3) {
						result.put("question", temp.get(0) + " bought " + temp.get(3) + " for Rs. " + number1 + " and " + temp.get(4) + " for Rs. " + number2 + ". Then how many rupees did " + temp.get(12).toLowerCase() + " spend more for buying " + temp.get(3) + "?");
					} else if(type == 4) {
						result.put("question", "There are " + number1 + " " + common_name + ". Of these " + number2 + " are " + special_name1 + ". How many " + special_name2 + " are there?");
					} else if(type == 5) {
						result.put("question", temp.get(0) + " had some " + temp.get(3) + ". " + temp.get(1) +  " gave " + number2 + " more. Now " + temp.get(0) + " has " + number1 + " " + temp.get(3) + ". How many " + temp.get(3) + " did " + temp.get(0) + " have before?");
					} else if(type == 6) {
						result.put("question", "There are " + number1 + " " + temp.get(9) + " in one box and " + number2 +  " " + temp.get(10) + " in another box. How many more " + temp.get(10) + " must be added to the box in order to have the same number of " + temp.get(10) + " as " + temp.get(9) + "?");
					} else {
						result.put("question", temp.get(0) + " made " + number1 + " " + temp.get(3) + ". " + temp.get(1) + " made " + number2 + " " + temp.get(3) + ". Then how many more " + temp.get(3) + " did " + temp.get(0) + " make than " + temp.get(1) + "?");
					}
					
					/**
					 * Creating the mcq options 
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList 
						 */ 
						ArrayList <Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in the ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Calculating the lower limit and upper limit for the remaining mcq options
						 */
						int mcq_lower_limit = 0, mcq_upper_limit = 0; 	

						if(level == 1) {   			
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 90) {
								mcq_upper_limit = 90;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else if(level == 2) {   			
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 900) {
								mcq_upper_limit = 900;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						} else {   			
							if((answer - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = answer - 5;
							}

							if((answer + 5) >= 9000) {
								mcq_upper_limit = 9000;  
							} else {
								mcq_upper_limit = answer + 5;
							}
						}

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with question, answer, ArrayList of mcq options
					 */ 
					return result;    
				}

				/**
			     @name mg_get_subtraction_for_challenging_word_problem()
				 @description Gets the problem set data containing answer for subtraction of smallest random digit number and largest random digit number.     
				 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
				 @return HashMap(question, answer, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_subtraction_for_challenging_word_problem(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int number1, answer; 
					
					/**
					 * Initializing the random generator
					 */
					Random random = new Random();

					/**
					 * Creating the HashMap 
					 */
					Map<String, Object> result = new HashMap<>();
					
					/**
					 * Generating a random value for number1
					 */	
					number1 = mg_giveRandomInteger(1, 7, random);
				
					/**
					 * Creating arrays containing smallest and largest random digit numbers
					 */
					int[] smallest_options = {1, 10, 100, 1000, 10000, 100000, 1000000};
					int[] largest_options = {9, 99, 999, 9999, 99999, 999999, 9999999};

					int temp1, temp2;
					temp1 = smallest_options[number1 - 1];
					temp2 = largest_options[number1 - 1];
					
					/**
					 * Calculating the answer
					 */
					answer = temp2 - temp1;
					
					/**
					 * Storing the answer in the HashMap
					 */
					result.put("answer", answer);
									
					/**
					 * Returning the question to the HashMap
					 */
					result.put("question", "Subtract the smallest " + number1 + " digit number from the largest " + number1 + " digit number?");
					
					/**
					 * Creating the mcq options 
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList 
						 */ 
						ArrayList <Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in the ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an int array
						 */
						int[] array = {0};

						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(answer - 5, answer + 5).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with question, answer, ArrayList of mcq options
					 */ 
					return result;    
				}

				/**
			     @name mg_get_addition_and_subtraction_for_mixed_problems()
				 @description Gets the problem set data containing answer obtained by adding and subtracting the given quantities.    
				 @param level - int - Chooses a level. Values are 1, 2 or 3. 
				 @param mcq - boolean - Multiple choice options required true / false - default is false.                        
				 @return HashMap(question, answer, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_addition_and_subtraction_for_mixed_problems(int level, boolean mcq) {

					/**
					 * Declaring the variables
					 */
					int number1, number2, number3, number4;

					/**
					 * Initializing the random generator
					 */
					Random random = new Random();

					/**
					 * Creating the HashMap 
					 */
					Map<String, Object> result = new HashMap<>();
					
					/**
					 * Generating random values for number1, number2, number3
					 */	
					if(level == 1) {
						number1 = mg_giveRandomInteger(100, 999, random);
						number2 = mg_giveRandomInteger(100, 999, random);
						number3 = mg_giveRandomInteger(100, 999, random);
					} else if(level == 2) {
						number1 = mg_giveRandomInteger(1000, 9999, random);
						number2 = mg_giveRandomInteger(1000, 9999, random);
						number3 = mg_giveRandomInteger(1000, 9999, random);
					} else {
						number1 = mg_giveRandomInteger(10000, 99999, random);
						number2 = mg_giveRandomInteger(10000, 99999, random);
						number3 = mg_giveRandomInteger(10000, 99999, random);
					}
					
					/**
					 * Calculating the value of number4
					 */
					number4 = number1 + number2 + number3;

					/**
					 * Creating a temporary ArrayList for storing the values of names and object names
					 */
					ArrayList<String> temp = mg_getRandomNames();
					
					/**
					 * Storing the answer in the HashMap
					 */
					result.put("answer", number3);

					/**
					 * Generating a random number for selecting a question
					 */
					int type = mg_giveRandomInteger(1, 5, random);
					
					if(type == 2) {
						result.put("question", temp.get(0) + " had Rs. " + number4 + ". " + temp.get(12) + " bought " + temp.get(3) + " worth Rs. " + number1 + " and " + temp.get(4) + " worth Rs. " + number2 + ". How much money did " + temp.get(12).toLowerCase() + " have left?");
					} else if(type == 3) {
						result.put("question", "The seating capacity of a theatre is " + number4 + ". If there were " + number1 + " men and " + number2 + " women for the function, how many seats remained vacant?");
					} else if(type == 4) {
						result.put("question", "In a nursery, there were " + number4 + " saplings. " + number1 + " were mango saplings and " + number2 + " were orange saplings. How many other saplings were there?");
					} else if(type == 5) {
						result.put("question", temp.get(0) + " donated Rs. " + number4 + " to a sport academy. Rs. " + number1 + " were used for equipment and Rs. " + number2 + " were used for ground maintenance. How much money still remains?");
					} else {
						result.put("question", temp.get(0) + " spent Rs. " + number1 + " for purchasing " + temp.get(3) + " and Rs. " + number2 + " on " + temp.get(4) + ". Transportation cost was extra. " + temp.get(0) + " spent a total of Rs. " + number4 + ". How much did " + temp.get(12).toLowerCase() + " spend on transportation?");
					}
							
					/**
					 * Creating the mcq options 
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList 
						 */ 
						ArrayList <Integer> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in the ArrayList
						 */
						mcq_option.add(number3);

						/**
						 * Creating an int array
						 */
						int[] array = {0};
									
						/**
						 * Generating remaining mcq options within the calculated range
						 */
						array = IntStream.rangeClosed(number3 - 5, number3 + 5).toArray();

						/**
						 * Shuffling the data
						 */
						array = mg_shuffleInt(array); 

						/**
						 * Ensuring that no 2 options are the same
						 */
						for(int u : array) {   
							if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
								mcq_option.add(u);
							}
						}

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Storing the mcq options in the HashMap
						 */
						result.put("mcq_options", mcq_option);
					}

					/**
					 * Return the HashMap with question, answer, ArrayList of mcq options
					 */ 
					return result;    
				}

				/**
				@name mg_get_ThreeDObjectsAndNets_for_identifying_nets_from_image()
				@description Gets the problem set data identifying the net for the shown image of a figure.   
				@param mcq - boolean - Multiple choice options required true / false - default is false                        
				@return HashMap (image, answer, ArrayList of mcq options)
				*/
				public static Map<String, Object> mg_get_ThreeDObjectsAndNets_for_identifying_nets_from_image(boolean mcq) {

					/** Initialize random generator */
					Random random = new Random();

					/** Initializing variable. */ 
					ArrayList<String> answer = new ArrayList<String>();
					ArrayList<String> mcq_option = new ArrayList<String>();
					ArrayList<String> answerset = new ArrayList<String>();
					ArrayList<String> optionset = new ArrayList<String>();
					ArrayList<String> cone = new ArrayList<String>(Arrays.asList("cone_net_1.png", "cone_net_2.png", "cone_net_3.png", "cone_net_4.png"));
					ArrayList<String> cube = new ArrayList<String>(Arrays.asList("cube_net_1.png", "cube_net_2.png", "cube_net_3.png", "cube_net_4.png"));
					ArrayList<String> cuboid = new ArrayList<String>(Arrays.asList("cuboid_net_1.png", "cuboid_net_2.png", "cuboid_net_3.png", "cuboid_net_4.png"));
					ArrayList<String> cylinder = new ArrayList<String>(Arrays.asList("cylinder_net_1.png", "cylinder_net_2.png", "cylinder_net_3.png", "cylinder_net_4.png", "cylinder_net_5.png", "cylinder_net_6.png"));
					ArrayList<String> hexagonal_prism = new ArrayList<String>(Arrays.asList("hexagonal_prism_net_1.png", "hexagonal_prism_net_2.png", "hexagonal_prism_net_3.png", "hexagonal_prism_net_4.png"));
					ArrayList<String> pentagonal_prism = new ArrayList<String>(Arrays.asList("pentagonal_prism_net_1.png", "pentagonal_prism_net_2.png", "pentagonal_prism_net_3.png", "pentagonal_prism_net_4.png"));
					ArrayList<String> pentagonal_pyramid = new ArrayList<String>(Arrays.asList("pentagonal_pyramid_net.png"));
					ArrayList<String> rectangular_pyramid = new ArrayList<String>(Arrays.asList("rectangular_pyramid_net.png"));
					ArrayList<String> square_based_pyramid = new ArrayList<String>(Arrays.asList("square_based_pyramid_net.png"));
					ArrayList<String> triangular_prism = new ArrayList<String>(Arrays.asList("triangular_prism_net_1.png", "triangular_prism_net_2.png"));
					ArrayList<String> triangular_pyramid = new ArrayList<String>(Arrays.asList("triangular_pyramid_net_1.png", "triangular_pyramid_net_2.png", "triangular_pyramid_net_3.png", "triangular_pyramid_net_4.png"));
					Map<String, Object> result = new HashMap<String, Object>();

					ArrayList<String> randomm = new ArrayList<String>(Arrays.asList("cone", "cube", "cuboid", "cylinder", "hexagonal_prism", "pentagonal_prism", "pentagonal_pyramid", "rectangular_pyramid", "square_based_pyramid", "triangular_prism", "triangular_pyramid"));
					String type = randomm.get(mg_giveRandomInteger( 0, randomm.size() -1, random));

					if( type.equals("cone")) {
						answerset = cone;
						optionset.add(cuboid.get(mg_giveRandomInteger( 0, cuboid.size() -1, random)));
						optionset.add(cylinder.get(mg_giveRandomInteger( 0, cylinder.size() -1, random)));
						optionset.add(hexagonal_prism.get(mg_giveRandomInteger( 0, hexagonal_prism.size() -1, random)));
					} else if ( type.equals("cube")) {
						answerset = cube;
						optionset.add(cuboid.get(mg_giveRandomInteger( 0, cuboid.size() -1, random)));
						optionset.add(hexagonal_prism.get(mg_giveRandomInteger( 0, hexagonal_prism.size() -1, random)));
						optionset.add(pentagonal_prism.get(mg_giveRandomInteger( 0, pentagonal_prism.size() -1, random)));
					} else if ( type.equals("cuboid")) {
						answerset = cuboid;
						optionset.add(cube.get(mg_giveRandomInteger( 0, cube.size() -1, random)));
						optionset.add(triangular_prism.get(mg_giveRandomInteger( 0, triangular_prism.size() -1, random)));
						optionset.add(hexagonal_prism.get(mg_giveRandomInteger( 0, hexagonal_prism.size() -1, random)));
					} else if ( type.equals("cylinder")) {
						answerset = cylinder;
						optionset.add(cuboid.get(mg_giveRandomInteger( 0, cuboid.size() -1, random)));
						optionset.add(cube.get(mg_giveRandomInteger( 0, cube.size() -1, random)));
						optionset.add(hexagonal_prism.get(mg_giveRandomInteger( 0, hexagonal_prism.size() -1, random)));
					} else if ( type.equals("hexagonal_prism")) {
						answerset = hexagonal_prism;
						optionset.add(cuboid.get(mg_giveRandomInteger( 0, cuboid.size() -1, random)));
						optionset.add(cube.get(mg_giveRandomInteger( 0, cube.size() -1, random)));
						optionset.add(pentagonal_prism.get(mg_giveRandomInteger( 0, pentagonal_prism.size() -1, random)));
					} else if ( type.equals("pentagonal_prism")) {
						answerset = pentagonal_prism;
						optionset.add(hexagonal_prism.get(mg_giveRandomInteger( 0, hexagonal_prism.size() -1, random)));
						optionset.add(cuboid.get(mg_giveRandomInteger( 0, cuboid.size() -1, random)));
						optionset.add(triangular_prism.get(mg_giveRandomInteger( 0, triangular_prism.size() -1, random)));
					} else if ( type.equals("pentagonal_pyramid")) {
						answerset = pentagonal_pyramid;
						optionset.add(rectangular_pyramid.get(mg_giveRandomInteger( 0, rectangular_pyramid.size() -1, random)));
						optionset.add(square_based_pyramid.get(mg_giveRandomInteger( 0, square_based_pyramid.size() -1, random)));
						optionset.add(triangular_pyramid.get(mg_giveRandomInteger( 0, triangular_pyramid.size() -1, random)));
					} else if ( type.equals("rectangular_pyramid")) {
						answerset = rectangular_pyramid;
						optionset.add(pentagonal_pyramid.get(mg_giveRandomInteger( 0, pentagonal_pyramid.size() -1, random)));
						optionset.add(square_based_pyramid.get(mg_giveRandomInteger( 0, square_based_pyramid.size() -1, random)));
						optionset.add(triangular_pyramid.get(mg_giveRandomInteger( 0, triangular_pyramid.size() -1, random)));
					} else if ( type.equals("square_based_pyramid")) {
						answerset = square_based_pyramid;
						optionset.add(rectangular_pyramid.get(mg_giveRandomInteger( 0, rectangular_pyramid.size() -1, random)));
						optionset.add(pentagonal_pyramid.get(mg_giveRandomInteger( 0, pentagonal_pyramid.size() -1, random)));
						optionset.add(triangular_pyramid.get(mg_giveRandomInteger( 0, triangular_pyramid.size() -1, random)));
					} else if ( type.equals("triangular_prism")) {
						answerset = triangular_prism;
						optionset.add(pentagonal_prism.get(mg_giveRandomInteger( 0, pentagonal_prism.size() -1, random)));
						optionset.add(cuboid.get(mg_giveRandomInteger( 0, cuboid.size() -1, random)));
						optionset.add(cube.get(mg_giveRandomInteger( 0, cube.size() -1, random)));
					} else {
						answerset = triangular_pyramid;
						optionset.add(rectangular_pyramid.get(mg_giveRandomInteger( 0, rectangular_pyramid.size() -1, random)));
						optionset.add(square_based_pyramid.get(mg_giveRandomInteger( 0, square_based_pyramid.size() -1, random)));
						optionset.add(pentagonal_pyramid.get(mg_giveRandomInteger( 0, pentagonal_pyramid.size() -1, random)));
					}
					
					/** Shuffle the set */
					Collections.shuffle(answerset);
					Collections.shuffle(optionset);

					int random_index = mg_giveRandomInteger( 0, answerset.size() -1, random);

					answer.add(answerset.get(random_index));
					mcq_option.add(answerset.get(random_index));

					for(String u : optionset) {
						if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
							mcq_option.add(u);
							if(u.toLowerCase().contains(type.toLowerCase())) {
								answer.add(u);
							}
						}
					}

					Collections.shuffle(mcq_option);

					result.put("answer", answer );
					result.put("image", type + ".png" );
					result.put("mcq_options", mcq_option );

					/**
					 * Return the HashMap with image, answer, ArrayList of mcq options
					 */ 
					return result;    
				}

				/**
			     @name mg_get_ThreeDObjectsAndNets_for_identifying_nets_from_figure_name()
				 @description Gets the problem set data identifying the net for the given figure name.   
				 @param mcq - boolean - Multiple choice options required true / false - default is false                        
				 @return HashMap (figure name, answer, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_ThreeDObjectsAndNets_for_identifying_nets_identifying_nets_from_figure_name(boolean mcq) {

					Map<String, Object> result = mg_get_ThreeDObjectsAndNets_for_identifying_nets_from_image(mcq);
					String temp1, temp4;
					String[] temp2, temp3;
					temp1 = result.get("image").toString();
					temp2 = temp1.split("\\.");
					temp3 = temp2[0].split("_");
					temp4 = temp3[0];

					for(int ii=1; ii<temp3.length; ii++) {
						temp4 = temp4.concat(" ").concat(temp3[ii]);
					}
					result.put("figure_name", temp4);
					result.remove("image");

					/**
					 * Return the HashMap with figure name, answer, ArrayList of mcq options
					 */ 
					return result;    
				}

				/**
			     @name mg_get_ThreeDObjectsAndNets_for_identifying_figure_from_nets()
			 	 @description Gets the problem set data identifying the figure for the image of net of the figure shown.   
				 @param mcq - boolean - Multiple choice options required true / false - default is false                        
				 @return HashMap (image, answer, ArrayList of mcq options)
				 */
				public static Map<String, Object> mg_get_ThreeDObjectsAndNets_for_identifying_figure_from_nets(boolean mcq) {

					/**
					 * Declaring the variables
					 */
					String image, answer;

					/**
					 * Initializing the random generator
					 */
					Random random = new Random();

					/**
					 * Creating the HashMap 
					 */
					Map<String, Object> result = new HashMap<>();

					/**
					 * Creating an array containing images of figures 
					 */
					String[] figures = {"cone", "cone", "cone", "cone", "cube", "cube", "cube", "cube", "cuboid", "cuboid", "cuboid", "cuboid", "cylinder", "cylinder", "cylinder", "cylinder", "cylinder", "cylinder", "hexagonal prism", "hexagonal prism", "hexagonal prism", "hexagonal prism", "pentagonal prism", "pentagonal prism", "pentagonal prism", "pentagonal prism", "pentagonal pyramid", "rectangular pyramid", "square based pyramid", "triangular prism", "triangular prism", "triangular pyramid", "triangular pyramid", "triangular pyramid", "triangular pyramid"};

					/**
					 * Creating an array containing net of the figure shown in the question
					 */
					String[] net_images = {"cone_net_1.png", "cone_net_2.png", "cone_net_3.png", "cone_net_4.png", "cube_net_1.png", "cube_net_2.png", "cube_net_3.png", "cube_net_4.png", "cuboid_net_1.png", "cuboid_net_2.png", "cuboid_net_3.png", "cuboid_net_4.png", "cylinder_net_1.png", "cylinder_net_2.png", "cylinder_net_3.png", "cylinder_net_4.png", "cylinder_net_5.png", "cylinder_net_6.png", "hexagonal_prism_net_1.png", "hexagonal_prism_net_2.png", "hexagonal_prism_net_3.png", "hexagonal_prism_net_4.png", "pentagonal_prism_net_1.png", "pentagonal_prism_net_2.png", "pentagonal_prism_net_3.png", "pentagonal_prism_net_4.png", "pentagonal_pyramid_net.png", "rectangular_pyramid_net.png", "square_based_pyramid_net.png", "triangular_prism_net_1.png", "triangular_prism_net_2.png", "triangular_pyramid_net_1.png", "triangular_pyramid_net_2.png", "triangular_pyramid_net_3.png", "triangular_pyramid_net_4.png"};

					/**
					 * Generating a random number for selecting values from the above arrays 
					 */
					int rand1 = mg_giveRandomInteger(0, figures.length - 1, random);

					/**
					 * Selecting an image of the net of figure to be shown in the question and answer 
					 */
					image = net_images[rand1];
					answer = figures[rand1];

					/**
					 * Storing the image and answer in the HashMap 
					 */
					result.put("image", image);
					result.put("answer", answer);

					/**
					 * Creating the mcq options 
					 */
					if(mcq == true) {

						/**
						 * Creating the ArrayList 
						 */ 
						ArrayList <String> mcq_option = new ArrayList<>(); 

						/**
						 * Storing the value of answer in the ArrayList
						 */
						mcq_option.add(answer);

						/**
						 * Creating an ArrayList for storing wrong mcq options
						 */
						ArrayList<String> wrong_mcq_options = new ArrayList<>(Arrays.asList("cone", "cube", "cuboid", "cylinder", "hexagonal prism", "pentagonal prism", "pentagonal pyramid", "rectangular pyramid", "square based pyramid", "triangular prism", "triangular pyramid"));

						/**
						 * Generating index positions for wrong mcq options and storing the wrong options apart from the answer in the mcq_option ArrayList 
						 */
						int rand2;
						do{
							rand2 = mg_giveRandomInteger(0, wrong_mcq_options.size() - 1, random);
							if(!mcq_option.contains(wrong_mcq_options.get(rand2))){
								mcq_option.add(wrong_mcq_options.get(rand2));
							}
						} while(mcq_option.size() < 4);

						/**
						 * Shuffling the mcq options
						 */
						Collections.shuffle(mcq_option);

						/**
						 * Returning the values of mcq options to the HashMap
						 */
						result.put("mcq_options", mcq_option);
					} 

					/**
					 * Return the HashMap with image, answer, ArrayList of mcq options
					 */ 
					return result;    
				}

					/**
				     @name get_time_for_day_before_or_after_a_random_day()
					 @description Gets the problem set data for day before or after a randomly selected day
					 @param mcq - boolean - Multiple choice options required true / false - default is false                        
					 @return HashMap (random day (x_day), variable object (after or before), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_day_before_or_after_a_random_day(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_day, variable_object, answer;  /** variables for storing the value of today, day before or after a randomly selected day, and the resultant day */  

						/**
						 * Array for storing the days of week 
						 */
						String[] days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random day
						 */
						int rand1 = mg_giveRandomInteger(1, 7, random);

						/**
						 * Storing the name of day inside a variable 
						 */
						x_day = days[rand1];

						/**
						 * Calculating the index position of answer (the required day) 
						 */
						if(mg_giveRandomInteger(0, 1, random) == 0) {				/** finding the value after the random day */
							variable_object = "after";
							answer = days[rand1 + 1];
						} else {												/** finding the value before the random day */
							variable_object = "before";
							answer = days[rand1 - 1];
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("day", x_day);
						result.put("variable", variable_object);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>(); 

							/**
							 * Adding mcq options in ArrayList 
							 */  
							for(int i=0; i<=6; i++){
								if(days[i] != x_day) {	            	 
									mcq_option.add(days[i]);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						}

						/**
						 * Return the HashMap with a random day (x_day), variable object (after or before), answer, ArrayList of mcq options
						 */
						return result;     
					} 

					/**
				    @name get_time_for_days_before_or_after_a_random_day()
				    @description Gets the problem set data containing the name of day before or after a particular number of days from the randomly selected day
				    @param level - int - Chooses a level. Values are 1, 2 or 3.
				    @param mcq - boolean - Multiple choice options required true / false - default is false                        
				    @return HashMap (random day (x_day), number of days before or after the random day (n_days), the required day (answer), ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_days_before_or_after_a_random_day(int level, boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_day, variable_object, answer;  /** variables for storing the values of a random day, whether the day should be before or after the random day, and the resultant day */ 
						int n_days = 0; /** variable to find number of days before or after a random day */ 

						/**
						 * Array for storing the days in weeks 
						 */
						String[] days = {"Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random(); 

						/**
						 * Selecting a random day
						 */
						int rand1 = mg_giveRandomInteger(10, 16, random);

						/**
						 * Storing the name of day inside a variable 
						 */
						x_day = days[rand1];

						/**
						 * Generating random number for number of days before or after a random day  
						 */
						if(level == 1) { 
							n_days = mg_giveRandomInteger(2, 3, random);
						} else if(level == 2) {
							n_days = mg_giveRandomInteger(4, 7, random);
						} else {
							n_days = mg_giveRandomInteger(8, 10, random);
						}

						int rand2; /** temporary variable to get the index of resultant day */ 

						/**
						 * Calculating the index position of required day which can be before or after the randomly selected day 
						 */
						if (mg_giveRandomInteger(0, 1, random) == 0) {			/** finding the value before the random day */
							variable_object = "before";
							rand2 = rand1 - n_days;  
						} else {											/** finding the value after the random day */
							variable_object = "after";
							rand2 = rand1 + n_days;  
						}

						/**
						 * Obtaining the resultant day
						 */
						answer = days[rand2]; 

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("number", n_days);
						result.put("variable", variable_object);
						result.put("day", x_day);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>(); 

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Adding mcq options in ArrayList 
							 */  
							for(int i=0; i<=6; i++){
								if(days[i] != x_day && days[i] != answer && mcq_option.size() < 6) {	            	 
									mcq_option.add(days[i]);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_option", mcq_option);
						}

						/**
						 * Return the HashMap with a random day (x_day), number of days before or after the random day (n_days), the required day (answer), ArrayList of mcq options
						 */
						return result;
					}  

					/**
				    @name get_time_for_today_or_tomorrow_based_on_yesterday()
				    @description Gets the problem set data containing name of day for today or tomorrow based on a randomly selected day
				    @param mcq - boolean - Multiple choice options required true / false - default is false                        
				    @return HashMap(random day (x_day), variable object (today or tomorrow), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_today_or_tomorrow_based_on_yesterday(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_day, variable_object, answer;  /** variables for storing the value of yesterday, whether day should be today or tomorrow, and the resultant day */  

						/**
						 * Array for storing the days of week 
						 */
						String[] days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random day
						 */
						int rand1 = mg_giveRandomInteger(0, 6, random);

						/**
						 * Storing the name of day inside a variable 
						 */
						x_day = days[rand1];

						/**
						 * Calculating the index position of answer (the required day) 
						 */
						if(mg_giveRandomInteger(0, 1, random) == 0) {				/** finding the value of today */
							variable_object = "today";
							answer = days[rand1 + 1];
						} else {												/** finding the value of tomorrow */
							variable_object = "tomorrow";
							answer = days[rand1 + 2];
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("day", x_day);
						result.put("variable", variable_object);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>(); 

							/**
							 * Adding mcq options in ArrayList 
							 */  
							for(int i=0; i<=6; i++){
								if(days[i] != x_day) {	            	 
									mcq_option.add(days[i]);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with random day (x_day), variable object (today or tomorrow), answer, ArrayList of mcq options
						 */ 
						return result;    
					}

					/**
					@name get_time_for_today_or_yesterday_based_on_tomorrow()
					@description Gets the problem set data containing name of day for today or yesterday based on a randomly selected day
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (random day (x_day), variable object (today or yesterday), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_today_or_yesterday_based_on_tomorrow(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_day, variable_object, answer;  /** variables for storing the value of tomorrow, whether day should be today or yesterday, and the resultant day */  

						/**
						 * Array for storing the days of week 
						 */
						String[] days = {"Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random day
						 */
						int rand1 = mg_giveRandomInteger(2, 8, random);

						/**
						 * Storing the name of day inside a variable 
						 */
						x_day = days[rand1];

						/**
						 * Calculating the index position of answer (the required day) 
						 */
						if( mg_giveRandomInteger(0, 1, random) == 0 ) {			/** finding the value of today */
							variable_object = "today";
							answer = days[rand1 - 1];
						} else {												/** finding the value of yesterday */
							variable_object = "yesterday";
							answer = days[rand1 - 2];
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("day", x_day);
						result.put("variable", variable_object);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>(); 

							/**
							 * Adding mcq options in ArrayList 
							 */  
							for(int i=0; i<=6; i++){
								if(days[i] != x_day) {	            	 
									mcq_option.add(days[i]);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of random day (x_day), variable object (today or yesterday), answer, ArrayList of mcq options
						 */ 
						return result;    
					}

					/**
				     @name get_time_for_tomorrow_or_yesterday_based_on_today()
					 @description Gets the problem set data containing name of day for tomorrow or yesterday based on a randomly selected day
					 @param mcq - boolean - Multiple choice options required true / false - default is false                        
					 @return HashMap (random day(x_day), variable object (tomorrow or yesterday), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_tomorrow_or_yesterday_based_on_today(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_day, variable_object, answer;  /** variables for storing the value of today, whether day should be tomorrow or yesterday, and the resultant day */  

						/**
						 * Array for storing the days of week 
						 */
						String[] days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random day
						 */
						int rand1 = mg_giveRandomInteger(1, 7, random);

						/**
						 * Storing the name of day inside a variable 
						 */
						x_day = days[rand1];

						/**
						 * Calculating the index position of answer (the required day) 
						 */
						if( mg_giveRandomInteger(0, 1, random) == 0 ) {		/** finding the value of tomorrow */
							variable_object = "tomorrow";
							answer = days[rand1 + 1];
						} else {											/** finding the value of yesterday */
							variable_object = "yesterday";
							answer = days[rand1 - 1];
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("day", x_day);
						result.put("variable", variable_object);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>(); 

							/**
							 * Adding mcq options in ArrayList 
							 */  
							for(int i=0; i<=6; i++){
								if(days[i] != x_day) {	            	 
									mcq_option.add(days[i]);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of random day(x_day), variable object (tomorrow or yesterday), answer, ArrayList of mcq options
						 */ 
						return result;    
					}

					/**
				    @name get_time_for_season_before_or_after_a_random_season()
					@description Gets the problem set data for a season before or after a random season
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (season, variable object (before or after the random season), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_season_before_or_after_a_random_season(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_season, variable_object, answer;  /** variables for storing the value of season, whether required season should be after or before the random season, and the resultant season */  

						/**
						 * Array for storing the seasons 
						 */
						String[] seasons = {"Autumn", "Winter", "Summer", "Monsoon", "Autumn", "Winter"};

						/**
						 * Initializing random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random season
						 */
						int rand1 = mg_giveRandomInteger(1, 4, random);

						/**
						 * Storing the name of season inside a variable 
						 */
						x_season = seasons[rand1];

						/**
						 * Calculating the index position of answer (the required season) 
						 */
						if( mg_giveRandomInteger(0, 1, random) == 0 ) {			/** season after the random season */
							variable_object = "after";
							answer = seasons[rand1 + 1];
						} else {												/** season before the random season */
							variable_object = "before";
							answer = seasons[rand1 - 1];
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("season", x_season);
						result.put("variable", variable_object);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>();

							/**
							 * Storing the options in the ArrayList
							 */
							mcq_option.add("Winter");
							mcq_option.add("Summer");
							mcq_option.add("Monsoon");
							mcq_option.add("Autumn");

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of season, variable object (before or after the random season), answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_month_before_or_after_a_random_month()
					@description Gets the problem set data for the month before or after a random month
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (month, variable object (before or after a month), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_month_before_or_after_a_random_month(boolean mcq) {

						/**
						 * Declaring the variables			      
						 */
						String x_month, variable_object, answer;  /** variables for storing the value of month, month before or after a random month, and the resultant month */  

						/**
						 * Array for storing the months 
						 */
						String[] months = {"December", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random month
						 */
						int rand1 = mg_giveRandomInteger(1, 12, random);

						/**
						 * Storing the name of month inside a variable 
						 */
						x_month = months[rand1];

						/**
						 * Calculating the index position of answer (the required month) 
						 */
						if( mg_giveRandomInteger(0, 1, random) == 0 ) {    /** month after the random month */
							variable_object = "after";
							answer = months[rand1 + 1];
						} else {										/** month before the random month */
							variable_object = "before";
							answer = months[rand1 - 1];
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("month", x_month);
						result.put("variable", variable_object);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * ArrayList for mcq options
							 */
							ArrayList<String> months_option = new ArrayList<String>(Arrays.asList("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(months_option);

							/**
							 * Adding mcq options in ArrayList 
							 */  
							for(int i=0; i<=11; i++){
								if(months_option.get(i) != x_month && months_option.get(i) != answer && mcq_option.size() < 4) {	            	 
									mcq_option.add(months_option.get(i));
								} 
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of month, variable object (before or after a month), answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_nth_month_of_a_year()
					@description Gets the problem set data for nth month of a year
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (number of the month(n), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_nth_month_of_a_year(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int n; 
						String answer;

						/**
						 * Array for storing the months in a year 
						 */
						String[] months = {"November", "December", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January", "February"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Generating a random number for selecting a random month
						 */
						int rand1 = mg_giveRandomInteger(2, 13, random);

						/**
						 * Getting the number of the month
						 */
						n = rand1 - 1;

						/**
						 * Storing the name of the month 
						 */
						answer = months[rand1]; 

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("number", n);
						result.put("answer", answer); 

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList and storing the value of required date 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Creating the wrong mcq options
							 */
							String wrong_1;
							int temp1 = rand1 - 1;			/** n1 - 1 */
							wrong_1 = months[temp1];

							String wrong_2;
							temp1 = rand1 - 2;				/** n1 - 2 */
							wrong_2 = months[temp1];

							String wrong_3;					/** n1 + 1 */
							temp1 = rand1 + 1;
							wrong_3 = months[temp1];

							String wrong_4;					/** n1 + 2 */
							temp1 = rand1 + 2;
							wrong_4 = months[temp1];

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<String> wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the wrong mcq options
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));
							mcq_option.add(wrong_answer_set.get(3));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of number of the month(n), answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_nth_day_in_a_month()
					@description Gets the problem set data for date on nth day in a month
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (day of a week(x), number of weeks(n), required date(answer), ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_nth_day_in_a_month(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_day;  /** variables for storing the value of day */  

						/**
						 * Array for storing the days of the calendar month 
						 */
						String[] days = {"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random day
						 */
						int rand1 = mg_giveRandomInteger(1, 31, random);

						/**
						 * Storing the name of day inside a variable 
						 */
						x_day = days[rand1]; 

						/**
						 * Calculating the number of weeks 
						 */
						double temp1 = (double) rand1 / 7;
						int temp2 = rand1 / 7;
						double n = temp1 - temp2;

						if(n > 0) {
							temp2 = temp2 + 1; 
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("day", x_day);
						result.put("number", temp2);
						result.put("answer", rand1);
						result.put("image", "calendar.png");

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList and storing the value of required date 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(rand1);

							/**
							 * Calculating the lower limit and upper limit for the remaining mcq options  
							 */
							int mcq_lower_limit = 0, mcq_upper_limit = 0;
							if((rand1 - 5) <= 1) {
								mcq_lower_limit = 1;  
							} else {
								mcq_lower_limit = rand1 - 5;
							}

							if((rand1 + 5) >= 31) {
								mcq_upper_limit = 31;  
							} else {
								mcq_upper_limit = rand1 + 5;
							}

							/**
							 * Creating an int array
							 */
							int[] array;

							/**
							 * Generating remaining mcq options within the calculated range  
							 */ 
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

							/**
							 * Shuffling the data 
							 */ 
							array = mg_shuffleInt(array); 

							/**
							 * Generating unique mcq options 
							 */ 
							for(int u : array){
								if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
									mcq_option.add(u);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of a day of a week(x), number of weeks(n), required date(answer), ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_x_days_in_a_month()
					@description Gets the problem set data for number of a particular day in a month
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (day of a week(x), number of weeks(answer), ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_x_days_in_a_month(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String x_days;  /** variables for storing the name of the day */  

						/**
						 * Array for storing the days of the calendar month 
						 */
						String[] days = {"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random day
						 */
						int rand1 = mg_giveRandomInteger(25, 31, random);

						/**
						 * Storing the name of day inside a variable 
						 */
						x_days = days[rand1]; 

						/**
						 * Calculating the number of weeks 
						 */
						double temp1 = (double) rand1 / 7;
						int temp2 = rand1 / 7;
						double number_of_weeks = temp1 - temp2;

						if(number_of_weeks > 0) {
							temp2 = temp2 + 1; 
						}

						/**
						 * Creates the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("day", x_days);
						result.put("answer", temp2); 
						result.put("image", "calendar.png");
						
						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList 
							 */
							mcq_option.add(temp2);

							/**
							 * Creating an int array
							 */
							int[] array;

							/**
							 * Generating remaining mcq options within the calculated range  
							 */ 
							array = IntStream.rangeClosed(1, 5).toArray();

							/**
							 * Shuffling the data 
							 */ 
							array = mg_shuffleInt(array); 

							/**
							 * Generating unique mcq options 
							 */ 
							for(int u : array){
								if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 5) {
									mcq_option.add(u);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of a day of a week(x), number of weeks(answer), ArrayList of mcq options
						 */ 
						return result;
					}

					/**
					@name get_time_from_a_clock()
					@description Gets the problem set data for time shown by the clock
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (hours(hh), minutes(mm), time, image of the clock, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_from_a_clock(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String time, hh, mm, image;  /** variables for storing the value of time, hour hand time, minutes hand time, image name*/  

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Creating an ArrayList of images
						 */
						ArrayList<String> temp = new ArrayList<String>(Arrays.asList("07_05_clock.png", "08_25_clock.png", "09_00_clock.png", "06_00_clock.png", "06_30_clock.png", "09_15_clock.png", "12_00_clock.png", "02_30_clock.png", "03_45_clock.png", "09_45_clock.png"));

						/**
						 * Generating a random number for selecting an image
						 */
						int rand1 = mg_giveRandomInteger(0, temp.size() - 1, random);

						/**
						 * Selecting an image
						 */
						image = temp.get(rand1);

						/**
						 * Obtaining the hh, mm, and time values
						 */
						String[] temp1 = image.split("_");
						hh = temp1[0];
						mm = temp1[1];
						time = hh.concat(" : ").concat(mm); 

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("hour", hh);
						result.put("minute", mm);
						result.put("time", time);
						result.put("image", image);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList and storing the value of required time 
							 */  
							ArrayList<String> mcq_option = new ArrayList<>();
							mcq_option.add(time);

							/**
							 * Creating the wrong mcq options
							 * hour_hand_time - 1 : minute_hand_time
							 */
							String wrong_1;
							int temp2 = Integer.parseInt(hh) - 1;
							if(temp2 == 0) {
								temp2 = 12;
								wrong_1 = Integer.toString(temp2).concat(" : ").concat(mm);
							} else if(temp2 < 10) {
								wrong_1 = "0".concat(Integer.toString(temp2)).concat(" : ").concat(mm);
							} else {
								wrong_1 = Integer.toString(temp2).concat(" : ").concat(mm);
							}

							/**
							 * hour_hand_time + 1 : minute_hand_time
							 */
							String wrong_2;
							temp2 = Integer.parseInt(hh) + 1;
							if(temp2 == 13) {
								wrong_2 = "01".concat(" : ").concat(mm);
							} else if(temp2 < 10) {
								wrong_2 = "0".concat(Integer.toString(temp2)).concat(" : ").concat(mm);
							} else {
								wrong_2 = Integer.toString(temp2).concat(" : ").concat(mm);
							}

							/**
							 * hour_hand_time : minute_hand_time + 5
							 */
							String wrong_3;
							temp2 = Integer.parseInt(mm) + 5;
							if(temp2 == 60) {
								wrong_3 = hh.concat(" : ").concat("00");
							} else if(temp2 > 60){
								temp2 = temp2 % 10;
								wrong_3 = hh.concat(" : ").concat("0").concat(Integer.toString(temp2));
							} else if(temp2 < 10){
								wrong_3 = hh.concat(" : ").concat("0").concat(Integer.toString(temp2));
							} else {
								wrong_3 = hh.concat(" : ").concat(Integer.toString(temp2));
							}

							/**
							 * hour_hand_time : minute_hand_time + 10
							 */
							String wrong_4;
							temp2 = Integer.parseInt(mm) + 10;
							if(temp2 == 60) {
								wrong_4 = hh.concat(" : ").concat("00");
							} else if(temp2 > 60){
								temp2 = temp2 % 10;
								wrong_4 = hh.concat(" : ").concat("0").concat(Integer.toString(temp2));
							} else {
								wrong_4 = hh.concat(" : ").concat(Integer.toString(temp2));
							}

							/**
							 * hour_hand_time : minute_hand_time - 5
							 * /
							String wrong_5;
							temp2 = Integer.parseInt(mm) - 5;
							if(temp2 == 0) {
								wrong_5 = hh.concat(" : ").concat("00");
							} else if(temp2 < 0){
								wrong_5 = hh.concat(" : ").concat("0").concat(Integer.toString(temp2));
							} else if(temp2 < 10){
								wrong_5 = hh.concat(" : ").concat("0").concat(Integer.toString(temp2));
							} else {
								wrong_5 = hh.concat(" : ").concat(Integer.toString(temp2));
							}

							/**
							 * hour_hand_time : minute_hand_time - 10
							 * /
							String wrong_6;
							int temp3;
							temp2 = Integer.parseInt(mm) - 10;
							if(temp2 == 0) {
								wrong_6 = hh.concat(" : ").concat("00");
							} else if(temp2 < 0){
								temp2 = (60 + Integer.parseInt(mm)) - 10;
								temp3 = Integer.parseInt(hh) - 1;  
								wrong_6 = Integer.toString(temp3).concat(" : ").concat(Integer.toString(temp2));
							} else if(temp2 < 10){
								wrong_6 = hh.concat(" : ").concat("0").concat(Integer.toString(temp2));
							} else {
								wrong_6 = hh.concat(" : ").concat(Integer.toString(temp2));
							}

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<String> wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the wrong mcq options
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of hours(hh), minutes(mm), time, image of the clock, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_days_between_two_random_dates_in_a_month()
					@description Gets the problem set data for number of days between two random dates in a month
					@param level - int - Chooses a level. Values are 1 or 2.
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (first random day of a month, second random day of a month, name of month, answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_days_between_two_random_dates_in_a_month(int level, boolean mcq) {

						/**
						 * Declaring the variables
						 */
						String month1, month2;  /** variables for storing the value of months */  
						int n1 = 0, n2 = 0, days = 0; /** variables for storing the value of first random day, second random day, and the answer */

						/**
						 * Array for storing the months in a year 
						 */
						String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"};

						/**
						 * Array for storing the number of days in a month 
						 */
						int[] number_of_days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31};

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Selecting a random month
						 */
						int rand1, rand2, rand3;

						/**
						 * Generating a random number for obtaining the number of days in the selected month
						 */
						rand1 = mg_giveRandomInteger(0, 11, random);

						/**
						 * Selecting the number of days
						 */
						rand2 = number_of_days[rand1];

						/**
						 * Selecting the month
						 */
						month1 = months[rand1];

						/**
						 * Selecting the month after the randomly selected month
						 */
						rand3 = number_of_days[rand1 + 1];

						/**
						 *  Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();


						if(level == 1) {

							/**
							 * Generating random numbers for the dates in the months
							 */
							n1 = mg_giveRandomInteger(1, rand2 - 1, random);
							n2 = mg_giveRandomInteger(n1 + 1, rand2, random);

							/**
							 * Storing the names of the months in the HashMap
							 */
							result.put("month1", month1);
							result.put("month2", month1);

							/**
							 * Calculating the number of days between the two random dates
							 */
							days = n2 - n1;

						} else if(level == 2) {

							/**
							 * Generating random numbers for the dates in the months
							 */
							n1 = mg_giveRandomInteger(1, rand2, random);
							n2 = mg_giveRandomInteger(1, rand3, random);

							/**
							 * Selecting the month after the previously selected month
							 */
							month2 = months[rand1 + 1];

							/**
							 * Storing the values of months in the HashMap
							 */
							result.put("month1", month1);
							result.put("month2", month2);

							/**
							 * Calculating the number of days between the two random dates
							 */
							days = n2 + (rand2 - n1);
						}    

						/**
						 * Storing the values of n1, n2, and days in the HashMap 
						 */
						result.put("day1", n1);
						result.put("day2", n2);	    
						result.put("answer", days);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the answer in the ArrayList
							 */
							mcq_option.add(days);

							/**
							 * Creating an int array
							 */
							int[] array;

							/**
							 * Calculating the lower limit and upper limit for the remaining mcq options  
							 */
							int mcq_lower_limit = 0, mcq_upper_limit = 0;

							if(level == 1) {

								if((days - 5) <= 1) {
									mcq_lower_limit = 1;  
								} else {
									mcq_lower_limit = days - 5;
								}

								if((days + 5) >= rand2 - 1) {
									mcq_upper_limit = rand2 - 1;  
								} else {
									mcq_upper_limit = days + 5;
								}
							} else  if(level == 2) {

								if((days - 5) <= 1) {
									mcq_lower_limit = 1;  
								} else {
									mcq_lower_limit = days - 5;
								}

								if((days + 5) >= 61) {
									mcq_upper_limit = 61;  
								} else {
									mcq_upper_limit = days + 5;
								}
							}

							/**
							 * Generating remaining mcq options within the calculated range  
							 */ 
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

							/**
							 * Shuffling the data 
							 */ 
							array = mg_shuffleInt(array); 

							/**
							 * Generating unique mcq options 
							 */ 
							for(int u : array){
								if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
									mcq_option.add(u);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of first random day of a month, second random day of a month, name of month, answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_years_between_the_two_random_years()
					@description Gets the problem set data for number of years elapsed between two randomly chosen years
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (first random year(year1), second random year(year2), answer(n1), ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_years_between_the_two_random_years(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int year1, year2, n1; /** variables for storing the values of first year, second year, answer */

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Calculating the number of years elapsed between the two random years
						 */
						year1 = mg_giveRandomInteger(1970, 2015, random);
						year2 = mg_giveRandomInteger(year1, 2040, random);

						/**
						 * Calculating the answer
						 */
						n1 = year2 - year1;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values of 2 random years and number of years elapsed between the 2 years in the HashMap 
						 */
						result.put("year1", year1);
						result.put("year2", year2);
						result.put("answer", n1);

						/**
						 *  creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the HashMap 
							 */
							mcq_option.add(n1);

							/**
							 * Creating an int array
							 */
							int[] array;

							/**
							 * Calculating the lower limit and upper limit for the remaining mcq options  
							 */
							int mcq_lower_limit = 0, mcq_upper_limit = 0;
							if((n1 - 5) <= 0) {
								mcq_lower_limit = 0;  
							} else {
								mcq_lower_limit = n1 - 5;
							}

							if((n1 + 5) >= 70) {
								mcq_upper_limit = 70;  
							} else {
								mcq_upper_limit = n1 + 5;
							}

							/**
							 * Generating remaining mcq options within the calculated range  
							 */ 
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

							/**
							 * Shuffling the data 
							 */ 
							array = mg_shuffleInt(array); 

							/**
							 * Generating unique mcq options 
							 */ 
							for(int u : array){
								if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
									mcq_option.add(u);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of first random year(year1), second random year(year2), answer(n1), ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_year_from_a_random_number_and_random_year()
					@description Gets the problem set data for year from a number and a random year
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (random year(year1), random number of years ago(n1), answer(year2), ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_year_from_a_random_number_and_random_year(boolean mcq) {

						Map<String, Object> result = mg_get_time_for_number_of_years_between_the_two_random_years(false);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList and storing the value of required year 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();
							int answer = (int) result.get("year2");
							mcq_option.add(answer);

							/**
							 * Creating an int array
							 */
							int[] array;

							/**
							 * Calculating the lower limit and upper limit for the remaining mcq options  
							 */
							int mcq_lower_limit, mcq_upper_limit;
							if((answer - 10) <= 1970) {
								mcq_lower_limit = 1970;  
							} else {
								mcq_lower_limit = answer - 10;
							}

							if((answer + 10) >= 2035) {
								mcq_upper_limit = 2035;  
							} else {
								mcq_upper_limit = answer + 10;
							}

							/**
							 * Generating remaining mcq options within the calculated range  
							 */ 
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

							/**
							 * Shuffling the data 
							 */ 
							array = mg_shuffleInt(array); 

							/**
							 * Generating unique mcq options 
							 */ 
							for(int u : array){
								if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
									mcq_option.add(u);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of random year(year1), random number of years ago(n1), answer(year2), ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_year_from_two_random_numbers_and_a_random_year()
					@description Gets the problem set data for year that is obtained after adding a number to a random year
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (random year(year1), random number of years ago(n1), random number of years after the random year(n2), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_year_from_two_random_numbers_and_a_random_year(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int year1, n1, n2, answer;

						/**
						 * Initialize random generator
						 */
						Random random = new Random();

						/**
						 * Generating random numbers for a random year, number of years ago from the random year, number of years after the random year 
						 */
						year1 = mg_giveRandomInteger(1970, 2015, random); /** random year */
						n1 = mg_giveRandomInteger(1, 20, random); /** number of years ago */
						n2 = mg_giveRandomInteger(1, 20, random); /** number of years after */

						/**
						 * Calculating the required year
						 */
						answer = year1 + n1 + n2;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("year1", year1);
						result.put("n1", n1);
						result.put("n2", n2);
						result.put("answer", answer);

						/**
						 *  creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * creating the ArrayList and storing the value of required year 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();
							mcq_option.add(answer);

							/**
							 * Creating an int array
							 */
							int[] array;

							/**
							 * Calculating the lower limit and upper limit for the remaining mcq options  
							 */
							int mcq_lower_limit, mcq_upper_limit;
							if((answer - 10) <= 1970) {
								mcq_lower_limit = 1970;  
							} else {
								mcq_lower_limit = answer - 10;
							}

							if((answer + 10) >= 2055) {
								mcq_upper_limit = 2055;  
							} else {
								mcq_upper_limit = answer + 10;
							}

							/**
							 * Generating remaining mcq options within the calculated range  
							 */ 
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

							/**
							 * Shuffling the data 
							 */ 
							array = mg_shuffleInt(array); 

							/**
							 * Generating unique mcq options 
							 */ 
							for(int u : array){
								if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
									mcq_option.add(u);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq", mcq_option);
						} 

						/**
						 * Return the HashMap with values of random year(year1), random number of years ago(n1), random number of years after the current year(n2), answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				 	@name get_time_for_age_from_two_random_years()
					@description Gets the problem set data for age from two random years
					@param level - int - Chooses a level. Values are 1 or 2.
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (name, birth year, pronoun, random year, age, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_age_from_two_random_years(int level, boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int birth_year = 0, random_year;
						String birth_month, random_month;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Array of names 
						 */
						String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Aditi", "Priya", "Neha", "Nisha", "Rita"};

						/**
						 * Generating a random number for selecting a random name 
						 */
						int random_index = mg_giveRandomInteger( 0, name_array.length - 1, random);

						/**
						 * Selecting a name
						 */
						String name = name_array[random_index];

						/**
						 * Generating random number for birth year
						 */
						if(level == 1) {
							birth_year = mg_giveRandomInteger(2000, Calendar.getInstance().get(Calendar.YEAR) - 2, random);
						} else if(level == 2) {  	
							birth_year = mg_giveRandomInteger(1990, Calendar.getInstance().get(Calendar.YEAR) - 12, random);
						}

						/**
						 * Generating random number for selecting the birth month
						 */
						int rand1 = mg_giveRandomInteger(1, 12, random);

						/**
						 * Array for storing the months in a year 
						 */
						String[] months = {"December", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

						/**
						 * Selecting the value of month of birth
						 */
						birth_month = months[rand1]; /** variable for storing month name */

						/**
						 * Array for storing the number of days in a year 
						 */
						int[] days = {31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

						/**
						 * Storing the values of number of days in the selected month
						 */
						int temp1 = days[rand1];

						/**
						 * Generating a number for obtaining the value of birth day 
						 */
						int birth_day = mg_giveRandomInteger(1, temp1, random); 

						/**
						 * Generating numbers for random year and month 
						 */
						if(level == 1) {
							random_year = mg_giveRandomInteger(birth_year + 2, Calendar.getInstance().get(Calendar.YEAR), random);
						} else {
							random_year = mg_giveRandomInteger(birth_year + 2, birth_year + 20, random);
						}
						int rand2 = mg_giveRandomInteger(1, 12, random);

						/**
						 * Storing the month name
						 */
						random_month = months[rand2]; 

						/**
						 * Storing the number of days in the selected month 
						 */
						int temp2 = days[rand2]; 

						/**
						 * Generating a number for obtaining the value of a random day 
						 */
						int random_day = mg_giveRandomInteger(1, temp2, random);  

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values of name and birthdate in the HashMap 
						 */
						result.put("name", name);
						result.put("date1", Integer.toString(birth_day).concat(" ").concat(birth_month).concat(" ").concat(Integer.toString(birth_year)));

						/**
						 * Storing the value of pronoun in the HashMap 
						 */
						if(random_index < 5) {
							result.put("pronoun", "he");
						} else {
							result.put("pronoun", "she");
						}

						/**
						 * Storing the value of random date
						 */
						result.put("date2", Integer.toString(random_day).concat(" ").concat(random_month).concat(" ").concat(Integer.toString(random_year)));

						/**
						 * ArrayList returning the age
						 */
						ArrayList<Integer> month_year = mg_getAge(birth_year, rand1, birth_day, random_year, rand2, random_day);

						/**
						 * Storing the value of answer in the HashMap
						 */
						result.put("answer", month_year.get(0));

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList and storing the value of required age 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();
							mcq_option.add(month_year.get(0));

							/**
							 * Creating an int array
							 */
							int[] array;

							/**
							 * Calculating the lower limit and upper limit for remaining mcq options  
							 */
							int mcq_lower_limit, mcq_upper_limit; 		
							if(level == 1) {
								if((month_year.get(0) - 3) <= 0) {
									mcq_lower_limit = 2;  
								} else {
									mcq_lower_limit = month_year.get(0) - 3;
								}

								if((month_year.get(0) + 3) >= 15) {
									mcq_upper_limit = 15;  
								} else {
									mcq_upper_limit = month_year.get(0) + 3;
								}

							} else {

								if((month_year.get(0) - 3) <= 0) {
									mcq_lower_limit = 0;  
								} else {
									mcq_lower_limit = month_year.get(0) - 3;
								}

								if((month_year.get(0) + 3) >= 20) {
									mcq_upper_limit = 20;  
								} else {
									mcq_upper_limit = month_year.get(0) + 3;
								}
							}

							/**
							 * Generating remaining mcq options within the calculated range  
							 */ 
							array = IntStream.rangeClosed(mcq_lower_limit, mcq_upper_limit).toArray();

							/**
							 * Shuffling the data 
							 */ 
							array = mg_shuffleInt(array); 

							/**
							 * Generating unique mcq options 
							 */ 
							for(int u : array){
								if(!mg_containsInArray(mcq_option,u) && mcq_option.size() < 4) {
									mcq_option.add(u);
								}
							}

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of name, birth year, pronoun, random year, age, ArrayList of mcq options
						 */ 
						return result;
					}	
					
					/**
				    @name get_time_for_time_taken_to_finish_task()
					@description Gets the time required to complete a task between two random times
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (name, task name, start time, end time, answer hour, answer minutes, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_time_taken_to_finish_task(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int start_hour, start_minutes, end_hour, end_minutes, ans_hour, ans_minutes;
						String answer;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Array of names 
						 */
						String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Aditi", "Priya", "Neha", "Nisha", "Rita"};

						/**
						 * Selecting a name
						 */
						String name = name_array[mg_giveRandomInteger( 0, name_array.length - 1, random)];

						/**
						 * Array of tasks 
						 */
						String[] tasks_array = {"reading", "playing cricket", "playing football", "watching T.V."};

						/**
						 * Selecting a task
						 */
						String task = tasks_array[mg_giveRandomInteger( 0, tasks_array.length - 1, random)];

						/**
						 * Generating a random numbers for starting hour and its minutes
						 */ 
						start_hour = mg_giveRandomInteger(0, 23, random);
						start_minutes = mg_giveRandomInteger(0, 59, random);

						/**
						 * Generating a random numbers for amount of time taken to complete the task
						 */
						ans_hour = mg_giveRandomInteger(1, 10, random);
						ans_minutes = mg_giveRandomInteger(0, 59, random);

						/**
						 * Calculating the end time for the task based on above obtained values
						 */
						end_hour = start_hour + ans_hour;
						end_minutes = start_minutes + ans_minutes;    
						end_hour = end_hour + (end_minutes / 60);
						end_minutes = end_minutes % 60;
						end_hour = end_hour % 24;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("name", name);
						result.put("task", task);
						result.put("time1", mg_convertTimeFormat(start_hour, start_minutes));
						result.put("time2", mg_convertTimeFormat(end_hour, end_minutes));
						result.put("answer_hour", ans_hour);
						result.put("answer_minutes", ans_minutes);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList and storing the value of required year 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<String>();
							answer = Integer.toString(ans_hour).concat(" hours and ").concat(Integer.toString(ans_minutes)).concat(" minutes");
							mcq_option.add(answer);

							/**
							 * Creating wrong mcq options
							 * (ans_hour - 1) hours and (ans_minute) minutes
							 */
							String wrong_1;
							int temp1 = ans_hour - 1;
							wrong_1 = Integer.toString(temp1).concat(" hours and ").concat(Integer.toString(ans_minutes)).concat(" minutes");

							/**
							 * (ans_hour + 1) hours and (ans_minute) minutes
							 */
							String wrong_2;
							temp1 = ans_hour + 1;
							wrong_2 = Integer.toString(temp1).concat(" hours and ").concat(Integer.toString(ans_minutes)).concat(" minutes");

							/**
							 * (ans_hour) hours and (ans_minute + 5) minutes
							 */
							String wrong_3;
							temp1 = ans_minutes + 5;
							if(temp1 > 59){
								wrong_3 = Integer.toString(ans_hour + 1).concat(" hours and ").concat(Integer.toString(temp1 - 60)).concat(" minutes");
							} else {
								wrong_3 = Integer.toString(ans_hour).concat(" hours and ").concat(Integer.toString(temp1)).concat(" minutes");
							}

							/**
							 * (ans_hour) hours and (ans_minute + 10) minutes
							 */
							String wrong_4;
							temp1 = ans_minutes + 10;
							if(temp1 > 59){
								wrong_4 = Integer.toString(ans_hour + 1).concat(" hours and ").concat(Integer.toString(temp1 - 60)).concat(" minutes");
							} else {
								wrong_4 = Integer.toString(ans_hour).concat(" hours and ").concat(Integer.toString(temp1)).concat(" minutes");
							}

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<String> wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the wrong options in the ArrayList 
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);

						}

						/**
						 * Return the HashMap with values of name, task name, start time, end time, answer hour, answer minutes, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_end_time_of_task()
					@description Gets the time required to complete a task between two random times
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (name, task name, start time, hours taken to complete the task, minutes taken to complete the task, answer time, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_end_time_of_task(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int start_hour, start_minutes, ans_hour, ans_minutes, amount_hour, amount_minutes;
						String answer;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Array of names 
						 */
						String[] name_array = {"Ram", "Shyam", "Raj", "Rahul", "Vikram", "Aditi", "Priya", "Neha", "Nisha", "Rita"};

						/**
						 * Selecting a name
						 */
						String name = name_array[mg_giveRandomInteger( 0, name_array.length - 1, random)];

						/**
						 * Array of tasks 
						 */
						String[] tasks_array = {"reading", "playing cricket", "playing football", "watching T.V."};

						/**
						 * Selecting a task
						 */
						String task = tasks_array[mg_giveRandomInteger( 0, tasks_array.length - 1, random)];

						/**
						 * Generating a random numbers for starting hour and its minutes
						 */ 
						start_hour = mg_giveRandomInteger(0, 23, random);
						start_minutes = mg_giveRandomInteger(0, 59, random);

						/**
						 * Generating a random numbers for amount of time taken to complete the task
						 */
						amount_hour = mg_giveRandomInteger(1, 10, random);
						amount_minutes = mg_giveRandomInteger(0, 59, random);

						/**
						 * Calculating the end time for the task based on above obtained values
						 */
						ans_hour = start_hour + amount_hour;
						ans_minutes = start_minutes + amount_minutes;    
						ans_hour = ans_hour + (ans_minutes / 60);
						ans_minutes = ans_minutes % 60;
						ans_hour = ans_hour % 24;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("name", name);
						result.put("task", task);
						result.put("time1", mg_convertTimeFormat(start_hour, start_minutes));
						result.put("answer", mg_convertTimeFormat(ans_hour, ans_minutes));
						result.put("amount_hour", amount_hour);
						result.put("amount_minutes", amount_minutes);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList and storing the value of required year 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<String>();
							answer = mg_convertTimeFormat(ans_hour, ans_minutes);
							mcq_option.add(answer);

							/**
							 * Creating wrong mcq options
							 * (ans_hour - 1) hours and (ans_minute) minutes
							 */
							String wrong_1;
							int temp1 = ans_hour - 1;
							wrong_1 = mg_convertTimeFormat(temp1, ans_minutes);

							/**
							 * (ans_hour + 1) hours and (ans_minute) minutes
							 */
							String wrong_2;
							temp1 = ans_hour + 1;
							wrong_2 = mg_convertTimeFormat(temp1, ans_minutes);

							/**
							 * (ans_hour) hours and (ans_minute + 5) minutes
							 */
							String wrong_3;
							temp1 = ans_minutes + 5;
							if(temp1 > 59){
								wrong_3 = mg_convertTimeFormat(ans_hour + 1, temp1 - 60);
							} else {
								wrong_3 = mg_convertTimeFormat(ans_hour, temp1);
							}

							/**
							 * (ans_hour) hours and (ans_minute + 10) minutes
							 */
							String wrong_4;
							temp1 = ans_minutes + 10;
							if(temp1 > 59){
								wrong_4 = mg_convertTimeFormat(ans_hour + 1, temp1 - 60);
							} else {
								wrong_4 = mg_convertTimeFormat(ans_hour, temp1);
							}

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<String> wrong_answer_set = new ArrayList<String>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the wrong options in the ArrayList 
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);

						}

						/**
						 * Return the HashMap with values of name, task name, start time, end time, answer hour, answer minutes, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_appropriate_time_amounts_for_tasks()
					@description Gets the problem set data for appropriate time amounts for a particular task  
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (name, birth year, pronoun, random year, age, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_appropriate_time_amounts_for_tasks(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int time_taken;
						String name, after_time;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Array of tasks 
						 */
						String[] task_array = {"cook rice", "take bath", "read books", "cook dal", "cook biryani", "cook pav bhaji", "draw a painting", "go hiking"};

						/**
						 * Generating a random number for selecting a random task 
						 */
						int random_index = mg_giveRandomInteger( 0, task_array.length - 1, random);

						/**
						 * Selecting a task
						 */
						name = task_array[random_index];

						/**
						 * Array of times taken to complete those tasks 
						 */
						int[] task_time = {20, 20, 2, 15, 30, 3, 3, 2};

						/**
						 * Obtaining the time taken to complete a task
						 */
						time_taken = task_time[random_index];

						/**
						 * Array for values that are attached after a random time 
						 */
						String[] post_time = {"minutes", "minutes", "weeks", "minutes", "minutes", "hours", "days", "days"};

						/**
						 * Selecting the value
						 */
						after_time = post_time[random_index];

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("task", name);
						result.put("answer", Integer.toString(time_taken).concat(" ").concat(after_time));

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Array containing values of all possibles options
							 */
							String[] all_possibility = {"minutes", "hours", "weeks", "days"};

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>();

							/**
							 * Storing the values of options in the ArrayList
							 */
							mcq_option.add(Integer.toString(time_taken).concat(" ").concat(all_possibility[0]));
							mcq_option.add(Integer.toString(time_taken).concat(" ").concat(all_possibility[1]));
							mcq_option.add(Integer.toString(time_taken).concat(" ").concat(all_possibility[2]));
							mcq_option.add(Integer.toString(time_taken).concat(" ").concat(all_possibility[3]));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of task, answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_leap_year()
					@description checks whether the randomly selected year is a leap year or not  
					@param mcq - boolean - Multiple choice options required true / false - default is false                        
					@return HashMap (random year, answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_leap_year(boolean mcq) {

						/**
						 * Declaring the variable
						 */
						int year;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Generating a random number for selecting a random year 
						 */
						year = mg_giveRandomInteger(1000, 2500, random);

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("year", year);

						/**
						 * Checking whether a random year is a leap year or not
						 */
						if((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) {
							result.put("answer", "Yes");
						} else {
							result.put("answer", "No");
						}

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>();

							/**
							 * Storing the values of options in the ArrayList
							 */
							mcq_option.add("Yes");
							mcq_option.add("No");

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of random year, answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_days_in_a_year()
					@description Gets the problem set data for number of days in non-leap or leap year                          
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (year, answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_days_in_a_year(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int n1, answer;
						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Generating a random number for non-leap or leap years 
						 */
						int rand1 = mg_giveRandomInteger( 0, 1, random);

						/**
						 * Array for storing values 
						 */
						String[] year_array = {"non-leap years", "leap years"};

						/**
						 * Selecting a value
						 */
						String year = year_array[rand1];

						/**
						 * Generating a random number for the number of years
						 */
						n1 = mg_giveRandomInteger( 1, 5, random);

						/**
						 * Creating an int array for the number of days
						 */
						int[] days_array;

						/**
						 * number of days
						 */
						days_array = new int[]{n1 * 365, n1 * 366};

						/**
						 * Obtaining the answer
						 */
						answer = days_array[rand1];

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("year", year);
						result.put("number", n1);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Creating the wrong mcq options
							 */
							int wrong_1;
							wrong_1 = answer + 1;

							int wrong_2;
							wrong_2 = answer + 2;

							int wrong_3;
							wrong_3 = answer - 1;

							int wrong_4;
							wrong_4 = answer - 2;

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<Integer> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the wrong mcq options
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of year, number of years, answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_days_in_a_week()
					@description Gets the problem set data for number of days in a week                          
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (year, answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_days_in_a_week(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int n1, answer;

						/**
						 * Initializing random generator
						 */
						Random random = new Random();	   

						/**
						 * Generating a random number for the number of weeks
						 */
						n1 = mg_giveRandomInteger(2, 10, random);

						/**
						 * Calculating number of days in a particular number of weeks 
						 */
						answer = n1 * 7;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("number", n1);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Creating the wrong mcq options
							 */
							int wrong_1;
							wrong_1 = answer + 1;

							int wrong_2;
							wrong_2 = answer + 2;

							int wrong_3;
							wrong_3 = answer - 1;

							int wrong_4;
							wrong_4 = answer - 2;

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<Integer> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the wrong options
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of number of weeks, answer
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_days_in_a_particular_month()
					@description Gets the problem set data for number of days in a particular month
					@param mcq - boolean - Multiple choice options required true / false - default is false                          
					@return HashMap (month, answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_days_in_a_particular_month(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int answer;
						String month;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();	 

						int rand1 = mg_giveRandomInteger(1, 11, random); /** number of months is 11 and not 12, since February has not been considered to avoid confusion of leap year */  

						/**
						 * Array for storing the months in a year 
						 */
						String[] months = {"December", "January", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

						month = months[rand1]; /** variable for storing month name */

						/**
						 * Array for storing the number of days in a year 
						 */
						int[] days = {31, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

						/**
						 * Obtaining the answer 
						 */
						answer = days[rand1];

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("month", month);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Creating the wrong mcq options
							 */
							int wrong_1;
							wrong_1 = answer + 1;

							int wrong_2;
							wrong_2 = answer + 2;

							int wrong_3;
							wrong_3 = answer - 1;

							int wrong_4;
							wrong_4 = answer - 2;

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<Integer> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the ArrayList
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of number of weeks, answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_days_in_a_particular_month_of_a_random_year()
					@description Gets the problem set data for number of days in a particular month of a particular year                          
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (month, answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_days_in_a_particular_month_of_a_random_year(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int random_year, answer;
						String month;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();	 

						/**
						 * Generating a random number for selecting a random year 
						 */
						random_year = mg_giveRandomInteger(2000,  Calendar.getInstance().get(Calendar.YEAR), random);

						int rand1 = mg_giveRandomInteger(1, 12, random); /** variable for generating the random index position */ 

						/**
						 * Array for storing the months in a year 
						 */
						String[] months = {"December", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

						month = months[rand1]; /** variable for storing month name */

						/**
						 * Checking whether the random year is a leap year or not
						 */
						if((random_year % 400 == 0) || ((random_year % 4 == 0) && (random_year % 100 != 0))) {

							/**
							 * Array for storing the number of days in a year 
							 */
							int[] days_array = {31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};			
							answer = days_array[rand1];
						} else {

							/**
							 * Array for storing the number of days in a year 
							 */
							int[] days_array = {31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
							answer = days_array[rand1];
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("month", month);
						result.put("year", random_year);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Creating the wrong mcq options
							 */
							int wrong_1;
							wrong_1 = answer + 1;

							int wrong_2;
							wrong_2 = answer + 2;

							int wrong_3;
							wrong_3 = answer - 1;

							int wrong_4;
							wrong_4 = answer - 2;

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<Integer> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the ArrayList
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of name of the month, year, answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_hours_in_particular_number_of_days()
					@description Gets the problem set data for number of hours in a particular number of days                          
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (number of days(n1), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_hours_in_particular_number_of_days(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int n1, answer;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();	 

						/**
						 * Generating a random number for number of days 
						 */
						n1 = mg_giveRandomInteger(1,  7, random);

						/**
						 * Calculating the answer
						 */
						answer = n1 * 24;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("number", n1);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Creating the wrong mcq options
							 */
							int wrong_1;
							wrong_1 = answer + 1;

							int wrong_2;
							wrong_2 = answer + 2;

							int wrong_3;
							wrong_3 = answer - 1;

							int wrong_4;
							wrong_4 = answer - 2;

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<Integer> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the ArrayList
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of number of days, answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_minutes_in_particular_number_of_hours()
					@description Gets the problem set data for number of minutes in a particular number of hours                          
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (number of hours(n1), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_minutes_in_particular_number_of_hours(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int n1, answer;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();	 

						/**
						 * Generating a random number for number of hours 
						 */
						n1 = mg_giveRandomInteger(1, 10, random);

						/**
						 * Calculating the answer
						 */
						answer = n1 * 60;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("number", n1);
						result.put("answer", answer);

						/**
						 * Creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<Integer> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(answer);

							/**
							 * Creating the wrong mcq options
							 */
							int wrong_1;
							wrong_1 = answer + 1;

							int wrong_2;
							wrong_2 = answer + 2;

							int wrong_3;
							wrong_3 = answer - 1;

							int wrong_4;
							wrong_4 = answer - 2;

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<Integer> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the ArrayList
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of number of hours(n1), answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_number_of_seconds_in_particular_number_of_minutes()
					@description Gets the problem set data for number of seconds in a particular number of minutes                          
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (number of minutes(n1), answer, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_number_of_seconds_in_particular_number_of_minutes(boolean mcq) {

						Map<String, Object> result = mg_get_time_for_number_of_minutes_in_particular_number_of_hours(mcq);

						/**
						 * Return the HashMap with values of number of minutes(n1), answer, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_converting_12_hour_format_to_24_hour_format()
					@description Gets the data in 24 hour format for a particular 12 hour format time                           
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (12 hour time, 24 hour time, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_converting_12_hour_format_to_24_hour_format(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int hh, mm;

						/**
						 * Initialize random generator
						 */
						Random random = new Random();	 

						/**
						 * Generating a random number for required hours and minutes (Reverse engineering).
						 */
						hh = mg_giveRandomInteger(0, 23, random);		
						mm = mg_giveRandomInteger(0, 59, random);

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("time", mg_convertTimeFormat(hh, mm));
						result.put("answer", mg_get24HourTimeFormat(hh, mm));

						/**
						 *  creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(mg_get24HourTimeFormat(hh, mm));

							/**
							 * Creating the wrong mcq options
							 */
							String wrong_1;
							wrong_1 = mg_get24HourTimeFormat(hh + 1, mm);

							String wrong_2;
							wrong_2 = mg_get24HourTimeFormat(hh + 2, mm);

							String wrong_3;
							wrong_3 = mg_get24HourTimeFormat(hh - 1, mm);
							if(hh - 1 <= 0) {
								wrong_3 = mg_get24HourTimeFormat(hh + 3, mm);
							}

							String wrong_4;	    	
							wrong_4 = mg_get24HourTimeFormat(hh - 2, mm);
							if(hh - 2 <= 0) {
								wrong_4 = mg_get24HourTimeFormat(hh + 4, mm);
							}

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<String> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the ArrayList
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of 12 hour time, 24 hour time, ArrayList of mcq options
						 */ 
						return result;
					}

					/**
				    @name get_time_for_converting_24_hour_format_to_12_hour_format()
					@description Gets the data in 12 hour format for a particular 24 hour format time                           
					@param mcq - boolean - Multiple choice options required true / false - default is false
					@return HashMap (12 hour time, 24 hour time, ArrayList of mcq options)
					 */
					public static Map<String, Object> mg_get_time_for_converting_24_hour_format_to_12_hour_format(boolean mcq) {

						/**
						 * Declaring the variables
						 */
						int hh, mm;

						/**
						 * Initialize random generator
						 */
						Random random = new Random();	 

						/**
						 * Generating a random number for required hours and minutes (Reverse engineering).
						 */
						hh = mg_giveRandomInteger(0, 23, random);		
						mm = mg_giveRandomInteger(0, 59, random);

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("answer", mg_convertTimeFormat(hh, mm));
						result.put("time", mg_get24HourTimeFormat(hh, mm));

						/**
						 *  creating the mcq options 
						 */
						if(mcq == true) {

							/**
							 * Creating the ArrayList 
							 */ 
							ArrayList<String> mcq_option = new ArrayList<>();

							/**
							 * Storing the value of answer in the ArrayList
							 */
							mcq_option.add(mg_convertTimeFormat(hh, mm));

							/**
							 * Creating the wrong mcq options
							 */
							String wrong_1;
							wrong_1 = mg_convertTimeFormat(hh + 1, mm);

							String wrong_2;
							wrong_2 = mg_convertTimeFormat(hh + 2, mm);

							String wrong_3;
							wrong_3 = mg_convertTimeFormat(hh - 1, mm);
							if(hh - 1 <= 0) {
								wrong_3 = mg_convertTimeFormat(hh + 3, mm);
							}

							String wrong_4;	    	
							wrong_4 = mg_convertTimeFormat(hh - 2, mm);
							if(hh - 2 <= 0) {
								wrong_4 = mg_convertTimeFormat(hh + 4, mm);
							}

							/**
							 * Storing the wrong options in ArrayList
							 */
							ArrayList<String> wrong_answer_set = new ArrayList<>(Arrays.asList(wrong_1, wrong_2, wrong_3, wrong_4));

							/**
							 * Shuffling the ArrayList
							 */
							Collections.shuffle(wrong_answer_set);

							/**
							 * Storing the values of wrong mcq options in the ArrayList
							 */
							mcq_option.add(wrong_answer_set.get(0));
							mcq_option.add(wrong_answer_set.get(1));
							mcq_option.add(wrong_answer_set.get(2));

							/**
							 * Shuffling the mcq options
							 */
							Collections.shuffle(mcq_option);

							/**
							 * Returning the values of mcq options to the HashMap
							 */
							result.put("mcq_options", mcq_option);
						} 

						/**
						 * Return the HashMap with values of 12 hour time, 24 hour time, ArrayList of mcq options
						 */ 
						return result;	      
					}

					/**
				    @name get_time_for_adding_hours_and_minutes()
					@description Gets the problem set data for the addition of hours and minutes                           
					@return HashMap (first hour(n1), first minutes(n2), second hour(n3), second minutes(n4), answer in hours, answer in minutes)
					 */
					public static Map<String, Object> mg_get_time_for_adding_hours_and_minutes() {

						/**
						 * Declaring the variables
						 */
						int n1, n3, n2, n4, answer_hour, answer_minutes;

						/**
						 * Initialize random generator
						 */
						Random random = new Random();

						/**
						 * Generating random numbers for the values of hours
						 */
						n1 = mg_giveRandomInteger(1, 10, random);
						n3 = mg_giveRandomInteger(1, 10, random);

						/**
						 * Generating random numbers for the values of minutes
						 */
						n2 = mg_giveRandomInteger(0, 59, random);
						n4 = mg_giveRandomInteger(0, 59, random);

						/**
						 * Calculating the required number of hours and minutes
						 */
						answer_hour = n1 + n3;
						answer_minutes = n2 + n4;    
						answer_hour = answer_hour + (answer_minutes / 60); /** for minutes more than 60 */
						answer_minutes = answer_minutes % 60;

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("hour1", n1);
						result.put("minute1", n2);
						result.put("hour2", n3);
						result.put("minute2", n4);
						result.put("answer_hour", answer_hour);
						result.put("answer_minute", answer_minutes);

						/**
						 * Return the HashMap with values of first hour(n1), first minutes(n2), second hour(n3), second minutes(n4), answer in hours, answer in minutes
						 */ 
						return result;
					}

					/**
				    @name get_time_for_subtracting_hours_and_minutes()
					@description Gets the problem set data for the subtraction of hours and minutes                           
					@return HashMap (first hour(n1), first minutes(n2), second hour(n3), second minutes(n4), answer in hours, answer in minutes)
					 */
					public static Map<String, Object> mg_get_time_for_subtracting_hours_and_minutes() {

						/**
						 * Declaring the variables
						 */
						int n1, n2, n3, n4, answer_hour, answer_minutes;

						/**
						 * Initializing the random generator
						 */
						Random random = new Random();

						/**
						 * Generating random numbers for the values of hours
						 */
						n1 = mg_giveRandomInteger(2, 12, random);
						n3 = mg_giveRandomInteger(1, (n1 - 1), random);

						/**
						 * Generating random numbers for the values of minutes
						 */
						n2 = mg_giveRandomInteger(0, 59, random);
						n4 = mg_giveRandomInteger(0, 59, random);

						/**
						 * Calculating the required number of hours and minutes
						 */
						answer_hour = n1 - n3;
						answer_minutes = n2 - n4;

						if (n2 < n4) {                         /** for minutes less than 0 */
							answer_minutes = (60 + n2)  -  n4;      
							answer_hour = answer_hour - 1;
						}

						/**
						 * Creating the HashMap 
						 */
						Map<String, Object> result = new HashMap<>();

						/**
						 * Storing the values in the HashMap 
						 */
						result.put("hour1", n1);
						result.put("minute1", n2);
						result.put("hour2", n3);
						result.put("minute2", n4);
						result.put("answer_hour", answer_hour);
						result.put("answer_minutes", answer_minutes);

						/**
						 * Return the HashMap with values of first hour(n1), first minutes(n2), second hour(n3), second minutes(n4), answer in hours, answer in minutes
						 */ 
						return result;
					}

/**
			 @name mg_checkPrimeNumber()
			 @description Checks whether a random number is a prime number or not.  
			 @param n - int - a random number                        
			 @return boolean - return true if it is a prime number
*/
public static boolean mg_checkPrimeNumber(int n) {	
ArrayList <Integer> temp_factors = new ArrayList<>();
for(int ii=1; ii<=n; ii++) {
	if(n % ii == 0) {
		temp_factors.add(ii);
	}
}

if(temp_factors.size() == 2) {
	return true;
} else {
	return false;
}
}
/**
	@name mg_shuffleString()
	@description shuffles the array of Strings 
	@param a - String[] - array of Strings                        
	@return a - String[] - Shuffled array of Strings
*/
public static String[] mg_shuffleString(String[] a) {
int n = a.length;
for (int i = 0; i < n; i++) {  /** between i and n-1 */
	int r = i + (int) (Math.random() * (n - i));
	String tmp = a[i];    /** swap */
	a[i] = a[r];
	a[r] = tmp;
}
return a;
}

/**
@name mg_containsInArray()
@description find the needle in the haystack 
@param array - ArrayList<Integer> - array of integers [haystack]
@param v - int - a single integer [needle]                        
@return boolean - return true if needle is found in haystack else false
*/
public static boolean mg_containsInArray(ArrayList<Integer> array, int v) {
for (int e : array) {
	if (e == v) {
		return true;
	}
}

return false;
}

/**
@name mg_containsInArray() for String
@description find the needle in the haystack 
@param array - ArrayList<String> - array of Strings [haystack]
@param v - String - a single integer [needle]                        
@return boolean - return true if needle is found in haystack else false
*/
public static boolean mg_containsInArray(ArrayList<String> array, String v) {
for (String e : array) {
	if (e == v) {
		return true;
	}
}

return false;
}

/**
@name mg_containsInArrayTwice()
@description checks whether the integer variable is present for 2 or more times in the ArrayList array or not 
@param array - ArrayList<Integer> - array of integers [haystack]
@param v - int - a single integer [needle]                        
@return boolean - return true if the variable is present for 2 or more times in the ArrayList
*/
public static boolean mg_containsInArrayTwice(ArrayList<Integer> array, int v) {

int temp = 0;
for (int e : array) {
	if(v == e) {
		temp++;   
	}
}

if (temp >= 2) {
	return true;
} else {
	return false;
}
}

/**
@name mg_toTitleCase() 
@description Gets the problem set converting pronoun to sentence case 
@param input - String - String that needs to be converted to sentence case                        
@return String in sentence case
*/
public static String toTitleCase(String input) {
StringBuilder titleCase = new StringBuilder();
boolean nextTitleCase = true;

for (char c : input.toCharArray()) {
	if (Character.isSpaceChar(c)) {
		nextTitleCase = true;
	} else if (nextTitleCase) {
		c = Character.toTitleCase(c);
		nextTitleCase = false;
	}

	titleCase.append(c);
}

return titleCase.toString();
}

/**
@name mg_containsInArrayTwice() 
@description checks whether the string variable is present for 2 or more times in the ArrayList array or not 
@param array - ArrayList<String> - array of strings [haystack]
@param v - String - a single string [needle]                        
@return boolean - return true if the variable is present for 2 or more times in the ArrayList 
*/
public static boolean mg_containsInArrayTwice(ArrayList<String> array, String v) {

int temp = 0;
for (String e : array) {
	if(v == e) {
		temp++;   
	}
}

if (temp >= 2) {
	return true;
} else {
	return false;
}
}


/**
@name mg_giveRandomInteger()
@description gives a random integer value between the range provided 
@param aStart - int - Range start value
@param aEnd - int - Range end value
@param aRandom - Random - Random object                        
@return randomNumber - int - Random integer value between the range
*/
private static int mg_giveRandomInteger(int aStart, int aEnd, Random aRandom) {
if (aStart > aEnd) {
	throw new IllegalArgumentException("Start cannot exceed End.");
}

/**
* get the range, casting to long to avoid overflow problems 
*/
long range = (long) aEnd - (long) aStart + 1;

/**
* compute a fraction of the range, 0 <= frac < range 
*/
long fraction = (long) (range * aRandom.nextDouble());
int randomNumber = (int) (fraction + aStart);
return randomNumber;
}

/**
@name mg_shuffleInt()
@description shuffles the array of integers 
@param a - Integer[] - array of integers                        
@return a - Integer[] - Shuffled array of integers
*/
public static int[] mg_shuffleInt(int[] a) {
int n = a.length;
for (int i = 0; i < n; i++) {  /** between i and n-1 */
	int r = i + (int) (Math.random() * (n - i));
	int tmp = a[i];    /** swap */
	a[i] = a[r];
	a[r] = tmp;
}
return a;
}

private static String[] units= {
	"",
	" One",
	" Two",
	" Three",
	" Four",
	" Five",
	" Six",
	" Seven",
	" Eight",
	" Nine"
};

private static String[] teen= {
	" Ten",
	" Eleven",
	" Twelve",
	" Thirteen",
	" Fourteen",
	" Fifteen",
	" Sixteen",
	" Seventeen",
	" Eighteen",
	" Nineteen"
};

private static String[] tens= {
	" Twenty",
	" Thirty",
	" Forty",
	" Fifty",
	" Sixty",
	" Seventy",
	" Eighty",
	" Ninety"
};

private static String[] maxs= {
	"",
	"",
	" Hundred",
	" Thousand",
	" Lakh",
	" Crore"
};

public static String convertNumberToWords(int n) {
String input=mg_numToString(n);
String converted=""; 
int pos=1; 
boolean hun=false;
while(input.length()> 0) {
	if(pos==1) {	// TENS AND UNIT POSITION
		if(input.length()>= 2) {	// TWO DIGIT NUMBERS
			String temp=input.substring(input.length()-2,input.length());
			input=input.substring(0,input.length()-2);
			converted+=mg_digits(temp);
		} else if(input.length()==1) {	 // 1 DIGIT NUMBER
			converted+=mg_digits(input); 
			input="";
		}
		pos++;
	} else if(pos==2) { // HUNDRED POSITION
		String temp=input.substring(input.length()-1,input.length());
		input=input.substring(0,input.length()-1);
		if(converted.length()> 0&&mg_digits(temp)!="") {
			converted=(mg_digits(temp)+maxs[pos]+" and")+converted;
			hun=true;
		} else {
			if(mg_digits(temp)=="");
			else
				converted=(mg_digits(temp)+maxs[pos])+converted;hun=true;
		}
		pos++;
	} else if(pos > 2) {	// REMAINING NUMBERS PAIRED BY TWO
		if(input.length()>= 2) {	// EXTRACT 2 DIGITS
			String temp=input.substring(input.length()-2,input.length());
			input=input.substring(0,input.length()-2);
			if(!hun&&converted.length()> 0) {
				converted=mg_digits(temp)+maxs[pos]+" and"+converted;
			} else {
				if(mg_digits(temp)=="");
				else
					converted=mg_digits(temp)+maxs[pos]+converted;
			}
		} else if(input.length()==1) {	 // EXTRACT 1 DIGIT
			if(!hun&&converted.length()> 0)
				converted=mg_digits(input)+maxs[pos]+" and"+converted;
			else {
				if(mg_digits(input)=="")  ;
				else
					converted=mg_digits(input)+maxs[pos]+converted;
				input="";
			}
		}
		pos++; 
	}
}
return converted;
}

private static String mg_digits(String temp) {	// TO RETURN SELECTED NUMBERS IN WORDS
String converted="";
for(int i=temp.length()-1;i >= 0;i--) {
	int ch=temp.charAt(i)-48;
	if(i==0&&ch>1 && temp.length()> 1)
		converted=tens[ch-2]+converted; // IF TENS DIGIT STARTS WITH 2 OR MORE IT FALLS UNDER TENS
	else if(i==0&&ch==1&&temp.length()==2) {	// IF TENS DIGIT STARTS WITH 1 IT FALLS UNDER TEENS
		int sum=0;
		for(int j=0;j < 2;j++)
			sum=(sum*10)+(temp.charAt(j)-48);
		return teen[sum-10];
	} else {
		if(ch > 0)
			converted=units[ch]+converted;
	} // IF SINGLE DIGIT PROVIDED
}
return converted;
}

private static String mg_numToString(int x) { 	// CONVERT THE NUMBER TO STRING
String num="";
while(x!=0) {
	num=((char)((x%10)+48))+num;
	x/=10;
}
return num;
}				

private static String[] units_mg_ordinal_type_1= {
	"",
	" First",
	" Second",
	" Third",
	" Fourth",
	" Fifth",
	" Sixth",
	" Seventh",
	" Eighth",
	" Ninth"
};

private static String[] teen_mg_ordinal_type_1= {
	" Tenth",
	" Eleventh",
	" Twelfth",
	" Thirteenth",
	" Fourteenth",
	" Fifteenth",
	" Sixteenth",
	" Seventeenth",
	" Eighteenth",
	" Nineteenth"
};

private static String[] tens_mg_ordinal_type_1= {
	" Twentieth",
	" Thirtieth",
	" Fortieth",
	" Fiftieth",
	" Sixtieth",
	" Seventieth",
	" Eightieth",
	" Ninetieth"
};

private static String[] maxs_mg_ordinal_type_1= {
	"",
	"",
	" Hundredth",
	" Thousandth",
	" Lakh",
	" Crore"
};

public static String mg_ordinal_type_1(int n) {
String input=mg_numToString_ordinal_type_1(n);
String converted=""; 
int pos=1; 
boolean hun=false;

while(input.length()> 0) {
	if(pos==1) {	// TENS AND UNIT POSITION
		if(input.length()>= 2) {	// TWO DIGIT NUMBERS
			String temp=input.substring(input.length()-2,input.length());
			input=input.substring(0,input.length()-2);
			converted+=mg_digits_mg_ordinal_type_1(temp);
		}
		else if(input.length()==1) {	// 1 DIGIT NUMBER
			converted+=mg_digits_mg_ordinal_type_1(input); 
			input="";
		}
		pos++;
	} else if(pos==2) {	// HUNDRED POSITION
		String temp=input.substring(input.length()-1,input.length());
		input=input.substring(0,input.length()-1);

		if(converted.length()> 0&&mg_digits_mg_ordinal_type_1(temp)!="") {
			converted=(mg_digits_mg_ordinal_type_1(temp)+maxs_mg_ordinal_type_1[pos]+" and")+converted;
			hun=true;
		} else {
			if
			(mg_digits_mg_ordinal_type_1(temp)=="");
			else
				converted=(mg_digits_mg_ordinal_type_1(temp)+maxs_mg_ordinal_type_1[pos])+converted;hun=true;
		}
		pos++;
	} else if(pos > 2) {	// REMAINING NUMBERS PAIRED BY TWO
		if(input.length()>= 2) {	// EXTRACT 2 DIGITS
			String temp=input.substring(input.length()-2,input.length());
			input=input.substring(0,input.length()-2);

			if(!hun&&converted.length()> 0)
				converted=mg_digits_mg_ordinal_type_1(temp)+maxs_mg_ordinal_type_1[pos]+" and"+converted;
			else {
				if(mg_digits_mg_ordinal_type_1(temp)=="")  ;
				else
					converted=mg_digits_mg_ordinal_type_1(temp)+maxs_mg_ordinal_type_1[pos]+converted;
			}
		} else if(input.length()==1) { // EXTRACT 1 DIGIT
			if(!hun&&converted.length()> 0)
				converted=mg_digits_mg_ordinal_type_1(input)+maxs_mg_ordinal_type_1[pos]+" and"+converted;
			else {
				if(mg_digits_mg_ordinal_type_1(input)=="")  ;
				else
					converted=mg_digits_mg_ordinal_type_1(input)+maxs_mg_ordinal_type_1[pos]+converted;
				input="";
			}
		}
		pos++; 
	}
}

String[] temp1= converted.split(" ");
String temp2 = convertNumberToWords(n);
String[] temp3= temp2.split(" ");
temp3[temp3.length - 1] = temp1[temp1.length - 1];
converted = "";

for(int ii = 0 ; ii < temp3.length ; ii++) {
	if(converted == "") {
		converted += temp3[ii];
	} else {
		converted += " " + temp3[ii];
	}
} 
return converted;
}

private static String mg_digits_mg_ordinal_type_1(String temp) {	// TO RETURN SELECTED NUMBERS IN WORDS
String converted="";
for(int i=temp.length()-1;i >= 0;i--) {
	int ch=temp.charAt(i)-48;

	if(i==0&&ch>1 && temp.length()> 1)
		converted=tens_mg_ordinal_type_1[ch-2]+converted; // IF TENS DIGIT STARTS WITH 2 OR MORE IT FALLS UNDER TENS
	else if(i==0&&ch==1&&temp.length()==2) {	// IF TENS DIGIT STARTS WITH 1 IT FALLS UNDER TEENS
		int sum=0;
		for(int j=0;j < 2;j++)
			sum=(sum*10)+(temp.charAt(j)-48);
		return teen_mg_ordinal_type_1[sum-10];
	} else {
		if(ch > 0)
			converted=units_mg_ordinal_type_1[ch]+converted;
	} // IF SINGLE DIGIT PROVIDED
}
return converted;
}

private static String mg_numToString_ordinal_type_1(int x) { 	// CONVERT THE NUMBER TO STRING
String num="";
while(x!=0) {
	num=((char)((x%10)+48))+num;
	x/=10;
}
return num;
}

public static String mg_ordinal_type_2(int i) {
String[] sufixes = new String[] { "th", "st", "nd", "rd", "th", "th", "th", "th", "th", "th" };
switch (i % 100) {
case 11:
case 12:
case 13:
	return i + "th";
default:
	return i + sufixes[i % 10];

}
}

private static final String[] tensNames = {
	"",
	" ten",
	" twenty",
	" thirty",
	" forty",
	" fifty",
	" sixty",
	" seventy",
	" eighty",
	" ninety"
};

private static final String[] numNames = {
	"",
	" one",
	" two",
	" three",
	" four",
	" five",
	" six",
	" seven",
	" eight",
	" nine",
	" ten",
	" eleven",
	" twelve",
	" thirteen",
	" fourteen",
	" fifteen",
	" sixteen",
	" seventeen",
	" eighteen",
	" nineteen"
};

private static String mg_convertLessThanOneThousand(int answer) {
String soFar;

if (answer % 100 < 20){
	soFar = numNames[answer % 100];
	answer /= 100;
}
else {
	soFar = numNames[answer % 10];
	answer /= 10;

	soFar = tensNames[answer % 10] + soFar;
	answer /= 10;
}
if (answer == 0) return soFar;
return numNames[answer] + " hundred" + soFar;
}

public static String mg_convert(long number) {

/**
*  0 to 999 999 999 999 
*/  
if (number == 0) { return "zero"; } 

String snumber = Long.toString(number);

/**
*  pad with "0" 
*/
String mask = "000000000000";
DecimalFormat df = new DecimalFormat(mask);
snumber = df.format(number);

/**
*  XXXnnnnnnnnn 
*/
int billions = Integer.parseInt(snumber.substring(0,3));

/**
*  nnnXXXnnnnnn 
*/
int millions  = Integer.parseInt(snumber.substring(3,6));

/**
*  nnnnnnXXXnnn 
*/
int hundredThousands = Integer.parseInt(snumber.substring(6,9));

/**
*  nnnnnnnnnXXX 
*/
int thousands = Integer.parseInt(snumber.substring(9,12));

String tradBillions;
switch (billions) {
case 0:
	tradBillions = "";
	break;
case 1 :
	tradBillions = mg_convertLessThanOneThousand(billions)
	+ " billion ";
	break;
default :
	tradBillions = mg_convertLessThanOneThousand(billions)
	+ " billion ";
}
String result =  tradBillions;

String tradMillions;
switch (millions) {
case 0:
	tradMillions = "";
	break;
case 1 :
	tradMillions = mg_convertLessThanOneThousand(millions)
	+ " million ";
	break;
default :
	tradMillions = mg_convertLessThanOneThousand(millions)
	+ " million ";
}
result =  result + tradMillions;

String tradHundredThousands;
switch (hundredThousands) {
case 0:
	tradHundredThousands = "";
	break;
case 1 :
	tradHundredThousands = "one thousand ";
	break;
default :
	tradHundredThousands = mg_convertLessThanOneThousand(hundredThousands)
	+ " thousand ";
}
result =  result + tradHundredThousands;

String tradThousand;
tradThousand = mg_convertLessThanOneThousand(thousands);
result =  result + tradThousand;

/**
*  remove extra spaces! 
*/
return result.replaceAll("^\\s+", "").replaceAll("\\b\\s{2,}\\b", " ");
}			

/**
@name mg_get_gcd()
@description Gets GCD for the 2 numbers 
@param a - int - first number 
@param b - int - Second number 
@return gcd - int
*/
private static int mg_get_gcd(int a, int b)
{
while (b > 0)
{
	int temp = b;
	b = a % b; // % is remainder
	a = temp;
}
return a;
}

/**
@name get_lcd()
@description Gets LCD for the 2 numbers 
@param a - int - first number 
@param b - int - Second number 
@return gcd - int
*/
private static int mg_get_lcm(int a, int b)
{
return a * (b / mg_get_gcd(a, b));
}

/**
@name mg_giveRandomDouble()
@description gives a random integer value between the range provided 
@param aStart - double - Range start value
@param aEnd - double - Range end value
@param aRandom - Random - Random object                        
@return randomNumber - double - Random integer value between the range
*/
private static double mg_giveRandomDouble(double aStart, double aEnd, Random aRandom) {
if (aStart > aEnd) {
	throw new IllegalArgumentException("Start cannot exceed End.");
}

/**
* get the range, casting to long to avoid overflow problems 
*/
double range = (double) aEnd - (double) aStart + 1;

/**
* compute a fraction of the range, 0 <= frac < range 
*/
double fraction = (double) (range * aRandom.nextDouble());
double randomNumber = (double) (fraction + aStart);
return randomNumber;
}

/**
@name mg_containsInArray() for double
@description find the needle in the haystack 
@param array - ArrayList<Double> - array of Strings [haystack]
@param v - double - a single integer [needle]                        
@return boolean - return true if needle is found in haystack else false
*/
public static boolean mg_containsInArray(ArrayList<Double> array, double v) {
for (double e : array) {
   if (e == v) {
       return true;
   }
}

return false;
}

/**
@name mg_getAge()
@description gets the number of years and months between two dates 
@param year1 - int - the first year (should be smaller or equal to the second year)
@param month1 - int - the first month  
@param day1 - int - the first day
@param year2 - int - the second year
@param month2 - int - the second month  
@param day2 - int - the second day                       
@return ArrayList<Integer> containing years and months between two dates
*/
public static ArrayList<Integer> mg_getAge(int year1, int month1, int day1, int year2, int month2, int day2) {
LocalDate start = LocalDate.of(year1, month1, day1); /** first date */
LocalDate end = LocalDate.of(year2, month2, day2); /** second date */

long years = ChronoUnit.YEARS.between(start, end);  
long months = ChronoUnit.MONTHS.between(start, end);

/**
* ArrayList storing value of years and months between two dates
*/
ArrayList<Integer> result = new ArrayList<Integer>();
result.add((int)years);
result.add((int)(months%12));

/**
* Return number of years and months between two dates
*/
return result;
}

/**
@name mg_convertTimeFormat()
@description gets the amount of time taken to complete a task 
@param hour - int - hours 
@param minutes - int - minutes                        
@return String containing hours and minutes along with a.m. (or p.m.)
*/
public static String mg_convertTimeFormat(int hour, int minutes ) {
String am_pm = "a.m.";

if((hour % 12) != hour ) { 		/** for hours greater than 12 */  
am_pm = "p.m.";        
hour = hour % 12;
if(hour == 0) { 			 /** if hour is zero */
	hour = 12;
}
} else if(hour == 0) {
hour = 12;
}

if(minutes == 0) {  		/** if minutes = 0, concatenate "00" in place of minutes variable*/ 
return Integer.toString(hour).concat(" ").concat(am_pm);
} else {
if(minutes <= 9) { 		/** if minutes is less than 9, pad "0" before the minutes integer*/
	return Integer.toString(hour).concat(":0").concat(Integer.toString(minutes)).concat(" ").concat(am_pm);
} else {
	return Integer.toString(hour).concat(":").concat(Integer.toString(minutes)).concat(" ").concat(am_pm);
}
}
}

/**
@name mg_getRandomNames()
@description gets two random names and their pronouns          
@return name1, name2, name3, object1, object2, object3, tree1, tree2, tree3, fruit1, fruit2, fruit3, pronoun1, pronoun2, relative_pronoun1, relative_pronoun2 
*/
private static ArrayList<String> mg_getRandomNames() {
	
	int rand1, rand2, rand3, rand4, rand5, rand6, rand7, rand8, rand9, rand10, rand11, rand12;
	
	/**
	 * Creating an array containing names
	 */
	String[] name_options = {"Rohit", "Rajat", "Sameer", "Raju", "Ketan", "Priya", "Nita", "Nisha", "Deepa", "Shweta"};
	String[] object_options = {"sweets", "chocolates", "candies", "mangoes", "oranges", "grapes", "apples", "samosas", "cakes", "strawberries"};
	String[] tree_options = {"mango", "peepal", "orange", "jamun", "banana", "coconut", "papaya", "babul", "banyan", "almond"};
	String[] fruit_options = {"custard apples", "apples", "pears", "grapes", "oranges", "papayas", "watermelons", "bananas", "mangoes", "chikoos"};
	
	/**
	 * Initializing the random generator
	 */
	Random random = new Random();
	
	/**
	 * Generating random numbers
	 */
	rand1 = mg_giveRandomInteger(0, name_options.length - 1, random);
	
	do{
		rand2 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand2 == rand1);
	
	do{
		rand9 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand9 == rand1 || rand9 == rand2);
	
	rand3 = mg_giveRandomInteger(0, name_options.length - 1, random);
	
	do{
		rand4 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand4 == rand3);

	do{
		rand12 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand12 == rand3 || rand12 == rand4);

	
	rand5 = mg_giveRandomInteger(0, name_options.length - 1, random);
	
	do{
		rand6 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand6 == rand5);
	
	do{
		rand10 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand10 == rand5 || rand10 == rand6);
	
	rand7 = mg_giveRandomInteger(0, name_options.length - 1, random);
	
	do{
		rand8 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand8 == rand7);
	
	do{
		rand11 = mg_giveRandomInteger(0, name_options.length - 1, random);
	} while(rand11 == rand7 || rand11 == rand8);
	
	/**
	 * Creating an ArrayList for storing name1, name2, name3, object1, object2, object3, tree1, tree2, tree3, fruit1, fruit2, fruit3, pronoun1, pronoun2, relative_pronoun1, relative_pronoun2
	 */
	ArrayList<String> result = new ArrayList<String>();
	
	/**
	 * Storing the values in the ArrayList
	 */
	result.add(name_options[rand1]);  	//0
	result.add(name_options[rand2]);	//1
	result.add(name_options[rand9]);    //2
	result.add(object_options[rand3]);	//3
	result.add(object_options[rand4]);	//4
	result.add(object_options[rand12]);	//5
	result.add(tree_options[rand5]);	//6
	result.add(tree_options[rand6]);	//7
	result.add(tree_options[rand10]);   //8
	result.add(fruit_options[rand7]);	//9
	result.add(fruit_options[rand8]);	//10
	result.add(fruit_options[rand11]);	//11
	
	if(rand1 <= 4) {
		result.add("He");				//12
		result.add("his");				//13
	} else {
		result.add("She");				//12
		result.add("her");				//13
	}
	
	if(rand2 <= 4) {
		result.add("He");				//14
		result.add("his");				//15
	} else {
		result.add("She");				//14
		result.add("her");				//15
	}
	
	/**
	 * Return name1, name2, object1, object2, tree1, tree2, fruit name1, fruit name2, pronoun1, pronoun2
	 */
	return result;
}

/**
@name mg_get24HourTimeFormat()
@description gets the time in a particular format 
@param hour - int - hours 
@param minutes - int - minutes                        
@return String containing hours and minutes along with a.m. (or p.m.)
*/
public static String mg_get24HourTimeFormat(int hour, int minutes) {

if(minutes == 0 && hour > 9) {  		/** if minutes = 0, concatenate "00" in place of minutes variable*/ 
return Integer.toString(hour);

} else if(minutes == 0 && hour <= 9) {  		/** if minutes = 0, concatenate "00" in place of minutes variable*/ 
return "0".concat(Integer.toString(hour));

} else if(minutes == 0 && hour == 0){
return ("00:00");

} else if(minutes <= 9 && hour > 9) { 		/** if minutes is less than 9, pad "0" before the minutes integer*/
return Integer.toString(hour).concat(":0").concat(Integer.toString(minutes));

} else if(hour <= 9 && minutes > 9) {
return ("0").concat(Integer.toString(hour)).concat(":").concat(Integer.toString(minutes));

} else if(hour == 0 && minutes > 9){
return "0".concat(Integer.toString(hour)).concat(":").concat(Integer.toString(minutes));

} else if(hour == 0 && minutes <= 9){
return "0".concat(Integer.toString(hour)).concat(":0").concat(Integer.toString(minutes));

} else if(hour <= 9 && minutes <= 9){
return "0".concat(Integer.toString(hour)).concat(":0").concat(Integer.toString(minutes));

}else {
return Integer.toString(hour).concat(":").concat(Integer.toString(minutes));
}
}

public static void main (String[] args ) {
obj = new MG_MathMainFile();

//System.out.println(mg_bll_multiplication_count_groups_and_objects_per_group(1));
String mmmm = "mg_bll_fractions_mixed_fractions(1);";

if(args.length > 0) {
mmmm = args[0];
}

String[] methodNameTemp = mmmm.split("\\(");
String methodName = methodNameTemp[0];
String[] methodNameTemp1 = methodNameTemp[1].split("\\)");
String[] methodNameTemp2 = methodNameTemp1[0].split("\\,");

JSONObject json = new JSONObject();

Method setNameMethod = null;

if(methodNameTemp2.length == 2) {
try {
	setNameMethod = obj.getClass().getMethod(methodName, int.class, int.class);
} catch (NoSuchMethodException e) {
	
	e.printStackTrace();
} catch (SecurityException e) {
	
	e.printStackTrace();
}

try {
	try {
		json.put("data",setNameMethod.invoke(obj, Integer.parseInt(methodNameTemp2[0]) , Integer.parseInt(methodNameTemp2[1] ) ) );
		System.out.println( json.toString() );
	} catch (JSONException e) {
		
		e.printStackTrace();
	}

} catch (IllegalAccessException e) {
	
	e.printStackTrace();
} catch (IllegalArgumentException e) {
	
	e.printStackTrace();
} catch (InvocationTargetException e) {
	
	e.printStackTrace();
}
} else {
if(methodNameTemp1[0] == "") {
	try {
		setNameMethod = obj.getClass().getMethod(methodName);
	} catch (NoSuchMethodException e) {
		
		e.printStackTrace();
	} catch (SecurityException e) {
		
		e.printStackTrace();
	}

	try {
		try {
			json.put("data",setNameMethod.invoke(obj) );
			System.out.println( json.toString() );
		} catch (JSONException e) {
			
			e.printStackTrace();
		}
		//System.out.println();
	} catch (IllegalAccessException e) {
		
		e.printStackTrace();
	} catch (IllegalArgumentException e) {
		
		e.printStackTrace();
	} catch (InvocationTargetException e) {
		
		e.printStackTrace();
	}
} else {
	try {
		setNameMethod = obj.getClass().getMethod(methodName, int.class);
	} catch (NoSuchMethodException e) {
		
		e.printStackTrace();
	} catch (SecurityException e) {
		
		e.printStackTrace();
	}

	try {
		try {
			json.put("data",setNameMethod.invoke(obj, Integer.parseInt(methodNameTemp2[0])));
			System.out.println( json.toString() );
		} catch (JSONException e) {
			
			e.printStackTrace();
		}

	} catch (IllegalAccessException e) {
		
		e.printStackTrace();
	} catch (IllegalArgumentException e) {
		
		e.printStackTrace();
	} catch (InvocationTargetException e) {
		
		e.printStackTrace();
			}
		}
	}
}

}